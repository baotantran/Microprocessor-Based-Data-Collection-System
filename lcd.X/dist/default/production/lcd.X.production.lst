

Microchip Technology PIC18 LITE Macro Assembler V1.44 build -154322312 
                                                                                               Sun Nov 05 05:03:53 2017

Microchip Technology Omniscient Code Generator v1.44 (Free mode) build 201709140600
     1                           	processor	18F25K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     6                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     7                           	psect	text0,global,reloc=2,class=CODE,delta=1
     8                           	psect	text1,global,reloc=2,class=CODE,delta=1
     9                           	psect	text2,global,reloc=2,class=CODE,delta=1
    10                           	psect	text3,global,reloc=2,class=CODE,delta=1
    11                           	psect	text4,global,reloc=2,class=CODE,delta=1
    12                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    13                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    14  0000                     
    15                           ; Version 1.44
    16                           ; Generated 14/09/2017 GMT
    17                           ; 
    18                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    19                           ; All rights reserved.
    20                           ; 
    21                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    22                           ; 
    23                           ; Redistribution and use in source and binary forms, with or without modification, are
    24                           ; permitted provided that the following conditions are met:
    25                           ; 
    26                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    27                           ;        conditions and the following disclaimer.
    28                           ; 
    29                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    30                           ;        of conditions and the following disclaimer in the documentation and/or other
    31                           ;        materials provided with the distribution.
    32                           ; 
    33                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    34                           ;        software without specific prior written permission.
    35                           ; 
    36                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    37                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    38                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    39                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    40                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    41                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    42                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    43                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    44                           ; 
    45                           ; 
    46                           ; Code-generator required, PIC18F25K22 Definitions
    47                           ; 
    48                           ; SFR Addresses
    49  0000                     _TRISC	set	3988
    50  0000                     _TRISA	set	3986
    51  0000                     _LATCbits	set	3979
    52  0000                     _LATAbits	set	3977
    53                           
    54                           ; #config settings
    55  0000                     
    56                           	psect	cinit
    57  007D1A                     __pcinit:
    58                           	opt stack 0
    59  007D1A                     start_initialization:
    60                           	opt stack 0
    61  007D1A                     __initialization:
    62                           	opt stack 0
    63  007D1A                     end_of_initialization:
    64                           	opt stack 0
    65  007D1A                     __end_of__initialization:
    66                           	opt stack 0
    67  007D1A  0100               	movlb	0
    68  007D1C  EF90  F03E         	goto	_main	;jump to C main() function
    69                           
    70                           	psect	cstackCOMRAM
    71  000001                     __pcstackCOMRAM:
    72                           	opt stack 0
    73  000001                     ??_switchE:
    74  000001                     
    75                           ; 1 bytes @ 0x0
    76  000001                     	ds	1
    77  000002                     ??_writeChar:
    78  000002                     ??_writeCMD:
    79                           
    80                           ; 1 bytes @ 0x1
    81  000002                     	ds	2
    82  000004                     writeChar@ch:
    83                           	opt stack 0
    84  000004                     writeCMD@cmd:
    85                           	opt stack 0
    86                           
    87                           ; 1 bytes @ 0x3
    88  000004                     	ds	1
    89  000005                     ??_initialize:
    90                           
    91                           ; 1 bytes @ 0x4
    92  000005                     	ds	1
    93  000006                     
    94                           ; 1 bytes @ 0x5
    95 ;;
    96 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
    97 ;;
    98 ;; *************** function _main *****************
    99 ;; Defined at:
   100 ;;		line 108 in file "lcd.c"
   101 ;; Parameters:    Size  Location     Type
   102 ;;		None
   103 ;; Auto vars:     Size  Location     Type
   104 ;;		None
   105 ;; Return value:  Size  Location     Type
   106 ;;                  1    wreg      void 
   107 ;; Registers used:
   108 ;;		wreg, status,2, status,0, cstack
   109 ;; Tracked objects:
   110 ;;		On entry : 0/0
   111 ;;		On exit  : 0/0
   112 ;;		Unchanged: 0/0
   113 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   114 ;;      Params:         0       0       0       0       0       0       0
   115 ;;      Locals:         0       0       0       0       0       0       0
   116 ;;      Temps:          0       0       0       0       0       0       0
   117 ;;      Totals:         0       0       0       0       0       0       0
   118 ;;Total ram usage:        0 bytes
   119 ;; Hardware stack levels required when called:    3
   120 ;; This function calls:
   121 ;;		_initialize
   122 ;;		_writeChar
   123 ;; This function is called by:
   124 ;;		Startup code after reset
   125 ;; This function uses a non-reentrant model
   126 ;;
   127                           
   128                           	psect	text0
   129  007D20                     __ptext0:
   130                           	opt stack 0
   131  007D20                     _main:
   132                           	opt stack 28
   133                           
   134                           ;lcd.c: 114: initialize();
   135                           
   136                           ;incstack = 0
   137  007D20  ECB2  F03E         	call	_initialize	;wreg free
   138                           
   139                           ;lcd.c: 115: writeChar('f');
   140  007D24  0E66               	movlw	102
   141  007D26  ECFA  F03E         	call	_writeChar
   142                           
   143                           ;lcd.c: 116: writeChar('u');
   144  007D2A  0E75               	movlw	117
   145  007D2C  ECFA  F03E         	call	_writeChar
   146                           
   147                           ;lcd.c: 117: writeChar('c');
   148  007D30  0E63               	movlw	99
   149  007D32  ECFA  F03E         	call	_writeChar
   150                           
   151                           ;lcd.c: 118: writeChar('k');
   152  007D36  0E6B               	movlw	107
   153  007D38  ECFA  F03E         	call	_writeChar
   154  007D3C                     l27:
   155  007D3C  D7FF               	goto	l27
   156  007D3E                     __end_of_main:
   157                           	opt stack 0
   158                           
   159 ;; *************** function _writeChar *****************
   160 ;; Defined at:
   161 ;;		line 39 in file "lcd.c"
   162 ;; Parameters:    Size  Location     Type
   163 ;;  ch              1    wreg     unsigned char 
   164 ;; Auto vars:     Size  Location     Type
   165 ;;  ch              1    3[COMRAM] unsigned char 
   166 ;; Return value:  Size  Location     Type
   167 ;;                  1    wreg      void 
   168 ;; Registers used:
   169 ;;		wreg, status,2, status,0, cstack
   170 ;; Tracked objects:
   171 ;;		On entry : 0/0
   172 ;;		On exit  : 0/0
   173 ;;		Unchanged: 0/0
   174 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   175 ;;      Params:         0       0       0       0       0       0       0
   176 ;;      Locals:         1       0       0       0       0       0       0
   177 ;;      Temps:          2       0       0       0       0       0       0
   178 ;;      Totals:         3       0       0       0       0       0       0
   179 ;;Total ram usage:        3 bytes
   180 ;; Hardware stack levels used:    1
   181 ;; Hardware stack levels required when called:    1
   182 ;; This function calls:
   183 ;;		_switchE
   184 ;; This function is called by:
   185 ;;		_main
   186 ;; This function uses a non-reentrant model
   187 ;;
   188                           
   189                           	psect	text1
   190  007DF4                     __ptext1:
   191                           	opt stack 0
   192  007DF4                     _writeChar:
   193                           	opt stack 29
   194                           
   195                           ;incstack = 0
   196                           ;writeChar@ch stored from wreg
   197  007DF4  6E04               	movwf	writeChar@ch,c
   198                           
   199                           ;lcd.c: 40: LATAbits.LATA0=1;
   200  007DF6  8089               	bsf	3977,0,c	;volatile
   201                           
   202                           ;lcd.c: 41: LATAbits.LATA1=0;
   203  007DF8  9289               	bcf	3977,1,c	;volatile
   204                           
   205                           ;lcd.c: 45: LATCbits.LATC7 = (ch >> 7)& 1;
   206  007DFA  6A02               	clrf	??_writeChar& (0+255),c
   207  007DFC  AE04               	btfss	writeChar@ch,7,c
   208  007DFE  D001               	bra	u45
   209  007E00  2A02               	incf	??_writeChar& (0+255),f,c
   210  007E02                     u45:
   211  007E02  0E01               	movlw	1
   212  007E04  1602               	andwf	??_writeChar,f,c
   213  007E06  3202               	rrcf	??_writeChar,f,c
   214  007E08  3202               	rrcf	??_writeChar,f,c
   215  007E0A  508B               	movf	3979,w,c	;volatile
   216  007E0C  1802               	xorwf	??_writeChar,w,c
   217  007E0E  0B7F               	andlw	-129
   218  007E10  1802               	xorwf	??_writeChar,w,c
   219  007E12  6E8B               	movwf	3979,c	;volatile
   220                           
   221                           ;lcd.c: 46: LATCbits.LATC6 = (ch >>6)&1;
   222  007E14  C004  F002         	movff	writeChar@ch,??_writeChar
   223  007E18  0E06               	movlw	6
   224  007E1A  6E03               	movwf	(??_writeChar+1)& (0+255),c
   225  007E1C                     u55:
   226  007E1C  90D8               	bcf	status,0,c
   227  007E1E  3202               	rrcf	??_writeChar,f,c
   228  007E20  2E03               	decfsz	(??_writeChar+1)& (0+255),f,c
   229  007E22  D7FC               	goto	u55
   230  007E24  0E01               	movlw	1
   231  007E26  1602               	andwf	??_writeChar,f,c
   232  007E28  3A02               	swapf	??_writeChar,f,c
   233  007E2A  4602               	rlncf	??_writeChar,f,c
   234  007E2C  4602               	rlncf	??_writeChar,f,c
   235  007E2E  508B               	movf	3979,w,c	;volatile
   236  007E30  1802               	xorwf	??_writeChar,w,c
   237  007E32  0BBF               	andlw	-65
   238  007E34  1802               	xorwf	??_writeChar,w,c
   239  007E36  6E8B               	movwf	3979,c	;volatile
   240                           
   241                           ;lcd.c: 47: LATCbits.LATC5 = (ch >>5)&1;
   242  007E38  C004  F002         	movff	writeChar@ch,??_writeChar
   243  007E3C  0E05               	movlw	5
   244  007E3E  6E03               	movwf	(??_writeChar+1)& (0+255),c
   245  007E40                     u65:
   246  007E40  90D8               	bcf	status,0,c
   247  007E42  3202               	rrcf	??_writeChar,f,c
   248  007E44  2E03               	decfsz	(??_writeChar+1)& (0+255),f,c
   249  007E46  D7FC               	goto	u65
   250  007E48  0E01               	movlw	1
   251  007E4A  1602               	andwf	??_writeChar,f,c
   252  007E4C  3A02               	swapf	??_writeChar,f,c
   253  007E4E  4602               	rlncf	??_writeChar,f,c
   254  007E50  508B               	movf	3979,w,c	;volatile
   255  007E52  1802               	xorwf	??_writeChar,w,c
   256  007E54  0BDF               	andlw	-33
   257  007E56  1802               	xorwf	??_writeChar,w,c
   258  007E58  6E8B               	movwf	3979,c	;volatile
   259                           
   260                           ;lcd.c: 48: LATCbits.LATC4 = (ch >>4)&1;
   261  007E5A  C004  F002         	movff	writeChar@ch,??_writeChar
   262  007E5E  3A02               	swapf	??_writeChar,f,c
   263  007E60  0E0F               	movlw	15
   264  007E62  1602               	andwf	??_writeChar,f,c
   265  007E64  0E01               	movlw	1
   266  007E66  1602               	andwf	??_writeChar,f,c
   267  007E68  3A02               	swapf	??_writeChar,f,c
   268  007E6A  508B               	movf	3979,w,c	;volatile
   269  007E6C  1802               	xorwf	??_writeChar,w,c
   270  007E6E  0BEF               	andlw	-17
   271  007E70  1802               	xorwf	??_writeChar,w,c
   272  007E72  6E8B               	movwf	3979,c	;volatile
   273                           
   274                           ;lcd.c: 49: LATCbits.LATC3 = (ch >>3)&1;
   275  007E74  C004  F002         	movff	writeChar@ch,??_writeChar
   276  007E78  90D8               	bcf	status,0,c
   277  007E7A  3202               	rrcf	??_writeChar,f,c
   278  007E7C  90D8               	bcf	status,0,c
   279  007E7E  3202               	rrcf	??_writeChar,f,c
   280  007E80  90D8               	bcf	status,0,c
   281  007E82  3202               	rrcf	??_writeChar,f,c
   282  007E84  0E01               	movlw	1
   283  007E86  1602               	andwf	??_writeChar,f,c
   284  007E88  4602               	rlncf	??_writeChar,f,c
   285  007E8A  4602               	rlncf	??_writeChar,f,c
   286  007E8C  4602               	rlncf	??_writeChar,f,c
   287  007E8E  508B               	movf	3979,w,c	;volatile
   288  007E90  1802               	xorwf	??_writeChar,w,c
   289  007E92  0BF7               	andlw	-9
   290  007E94  1802               	xorwf	??_writeChar,w,c
   291  007E96  6E8B               	movwf	3979,c	;volatile
   292                           
   293                           ;lcd.c: 50: LATCbits.LATC2 = (ch >>2)&1;
   294  007E98  C004  F002         	movff	writeChar@ch,??_writeChar
   295  007E9C  90D8               	bcf	status,0,c
   296  007E9E  3202               	rrcf	??_writeChar,f,c
   297  007EA0  90D8               	bcf	status,0,c
   298  007EA2  3202               	rrcf	??_writeChar,f,c
   299  007EA4  0E01               	movlw	1
   300  007EA6  1602               	andwf	??_writeChar,f,c
   301  007EA8  4602               	rlncf	??_writeChar,f,c
   302  007EAA  4602               	rlncf	??_writeChar,f,c
   303  007EAC  508B               	movf	3979,w,c	;volatile
   304  007EAE  1802               	xorwf	??_writeChar,w,c
   305  007EB0  0BFB               	andlw	-5
   306  007EB2  1802               	xorwf	??_writeChar,w,c
   307  007EB4  6E8B               	movwf	3979,c	;volatile
   308                           
   309                           ;lcd.c: 51: LATCbits.LATC1 = (ch >>1)&1;
   310  007EB6  C004  F002         	movff	writeChar@ch,??_writeChar
   311  007EBA  90D8               	bcf	status,0,c
   312  007EBC  3202               	rrcf	??_writeChar,f,c
   313  007EBE  0E01               	movlw	1
   314  007EC0  1602               	andwf	??_writeChar,f,c
   315  007EC2  4602               	rlncf	??_writeChar,f,c
   316  007EC4  508B               	movf	3979,w,c	;volatile
   317  007EC6  1802               	xorwf	??_writeChar,w,c
   318  007EC8  0BFD               	andlw	-3
   319  007ECA  1802               	xorwf	??_writeChar,w,c
   320  007ECC  6E8B               	movwf	3979,c	;volatile
   321                           
   322                           ;lcd.c: 52: LATCbits.LATC0 = (ch & 1);
   323  007ECE  C004  F002         	movff	writeChar@ch,??_writeChar
   324  007ED2  0E01               	movlw	1
   325  007ED4  1602               	andwf	??_writeChar,f,c
   326  007ED6  508B               	movf	3979,w,c	;volatile
   327  007ED8  1802               	xorwf	??_writeChar,w,c
   328  007EDA  0BFE               	andlw	-2
   329  007EDC  1802               	xorwf	??_writeChar,w,c
   330  007EDE  6E8B               	movwf	3979,c	;volatile
   331                           
   332                           ;lcd.c: 53: switchE();
   333  007EE0  EC9F  F03E         	call	_switchE	;wreg free
   334  007EE4  0012               	return		;funcret
   335  007EE6                     __end_of_writeChar:
   336                           	opt stack 0
   337                           status	equ	0xFD8
   338                           
   339 ;; *************** function _initialize *****************
   340 ;; Defined at:
   341 ;;		line 74 in file "lcd.c"
   342 ;; Parameters:    Size  Location     Type
   343 ;;		None
   344 ;; Auto vars:     Size  Location     Type
   345 ;;		None
   346 ;; Return value:  Size  Location     Type
   347 ;;                  1    wreg      void 
   348 ;; Registers used:
   349 ;;		wreg, status,2, status,0, cstack
   350 ;; Tracked objects:
   351 ;;		On entry : 0/0
   352 ;;		On exit  : 0/0
   353 ;;		Unchanged: 0/0
   354 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   355 ;;      Params:         0       0       0       0       0       0       0
   356 ;;      Locals:         0       0       0       0       0       0       0
   357 ;;      Temps:          1       0       0       0       0       0       0
   358 ;;      Totals:         1       0       0       0       0       0       0
   359 ;;Total ram usage:        1 bytes
   360 ;; Hardware stack levels used:    1
   361 ;; Hardware stack levels required when called:    2
   362 ;; This function calls:
   363 ;;		_writeCMD
   364 ;; This function is called by:
   365 ;;		_main
   366 ;; This function uses a non-reentrant model
   367 ;;
   368                           
   369                           	psect	text2
   370  007D64                     __ptext2:
   371                           	opt stack 0
   372  007D64                     _initialize:
   373                           	opt stack 28
   374                           
   375                           ;lcd.c: 78: _delay((unsigned long)((15)*(12000000/4000.0)));
   376                           
   377                           ;incstack = 0
   378  007D64  0E3B               	movlw	59
   379  007D66  6E05               	movwf	??_initialize& (0+255),c
   380  007D68  0E70               	movlw	112
   381  007D6A                     u77:
   382  007D6A  2EE8               	decfsz	wreg,f,c
   383  007D6C  D7FE               	bra	u77
   384  007D6E  2E05               	decfsz	??_initialize& (0+255),f,c
   385  007D70  D7FC               	bra	u77
   386                           
   387                           ;lcd.c: 79: TRISA = 0x00;
   388  007D72  0E00               	movlw	0
   389  007D74  6E92               	movwf	3986,c	;volatile
   390                           
   391                           ;lcd.c: 80: TRISC = 0x00;
   392  007D76  0E00               	movlw	0
   393  007D78  6E94               	movwf	3988,c	;volatile
   394                           
   395                           ;lcd.c: 84: _delay((unsigned long)((15)*(12000000/4000.0)));
   396  007D7A  0E3B               	movlw	59
   397  007D7C  6E05               	movwf	??_initialize& (0+255),c
   398  007D7E  0E70               	movlw	112
   399  007D80                     u87:
   400  007D80  2EE8               	decfsz	wreg,f,c
   401  007D82  D7FE               	bra	u87
   402  007D84  2E05               	decfsz	??_initialize& (0+255),f,c
   403  007D86  D7FC               	bra	u87
   404                           
   405                           ;lcd.c: 86: writeCMD(0x30);
   406  007D88  0E30               	movlw	48
   407  007D8A  EC73  F03F         	call	_writeCMD
   408                           
   409                           ;lcd.c: 88: writeCMD(0x38);
   410  007D8E  0E38               	movlw	56
   411  007D90  EC73  F03F         	call	_writeCMD
   412                           
   413                           ;lcd.c: 89: _delay((unsigned long)((15)*(12000000/4000.0)));
   414  007D94  0E3B               	movlw	59
   415  007D96  6E05               	movwf	??_initialize& (0+255),c
   416  007D98  0E70               	movlw	112
   417  007D9A                     u97:
   418  007D9A  2EE8               	decfsz	wreg,f,c
   419  007D9C  D7FE               	bra	u97
   420  007D9E  2E05               	decfsz	??_initialize& (0+255),f,c
   421  007DA0  D7FC               	bra	u97
   422                           
   423                           ;lcd.c: 91: writeCMD(0x08);
   424  007DA2  0E08               	movlw	8
   425  007DA4  EC73  F03F         	call	_writeCMD
   426                           
   427                           ;lcd.c: 92: _delay((unsigned long)((15)*(12000000/4000.0)));
   428  007DA8  0E3B               	movlw	59
   429  007DAA  6E05               	movwf	??_initialize& (0+255),c
   430  007DAC  0E70               	movlw	112
   431  007DAE                     u107:
   432  007DAE  2EE8               	decfsz	wreg,f,c
   433  007DB0  D7FE               	bra	u107
   434  007DB2  2E05               	decfsz	??_initialize& (0+255),f,c
   435  007DB4  D7FC               	bra	u107
   436                           
   437                           ;lcd.c: 96: writeCMD(0x01);
   438  007DB6  0E01               	movlw	1
   439  007DB8  EC73  F03F         	call	_writeCMD
   440                           
   441                           ;lcd.c: 97: _delay((unsigned long)((15)*(12000000/4000.0)));
   442  007DBC  0E3B               	movlw	59
   443  007DBE  6E05               	movwf	??_initialize& (0+255),c
   444  007DC0  0E70               	movlw	112
   445  007DC2                     u117:
   446  007DC2  2EE8               	decfsz	wreg,f,c
   447  007DC4  D7FE               	bra	u117
   448  007DC6  2E05               	decfsz	??_initialize& (0+255),f,c
   449  007DC8  D7FC               	bra	u117
   450                           
   451                           ;lcd.c: 99: writeCMD(0x06);
   452  007DCA  0E06               	movlw	6
   453  007DCC  EC73  F03F         	call	_writeCMD
   454                           
   455                           ;lcd.c: 100: _delay((unsigned long)((15)*(12000000/4000.0)));
   456  007DD0  0E3B               	movlw	59
   457  007DD2  6E05               	movwf	??_initialize& (0+255),c
   458  007DD4  0E70               	movlw	112
   459  007DD6                     u127:
   460  007DD6  2EE8               	decfsz	wreg,f,c
   461  007DD8  D7FE               	bra	u127
   462  007DDA  2E05               	decfsz	??_initialize& (0+255),f,c
   463  007DDC  D7FC               	bra	u127
   464                           
   465                           ;lcd.c: 101: writeCMD(0xF);
   466  007DDE  0E0F               	movlw	15
   467  007DE0  EC73  F03F         	call	_writeCMD
   468                           
   469                           ;lcd.c: 102: _delay((unsigned long)((15)*(12000000/4000.0)));
   470  007DE4  0E3B               	movlw	59
   471  007DE6  6E05               	movwf	??_initialize& (0+255),c
   472  007DE8  0E70               	movlw	112
   473  007DEA                     u137:
   474  007DEA  2EE8               	decfsz	wreg,f,c
   475  007DEC  D7FE               	bra	u137
   476  007DEE  2E05               	decfsz	??_initialize& (0+255),f,c
   477  007DF0  D7FC               	bra	u137
   478  007DF2  0012               	return		;funcret
   479  007DF4                     __end_of_initialize:
   480                           	opt stack 0
   481                           wreg	equ	0xFE8
   482                           status	equ	0xFD8
   483                           
   484 ;; *************** function _writeCMD *****************
   485 ;; Defined at:
   486 ;;		line 55 in file "lcd.c"
   487 ;; Parameters:    Size  Location     Type
   488 ;;  cmd             1    wreg     unsigned char 
   489 ;; Auto vars:     Size  Location     Type
   490 ;;  cmd             1    3[COMRAM] unsigned char 
   491 ;; Return value:  Size  Location     Type
   492 ;;                  1    wreg      void 
   493 ;; Registers used:
   494 ;;		wreg, status,2, status,0, cstack
   495 ;; Tracked objects:
   496 ;;		On entry : 0/0
   497 ;;		On exit  : 0/0
   498 ;;		Unchanged: 0/0
   499 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   500 ;;      Params:         0       0       0       0       0       0       0
   501 ;;      Locals:         1       0       0       0       0       0       0
   502 ;;      Temps:          2       0       0       0       0       0       0
   503 ;;      Totals:         3       0       0       0       0       0       0
   504 ;;Total ram usage:        3 bytes
   505 ;; Hardware stack levels used:    1
   506 ;; Hardware stack levels required when called:    1
   507 ;; This function calls:
   508 ;;		_switchE
   509 ;; This function is called by:
   510 ;;		_initialize
   511 ;; This function uses a non-reentrant model
   512 ;;
   513                           
   514                           	psect	text3
   515  007EE6                     __ptext3:
   516                           	opt stack 0
   517  007EE6                     _writeCMD:
   518                           	opt stack 28
   519                           
   520                           ;incstack = 0
   521                           ;writeCMD@cmd stored from wreg
   522  007EE6  6E04               	movwf	writeCMD@cmd,c
   523                           
   524                           ;lcd.c: 56: LATAbits.LATA0 = 0;
   525  007EE8  9089               	bcf	3977,0,c	;volatile
   526                           
   527                           ;lcd.c: 57: LATAbits.LATA1 = 0;
   528  007EEA  9289               	bcf	3977,1,c	;volatile
   529                           
   530                           ;lcd.c: 58: _delay((unsigned long)((100)*(12000000/4000.0)));
   531  007EEC  0E02               	movlw	2
   532  007EEE  6E03               	movwf	(??_writeCMD+1)& (0+255),c
   533  007EF0  0E86               	movlw	134
   534  007EF2  6E02               	movwf	??_writeCMD& (0+255),c
   535  007EF4  0E99               	movlw	153
   536  007EF6                     u147:
   537  007EF6  2EE8               	decfsz	wreg,f,c
   538  007EF8  D7FE               	bra	u147
   539  007EFA  2E02               	decfsz	??_writeCMD& (0+255),f,c
   540  007EFC  D7FC               	bra	u147
   541  007EFE  2E03               	decfsz	(??_writeCMD+1)& (0+255),f,c
   542  007F00  D7FA               	bra	u147
   543  007F02  F000               	nop	
   544                           
   545                           ;lcd.c: 59: LATCbits.LATC7 = ((cmd >> 7)&1);
   546  007F04  6A02               	clrf	??_writeCMD& (0+255),c
   547  007F06  AE04               	btfss	writeCMD@cmd,7,c
   548  007F08  D001               	bra	u15
   549  007F0A  2A02               	incf	??_writeCMD& (0+255),f,c
   550  007F0C                     u15:
   551  007F0C  0E01               	movlw	1
   552  007F0E  1602               	andwf	??_writeCMD,f,c
   553  007F10  3202               	rrcf	??_writeCMD,f,c
   554  007F12  3202               	rrcf	??_writeCMD,f,c
   555  007F14  508B               	movf	3979,w,c	;volatile
   556  007F16  1802               	xorwf	??_writeCMD,w,c
   557  007F18  0B7F               	andlw	-129
   558  007F1A  1802               	xorwf	??_writeCMD,w,c
   559  007F1C  6E8B               	movwf	3979,c	;volatile
   560                           
   561                           ;lcd.c: 60: LATCbits.LATC6 = ((cmd >> 6)&1);
   562  007F1E  C004  F002         	movff	writeCMD@cmd,??_writeCMD
   563  007F22  0E06               	movlw	6
   564  007F24  6E03               	movwf	(??_writeCMD+1)& (0+255),c
   565  007F26                     u25:
   566  007F26  90D8               	bcf	status,0,c
   567  007F28  3202               	rrcf	??_writeCMD,f,c
   568  007F2A  2E03               	decfsz	(??_writeCMD+1)& (0+255),f,c
   569  007F2C  D7FC               	goto	u25
   570  007F2E  0E01               	movlw	1
   571  007F30  1602               	andwf	??_writeCMD,f,c
   572  007F32  3A02               	swapf	??_writeCMD,f,c
   573  007F34  4602               	rlncf	??_writeCMD,f,c
   574  007F36  4602               	rlncf	??_writeCMD,f,c
   575  007F38  508B               	movf	3979,w,c	;volatile
   576  007F3A  1802               	xorwf	??_writeCMD,w,c
   577  007F3C  0BBF               	andlw	-65
   578  007F3E  1802               	xorwf	??_writeCMD,w,c
   579  007F40  6E8B               	movwf	3979,c	;volatile
   580                           
   581                           ;lcd.c: 61: LATCbits.LATC5 = ((cmd >> 5)&1);
   582  007F42  C004  F002         	movff	writeCMD@cmd,??_writeCMD
   583  007F46  0E05               	movlw	5
   584  007F48  6E03               	movwf	(??_writeCMD+1)& (0+255),c
   585  007F4A                     u35:
   586  007F4A  90D8               	bcf	status,0,c
   587  007F4C  3202               	rrcf	??_writeCMD,f,c
   588  007F4E  2E03               	decfsz	(??_writeCMD+1)& (0+255),f,c
   589  007F50  D7FC               	goto	u35
   590  007F52  0E01               	movlw	1
   591  007F54  1602               	andwf	??_writeCMD,f,c
   592  007F56  3A02               	swapf	??_writeCMD,f,c
   593  007F58  4602               	rlncf	??_writeCMD,f,c
   594  007F5A  508B               	movf	3979,w,c	;volatile
   595  007F5C  1802               	xorwf	??_writeCMD,w,c
   596  007F5E  0BDF               	andlw	-33
   597  007F60  1802               	xorwf	??_writeCMD,w,c
   598  007F62  6E8B               	movwf	3979,c	;volatile
   599                           
   600                           ;lcd.c: 62: LATCbits.LATC4 = ((cmd >> 4)&1);
   601  007F64  C004  F002         	movff	writeCMD@cmd,??_writeCMD
   602  007F68  3A02               	swapf	??_writeCMD,f,c
   603  007F6A  0E0F               	movlw	15
   604  007F6C  1602               	andwf	??_writeCMD,f,c
   605  007F6E  0E01               	movlw	1
   606  007F70  1602               	andwf	??_writeCMD,f,c
   607  007F72  3A02               	swapf	??_writeCMD,f,c
   608  007F74  508B               	movf	3979,w,c	;volatile
   609  007F76  1802               	xorwf	??_writeCMD,w,c
   610  007F78  0BEF               	andlw	-17
   611  007F7A  1802               	xorwf	??_writeCMD,w,c
   612  007F7C  6E8B               	movwf	3979,c	;volatile
   613                           
   614                           ;lcd.c: 63: LATCbits.LATC3 = ((cmd >> 3)&1);
   615  007F7E  C004  F002         	movff	writeCMD@cmd,??_writeCMD
   616  007F82  90D8               	bcf	status,0,c
   617  007F84  3202               	rrcf	??_writeCMD,f,c
   618  007F86  90D8               	bcf	status,0,c
   619  007F88  3202               	rrcf	??_writeCMD,f,c
   620  007F8A  90D8               	bcf	status,0,c
   621  007F8C  3202               	rrcf	??_writeCMD,f,c
   622  007F8E  0E01               	movlw	1
   623  007F90  1602               	andwf	??_writeCMD,f,c
   624  007F92  4602               	rlncf	??_writeCMD,f,c
   625  007F94  4602               	rlncf	??_writeCMD,f,c
   626  007F96  4602               	rlncf	??_writeCMD,f,c
   627  007F98  508B               	movf	3979,w,c	;volatile
   628  007F9A  1802               	xorwf	??_writeCMD,w,c
   629  007F9C  0BF7               	andlw	-9
   630  007F9E  1802               	xorwf	??_writeCMD,w,c
   631  007FA0  6E8B               	movwf	3979,c	;volatile
   632                           
   633                           ;lcd.c: 64: LATCbits.LATC2 = ((cmd >> 2)&1);
   634  007FA2  C004  F002         	movff	writeCMD@cmd,??_writeCMD
   635  007FA6  90D8               	bcf	status,0,c
   636  007FA8  3202               	rrcf	??_writeCMD,f,c
   637  007FAA  90D8               	bcf	status,0,c
   638  007FAC  3202               	rrcf	??_writeCMD,f,c
   639  007FAE  0E01               	movlw	1
   640  007FB0  1602               	andwf	??_writeCMD,f,c
   641  007FB2  4602               	rlncf	??_writeCMD,f,c
   642  007FB4  4602               	rlncf	??_writeCMD,f,c
   643  007FB6  508B               	movf	3979,w,c	;volatile
   644  007FB8  1802               	xorwf	??_writeCMD,w,c
   645  007FBA  0BFB               	andlw	-5
   646  007FBC  1802               	xorwf	??_writeCMD,w,c
   647  007FBE  6E8B               	movwf	3979,c	;volatile
   648                           
   649                           ;lcd.c: 65: LATCbits.LATC1 = ((cmd >> 1)&1);
   650  007FC0  C004  F002         	movff	writeCMD@cmd,??_writeCMD
   651  007FC4  90D8               	bcf	status,0,c
   652  007FC6  3202               	rrcf	??_writeCMD,f,c
   653  007FC8  0E01               	movlw	1
   654  007FCA  1602               	andwf	??_writeCMD,f,c
   655  007FCC  4602               	rlncf	??_writeCMD,f,c
   656  007FCE  508B               	movf	3979,w,c	;volatile
   657  007FD0  1802               	xorwf	??_writeCMD,w,c
   658  007FD2  0BFD               	andlw	-3
   659  007FD4  1802               	xorwf	??_writeCMD,w,c
   660  007FD6  6E8B               	movwf	3979,c	;volatile
   661                           
   662                           ;lcd.c: 66: LATCbits.LATC0 = (cmd & 1);
   663  007FD8  C004  F002         	movff	writeCMD@cmd,??_writeCMD
   664  007FDC  0E01               	movlw	1
   665  007FDE  1602               	andwf	??_writeCMD,f,c
   666  007FE0  508B               	movf	3979,w,c	;volatile
   667  007FE2  1802               	xorwf	??_writeCMD,w,c
   668  007FE4  0BFE               	andlw	-2
   669  007FE6  1802               	xorwf	??_writeCMD,w,c
   670  007FE8  6E8B               	movwf	3979,c	;volatile
   671                           
   672                           ;lcd.c: 67: switchE();
   673  007FEA  EC9F  F03E         	call	_switchE	;wreg free
   674                           
   675                           ;lcd.c: 68: _delay((unsigned long)((10)*(12000000/4000.0)));
   676  007FEE  0E27               	movlw	39
   677  007FF0  6E02               	movwf	??_writeCMD& (0+255),c
   678  007FF2  0EF5               	movlw	245
   679  007FF4                     u157:
   680  007FF4  2EE8               	decfsz	wreg,f,c
   681  007FF6  D7FE               	bra	u157
   682  007FF8  2E02               	decfsz	??_writeCMD& (0+255),f,c
   683  007FFA  D7FC               	bra	u157
   684  007FFC  F000               	nop	
   685  007FFE  0012               	return		;funcret
   686  008000                     __end_of_writeCMD:
   687                           	opt stack 0
   688                           wreg	equ	0xFE8
   689                           status	equ	0xFD8
   690                           
   691 ;; *************** function _switchE *****************
   692 ;; Defined at:
   693 ;;		line 32 in file "lcd.c"
   694 ;; Parameters:    Size  Location     Type
   695 ;;		None
   696 ;; Auto vars:     Size  Location     Type
   697 ;;		None
   698 ;; Return value:  Size  Location     Type
   699 ;;                  1    wreg      void 
   700 ;; Registers used:
   701 ;;		wreg
   702 ;; Tracked objects:
   703 ;;		On entry : 0/0
   704 ;;		On exit  : 0/0
   705 ;;		Unchanged: 0/0
   706 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   707 ;;      Params:         0       0       0       0       0       0       0
   708 ;;      Locals:         0       0       0       0       0       0       0
   709 ;;      Temps:          1       0       0       0       0       0       0
   710 ;;      Totals:         1       0       0       0       0       0       0
   711 ;;Total ram usage:        1 bytes
   712 ;; Hardware stack levels used:    1
   713 ;; This function calls:
   714 ;;		Nothing
   715 ;; This function is called by:
   716 ;;		_writeChar
   717 ;;		_writeCMD
   718 ;; This function uses a non-reentrant model
   719 ;;
   720                           
   721                           	psect	text4
   722  007D3E                     __ptext4:
   723                           	opt stack 0
   724  007D3E                     _switchE:
   725                           	opt stack 29
   726                           
   727                           ;lcd.c: 33: LATAbits.LATA2=1;
   728                           
   729                           ;incstack = 0
   730  007D3E  8489               	bsf	3977,2,c	;volatile
   731                           
   732                           ;lcd.c: 34: _delay((unsigned long)((10)*(12000000/4000.0)));
   733  007D40  0E27               	movlw	39
   734  007D42  6E01               	movwf	??_switchE& (0+255),c
   735  007D44  0EF5               	movlw	245
   736  007D46                     u167:
   737  007D46  2EE8               	decfsz	wreg,f,c
   738  007D48  D7FE               	bra	u167
   739  007D4A  2E01               	decfsz	??_switchE& (0+255),f,c
   740  007D4C  D7FC               	bra	u167
   741  007D4E  F000               	nop	
   742                           
   743                           ;lcd.c: 35: LATAbits.LATA2=0;
   744  007D50  9489               	bcf	3977,2,c	;volatile
   745                           
   746                           ;lcd.c: 36: _delay((unsigned long)((10)*(12000000/4000.0)));
   747  007D52  0E27               	movlw	39
   748  007D54  6E01               	movwf	??_switchE& (0+255),c
   749  007D56  0EF5               	movlw	245
   750  007D58                     u177:
   751  007D58  2EE8               	decfsz	wreg,f,c
   752  007D5A  D7FE               	bra	u177
   753  007D5C  2E01               	decfsz	??_switchE& (0+255),f,c
   754  007D5E  D7FC               	bra	u177
   755  007D60  F000               	nop	
   756  007D62  0012               	return		;funcret
   757  007D64                     __end_of_switchE:
   758                           	opt stack 0
   759  0000                     wreg	equ	0xFE8
   760                           status	equ	0xFD8
   761                           wreg	equ	0xFE8
   762                           status	equ	0xFD8
   763                           
   764                           	psect	rparam
   765  0000                     wreg	equ	0xFE8
   766                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95      5       5
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _main->_initialize
    _writeChar->_switchE
    _initialize->_writeCMD
    _writeCMD->_switchE

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0     240
                         _initialize
                          _writeChar
 ---------------------------------------------------------------------------------
 (1) _writeChar                                            3     3      0     120
                                              1 COMRAM     3     3      0
                            _switchE
 ---------------------------------------------------------------------------------
 (1) _initialize                                           1     1      0     120
                                              4 COMRAM     1     1      0
                           _writeCMD
 ---------------------------------------------------------------------------------
 (2) _writeCMD                                             3     3      0     120
                                              1 COMRAM     3     3      0
                            _switchE
 ---------------------------------------------------------------------------------
 (2) _switchE                                              1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _initialize
     _writeCMD
       _switchE
   _writeChar
     _switchE

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           5F      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              5F      5       5       1        5.3%
STACK                0      0       0       2        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0      0       0       4        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0       0       6        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0       0       8        0.0%
ABS                  0      0       0       9        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BIGRAM             5FF      0       0      16        0.0%
DATA                 0      0       0      17        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%


Microchip Technology PIC18 Macro Assembler V1.44 build -154322312 
Symbol Table                                                                                   Sun Nov 05 05:03:53 2017

                     l27 7D3C                       u15 7F0C                       u25 7F26  
                     u35 7F4A                       u45 7E02                       u55 7E1C  
                     u65 7E40                       u77 7D6A                       u87 7D80  
                     u97 7D9A             __CFG_CP0$OFF 000000             __CFG_CP1$OFF 000000  
           __CFG_CP2$OFF 000000             __CFG_CP3$OFF 000000              __CFG_LVP$ON 000000  
           __CFG_CPB$OFF 000000                      u107 7DAE                      u117 7DC2  
                    u127 7DD6                      u137 7DEA                      u147 7EF6  
                    u157 7FF4                      u167 7D46                      u177 7D58  
           __CFG_CPD$OFF 000000                      wreg 000FE8                     _main 7D20  
          __CFG_BORV$190 000000                     start 0000            __CFG_IESO$OFF 000000  
           ___param_bank 000000                    ?_main 0001            __CFG_WDTEN$ON 000000  
                  _TRISA 000F92                    _TRISC 000F94            __CFG_WRT0$OFF 000000  
          __CFG_WRT1$OFF 000000            __CFG_WRT2$OFF 000000            __CFG_WRT3$OFF 000000  
         __CFG_EBTR0$OFF 000000           __CFG_FCMEN$OFF 000000           __CFG_EBTR1$OFF 000000  
         __CFG_EBTR2$OFF 000000           __CFG_EBTR3$OFF 000000            __CFG_WRTB$OFF 000000  
          __CFG_WRTC$OFF 000000            __CFG_WRTD$OFF 000000           __CFG_EBTRB$OFF 000000  
     __CFG_MCLRE$EXTMCLR 000000                    status 000FD8          __end_of_switchE 7D64  
         __CFG_HFOFST$ON 000000           __CFG_PBADEN$ON 000000          __initialization 7D1A  
           __end_of_main 7D3E                   ??_main 0006            __activetblptr 000000  
         __CFG_XINST$OFF 000000           __CFG_STVREN$ON 000000                ??_switchE 0001  
       __end_of_writeCMD 8000               __accesstop 0060  __end_of__initialization 7D1A  
          ___rparam_used 000001           __pcstackCOMRAM 0001          __CFG_PLLCFG$OFF 000000  
     __CFG_CCP2MX$PORTC1 000000       __CFG_CCP3MX$PORTB5 000000       __size_of_writeChar 00F2  
        __CFG_PWRTEN$OFF 000000                  __Hparam 0000                  __Lparam 0000  
                __pcinit 7D1A                  __ramtop 0600                ?_writeCMD 0001  
             _initialize 7D64                  __ptext0 7D20                  __ptext1 7DF4  
                __ptext2 7D64                  __ptext3 7EE6                  __ptext4 7D3E  
                _switchE 7D3E     end_of_initialization 7D1A               ??_writeCMD 0002  
      __end_of_writeChar 7EE6              ?_initialize 0001      start_initialization 7D1A  
    __size_of_initialize 0090         __CFG_PRICLKEN$ON 000000        __size_of_writeCMD 011A  
            writeCMD@cmd 0004                 ?_switchE 0001                 _LATAbits 000F89  
               _LATCbits 000F8B              writeChar@ch 0004         __CFG_WDTPS$32768 000000  
              _writeChar 7DF4                 __Hrparam 0000                 __Lrparam 0000  
     __CFG_BOREN$SBORDIS 000000        __CFG_P2BMX$PORTB5 000000             ??_initialize 0005  
             ?_writeChar 0001         __size_of_switchE 0026            __size_of_main 001E  
     __end_of_initialize 7DF4                 _writeCMD 7EE6        __CFG_T3CMX$PORTC0 000000  
            ??_writeChar 0002        __CFG_FOSC$INTIO67 000000  
