

Microchip Technology PIC18 LITE Macro Assembler V1.43 build -156212558 
                                                                                               Mon Nov 06 05:47:01 2017

Microchip Technology Omniscient Code Generator v1.43 (Free mode) build 201707250354
     1                           	processor	18F25K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text16,global,reloc=2,class=CODE,delta=1
    29                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    31                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=1
    32                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=1
    33                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=1
    34                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=1
    35                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=1
    36                           	psect	text24,global,reloc=2,class=CODE,delta=1,group=1
    37                           	psect	text25,global,reloc=2,class=CODE,delta=1,group=1
    38                           	psect	text26,global,reloc=2,class=CODE,delta=1,group=1
    39                           	psect	text27,global,reloc=2,class=CODE,delta=1,group=1
    40                           	psect	text28,global,reloc=2,class=CODE,delta=1,group=1
    41                           	psect	text29,global,reloc=2,class=CODE,delta=1,group=1
    42                           	psect	text30,global,reloc=2,class=CODE,delta=1,group=1
    43                           	psect	text31,global,reloc=2,class=CODE,delta=1,group=1
    44                           	psect	text32,global,reloc=2,class=CODE,delta=1,group=1
    45                           	psect	text33,global,reloc=2,class=CODE,delta=1,group=1
    46                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    47                           	psect	text35,global,reloc=2,class=CODE,delta=1
    48                           	psect	text36,global,reloc=2,class=CODE,delta=1
    49                           	psect	text37,global,reloc=2,class=CODE,delta=1
    50                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    51                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    52                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    53  0000                     
    54                           ; Version 1.43
    55                           ; Generated 25/07/2017 GMT
    56                           ; 
    57                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    58                           ; All rights reserved.
    59                           ; 
    60                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    61                           ; 
    62                           ; Redistribution and use in source and binary forms, with or without modification, are
    63                           ; permitted provided that the following conditions are met:
    64                           ; 
    65                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    66                           ;        conditions and the following disclaimer.
    67                           ; 
    68                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    69                           ;        of conditions and the following disclaimer in the documentation and/or other
    70                           ;        materials provided with the distribution.
    71                           ; 
    72                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    73                           ;        software without specific prior written permission.
    74                           ; 
    75                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    76                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    77                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    78                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    79                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    80                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    81                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    82                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    83                           ; 
    84                           ; 
    85                           ; Code-generator required, PIC18F25K22 Definitions
    86                           ; 
    87                           ; SFR Addresses
    88  0000                     
    89                           	psect	idataCOMRAM
    90  003046                     __pidataCOMRAM:
    91                           	opt stack 0
    92                           
    93                           ;initializer for _random
    94  003046  0301               	dw	769
    95                           
    96                           	psect	smallconst
    97  000600                     __psmallconst:
    98                           	opt stack 0
    99  000600  00                 	db	0
   100  000601                     _dpowers:
   101                           	opt stack 0
   102  000601  0001               	dw	1
   103  000603  0000               	dw	0
   104  000605  000A               	dw	10
   105  000607  0000               	dw	0
   106  000609  0064               	dw	100
   107  00060B  0000               	dw	0
   108  00060D  03E8               	dw	1000
   109  00060F  0000               	dw	0
   110  000611  2710               	dw	10000
   111  000613  0000               	dw	0
   112  000615  86A0               	dw	34464
   113  000617  0001               	dw	1
   114  000619  4240               	dw	16960
   115  00061B  000F               	dw	15
   116  00061D  9680               	dw	38528
   117  00061F  0098               	dw	152
   118  000621  E100               	dw	57600
   119  000623  05F5               	dw	1525
   120  000625  CA00               	dw	51712
   121  000627  3B9A               	dw	15258
   122  000629                     __end_of_dpowers:
   123                           	opt stack 0
   124  000629                     __powers_:
   125                           	opt stack 0
   126  000629  00                 	db	0
   127  00062A  80                 	db	128
   128  00062B  3F                 	db	63
   129  00062C  00                 	db	0
   130  00062D  20                 	db	32
   131  00062E  41                 	db	65
   132  00062F  00                 	db	0
   133  000630  C8                 	db	200
   134  000631  42                 	db	66
   135  000632  00                 	db	0
   136  000633  7A                 	db	122
   137  000634  44                 	db	68
   138  000635  40                 	db	64
   139  000636  1C                 	db	28
   140  000637  46                 	db	70
   141  000638  50                 	db	80
   142  000639  C3                 	db	195
   143  00063A  47                 	db	71
   144  00063B  24                 	db	36
   145  00063C  74                 	db	116
   146  00063D  49                 	db	73
   147  00063E  97                 	db	151
   148  00063F  18                 	db	24
   149  000640  4B                 	db	75
   150  000641  BC                 	db	188
   151  000642  BE                 	db	190
   152  000643  4C                 	db	76
   153  000644  6B                 	db	107
   154  000645  6E                 	db	110
   155  000646  4E                 	db	78
   156  000647  03                 	db	3
   157  000648  15                 	db	21
   158  000649  50                 	db	80
   159  00064A  79                 	db	121
   160  00064B  AD                 	db	173
   161  00064C  60                 	db	96
   162  00064D  F3                 	db	243
   163  00064E  49                 	db	73
   164  00064F  71                 	db	113
   165  000650                     __end_of__powers_:
   166                           	opt stack 0
   167  000650                     __npowers_:
   168                           	opt stack 0
   169  000650  00                 	db	0
   170  000651  80                 	db	128
   171  000652  3F                 	db	63
   172  000653  CD                 	db	205
   173  000654  CC                 	db	204
   174  000655  3D                 	db	61
   175  000656  D7                 	db	215
   176  000657  23                 	db	35
   177  000658  3C                 	db	60
   178  000659  12                 	db	18
   179  00065A  83                 	db	131
   180  00065B  3A                 	db	58
   181  00065C  B7                 	db	183
   182  00065D  D1                 	db	209
   183  00065E  38                 	db	56
   184  00065F  C6                 	db	198
   185  000660  27                 	db	39
   186  000661  37                 	db	55
   187  000662  38                 	db	56
   188  000663  86                 	db	134
   189  000664  35                 	db	53
   190  000665  C0                 	db	192
   191  000666  D6                 	db	214
   192  000667  33                 	db	51
   193  000668  CC                 	db	204
   194  000669  2B                 	db	43
   195  00066A  32                 	db	50
   196  00066B  70                 	db	112
   197  00066C  89                 	db	137
   198  00066D  30                 	db	48
   199  00066E  E7                 	db	231
   200  00066F  DB                 	db	219
   201  000670  2E                 	db	46
   202  000671  E5                 	db	229
   203  000672  3C                 	db	60
   204  000673  1E                 	db	30
   205  000674  42                 	db	66
   206  000675  A2                 	db	162
   207  000676  0D                 	db	13
   208  000677                     __end_of__npowers_:
   209                           	opt stack 0
   210  0000                     _ANSELCbits	set	3898
   211  0000                     _ANSELC	set	3898
   212  0000                     _ANSELB	set	3897
   213  0000                     _ANSELA	set	3896
   214  0000                     _SSP1STAT	set	4039
   215  0000                     _SSP1CON2	set	4037
   216  0000                     _TRISCbits	set	3988
   217  0000                     _SSP1ADD	set	4040
   218  0000                     _SSP1CON1	set	4038
   219  0000                     _PIE1bits	set	3997
   220  0000                     _INTCON2bits	set	4081
   221  0000                     _ADCON2bits	set	4032
   222  0000                     _ADCON1bits	set	4033
   223  0000                     _TRISC	set	3988
   224  0000                     _TRISB	set	3987
   225  0000                     _TRISA	set	3986
   226  0000                     _INTCONbits	set	4082
   227  0000                     _PIR1bits	set	3998
   228  0000                     _SSP1STATbits	set	4039
   229  0000                     _SSP1CON1bits	set	4038
   230  0000                     _SSP1BUF	set	4041
   231  0000                     _ADRESL	set	4035
   232  0000                     _ADRESH	set	4036
   233  0000                     _ADCON0bits	set	4034
   234  0000                     _LATCbits	set	3979
   235  0000                     _LATBbits	set	3978
   236  000677                     STR_1:
   237  000677  74                 	db	116	;'t'
   238  000678  65                 	db	101	;'e'
   239  000679  6D                 	db	109	;'m'
   240  00067A  70                 	db	112	;'p'
   241  00067B  65                 	db	101	;'e'
   242  00067C  72                 	db	114	;'r'
   243  00067D  61                 	db	97	;'a'
   244  00067E  74                 	db	116	;'t'
   245  00067F  75                 	db	117	;'u'
   246  000680  72                 	db	114	;'r'
   247  000681  65                 	db	101	;'e'
   248  000682  20                 	db	32
   249  000683  20                 	db	32
   250  000684  20                 	db	32
   251  000685  20                 	db	32
   252  000686  20                 	db	32
   253  000687  00                 	db	0
   254  000688                     STR_10:
   255  000688  73                 	db	115	;'s'
   256  000689  61                 	db	97	;'a'
   257  00068A  6C                 	db	108	;'l'
   258  00068B  69                 	db	105	;'i'
   259  00068C  6E                 	db	110	;'n'
   260  00068D  69                 	db	105	;'i'
   261  00068E  74                 	db	116	;'t'
   262  00068F  79                 	db	121	;'y'
   263  000690  20                 	db	32
   264  000691  6C                 	db	108	;'l'
   265  000692  65                 	db	101	;'e'
   266  000693  76                 	db	118	;'v'
   267  000694  65                 	db	101	;'e'
   268  000695  6C                 	db	108	;'l'
   269  000696  20                 	db	32
   270  000697  20                 	db	32
   271  000698  00                 	db	0
   272  000699                     STR_7:
   273  000699  63                 	db	99	;'c'
   274  00069A  61                 	db	97	;'a'
   275  00069B  72                 	db	114	;'r'
   276  00069C  62                 	db	98	;'b'
   277  00069D  6F                 	db	111	;'o'
   278  00069E  6E                 	db	110	;'n'
   279  00069F  20                 	db	32
   280  0006A0  6C                 	db	108	;'l'
   281  0006A1  65                 	db	101	;'e'
   282  0006A2  76                 	db	118	;'v'
   283  0006A3  65                 	db	101	;'e'
   284  0006A4  6C                 	db	108	;'l'
   285  0006A5  20                 	db	32
   286  0006A6  20                 	db	32
   287  0006A7  20                 	db	32
   288  0006A8  00                 	db	0
   289  0006A9                     STR_3:
   290  0006A9  43                 	db	67	;'C'
   291  0006AA  20                 	db	32
   292  0006AB  20                 	db	32
   293  0006AC  20                 	db	32
   294  0006AD  20                 	db	32
   295  0006AE  20                 	db	32
   296  0006AF  20                 	db	32
   297  0006B0  20                 	db	32
   298  0006B1  20                 	db	32
   299  0006B2  20                 	db	32
   300  0006B3  20                 	db	32
   301  0006B4  20                 	db	32
   302  0006B5  20                 	db	32
   303  0006B6  20                 	db	32
   304  0006B7  00                 	db	0
   305  0006B8                     STR_6:
   306  0006B8  46                 	db	70	;'F'
   307  0006B9  20                 	db	32
   308  0006BA  20                 	db	32
   309  0006BB  20                 	db	32
   310  0006BC  20                 	db	32
   311  0006BD  20                 	db	32
   312  0006BE  20                 	db	32
   313  0006BF  20                 	db	32
   314  0006C0  20                 	db	32
   315  0006C1  20                 	db	32
   316  0006C2  20                 	db	32
   317  0006C3  20                 	db	32
   318  0006C4  20                 	db	32
   319  0006C5  20                 	db	32
   320  0006C6  00                 	db	0
   321  0006C7                     STR_9:
   322  0006C7  70                 	db	112	;'p'
   323  0006C8  70                 	db	112	;'p'
   324  0006C9  6D                 	db	109	;'m'
   325  0006CA  20                 	db	32
   326  0006CB  20                 	db	32
   327  0006CC  20                 	db	32
   328  0006CD  20                 	db	32
   329  0006CE  20                 	db	32
   330  0006CF  20                 	db	32
   331  0006D0  20                 	db	32
   332  0006D1  20                 	db	32
   333  0006D2  20                 	db	32
   334  0006D3  20                 	db	32
   335  0006D4  00                 	db	0
   336  0006D5                     STR_12:
   337  0006D5  70                 	db	112	;'p'
   338  0006D6  70                 	db	112	;'p'
   339  0006D7  74                 	db	116	;'t'
   340  0006D8  20                 	db	32
   341  0006D9  20                 	db	32
   342  0006DA  20                 	db	32
   343  0006DB  20                 	db	32
   344  0006DC  20                 	db	32
   345  0006DD  20                 	db	32
   346  0006DE  20                 	db	32
   347  0006DF  20                 	db	32
   348  0006E0  20                 	db	32
   349  0006E1  20                 	db	32
   350  0006E2  00                 	db	0
   351  0006E3                     STR_13:
   352  0006E3  54                 	db	84	;'T'
   353  0006E4  65                 	db	101	;'e'
   354  0006E5  6D                 	db	109	;'m'
   355  0006E6  70                 	db	112	;'p'
   356  0006E7  65                 	db	101	;'e'
   357  0006E8  72                 	db	114	;'r'
   358  0006E9  61                 	db	97	;'a'
   359  0006EA  74                 	db	116	;'t'
   360  0006EB  75                 	db	117	;'u'
   361  0006EC  72                 	db	114	;'r'
   362  0006ED  65                 	db	101	;'e'
   363  0006EE  00                 	db	0
   364  0006EF                     STR_8:
   365  0006EF  25                 	db	37
   366  0006F0  30                 	db	48	;'0'
   367  0006F1  2E                 	db	46
   368  0006F2  32                 	db	50	;'2'
   369  0006F3  66                 	db	102	;'f'
   370  0006F4  00                 	db	0
   371  0006F5                     STR_2:
   372  0006F5  25                 	db	37
   373  0006F6  64                 	db	100	;'d'
   374  0006F7  00                 	db	0
   375  0000                     
   376                           ; #config settings
   377  0006F8  00                 	db	0	; dummy byte at the end
   378  0000                     
   379                           	psect	cinit
   380  002F26                     __pcinit:
   381                           	opt stack 0
   382  002F26                     start_initialization:
   383                           	opt stack 0
   384  002F26                     __initialization:
   385                           	opt stack 0
   386                           
   387                           ; Initialize objects allocated to COMRAM (2 bytes)
   388                           ; load TBLPTR registers with __pidataCOMRAM
   389  002F26  0E46               	movlw	low __pidataCOMRAM
   390  002F28  6EF6               	movwf	tblptrl,c
   391  002F2A  0E30               	movlw	high __pidataCOMRAM
   392  002F2C  6EF7               	movwf	tblptrh,c
   393  002F2E  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   394  002F30  6EF8               	movwf	tblptru,c
   395  002F32  0009               	tblrd		*+	;fetch initializer
   396  002F34  CFF5 F045          	movff	tablat,__pdataCOMRAM
   397  002F38  0009               	tblrd		*+	;fetch initializer
   398  002F3A  CFF5 F046          	movff	tablat,__pdataCOMRAM+1
   399                           
   400                           ; Clear objects allocated to COMRAM (14 bytes)
   401  002F3E  EE00  F037         	lfsr	0,__pbssCOMRAM
   402  002F42  0E0E               	movlw	14
   403  002F44                     clear_0:
   404  002F44  6AEE               	clrf	postinc0,c
   405  002F46  06E8               	decf	wreg,f,c
   406  002F48  E1FD               	bnz	clear_0
   407  002F4A                     end_of_initialization:
   408                           	opt stack 0
   409  002F4A                     __end_of__initialization:
   410                           	opt stack 0
   411  002F4A  9047               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   412  002F4C  9247               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   413  002F4E  0E00               	movlw	low (__Lmediumconst shr (0+16))
   414  002F50  6EF8               	movwf	tblptru,c
   415  002F52  0100               	movlb	0
   416  002F54  EF4B  F013         	goto	_main	;jump to C main() function
   417                           tblptru	equ	0xFF8
   418                           tblptrh	equ	0xFF7
   419                           tblptrl	equ	0xFF6
   420                           tablat	equ	0xFF5
   421                           postinc0	equ	0xFEE
   422                           wreg	equ	0xFE8
   423                           
   424                           	psect	bssCOMRAM
   425  000037                     __pbssCOMRAM:
   426                           	opt stack 0
   427  000037                     _index:
   428                           	opt stack 0
   429  000037                     	ds	2
   430  000039                     _salinity:
   431                           	opt stack 0
   432  000039                     	ds	2
   433  00003B                     _carbon:
   434                           	opt stack 0
   435  00003B                     	ds	2
   436  00003D                     _temperC_F:
   437                           	opt stack 0
   438  00003D                     	ds	2
   439  00003F                     _n:
   440                           	opt stack 0
   441  00003F                     	ds	2
   442  000041                     _CMD:
   443                           	opt stack 0
   444  000041                     	ds	2
   445  000043                     _count:
   446                           	opt stack 0
   447  000043                     	ds	2
   448                           tblptru	equ	0xFF8
   449                           tblptrh	equ	0xFF7
   450                           tblptrl	equ	0xFF6
   451                           tablat	equ	0xFF5
   452                           postinc0	equ	0xFEE
   453                           wreg	equ	0xFE8
   454                           
   455                           	psect	dataCOMRAM
   456  000045                     __pdataCOMRAM:
   457                           	opt stack 0
   458  000045                     _random:
   459                           	opt stack 0
   460  000045                     	ds	2
   461                           tblptru	equ	0xFF8
   462                           tblptrh	equ	0xFF7
   463                           tblptrl	equ	0xFF6
   464                           tablat	equ	0xFF5
   465                           postinc0	equ	0xFEE
   466                           wreg	equ	0xFE8
   467                           
   468                           	psect	cstackBANK0
   469  000060                     __pcstackBANK0:
   470                           	opt stack 0
   471  000060                     ?___ftdiv:
   472                           	opt stack 0
   473  000060                     ?___ftsub:
   474                           	opt stack 0
   475  000060                     ___ftdiv@f1:
   476                           	opt stack 0
   477  000060                     ___ftsub@f1:
   478                           	opt stack 0
   479                           
   480                           ; 3 bytes @ 0x0
   481  000060                     	ds	3
   482  000063                     ___ftdiv@f2:
   483                           	opt stack 0
   484  000063                     ___ftsub@f2:
   485                           	opt stack 0
   486                           
   487                           ; 3 bytes @ 0x3
   488  000063                     	ds	3
   489  000066                     ??___ftdiv:
   490                           
   491                           ; 1 bytes @ 0x6
   492  000066                     	ds	3
   493  000069                     ___ftdiv@cntr:
   494                           	opt stack 0
   495                           
   496                           ; 1 bytes @ 0x9
   497  000069                     	ds	1
   498  00006A                     ___ftdiv@f3:
   499                           	opt stack 0
   500                           
   501                           ; 3 bytes @ 0xA
   502  00006A                     	ds	3
   503  00006D                     ___ftdiv@exp:
   504                           	opt stack 0
   505                           
   506                           ; 1 bytes @ 0xD
   507  00006D                     	ds	1
   508  00006E                     ___ftdiv@sign:
   509                           	opt stack 0
   510                           
   511                           ; 1 bytes @ 0xE
   512  00006E                     	ds	1
   513  00006F                     ?___ftmul:
   514                           	opt stack 0
   515  00006F                     ___ftmul@f1:
   516                           	opt stack 0
   517                           
   518                           ; 3 bytes @ 0xF
   519  00006F                     	ds	3
   520  000072                     ___ftmul@f2:
   521                           	opt stack 0
   522                           
   523                           ; 3 bytes @ 0x12
   524  000072                     	ds	3
   525  000075                     ??___ftmul:
   526                           
   527                           ; 1 bytes @ 0x15
   528  000075                     	ds	3
   529  000078                     ___ftmul@exp:
   530                           	opt stack 0
   531                           
   532                           ; 1 bytes @ 0x18
   533  000078                     	ds	1
   534  000079                     ___ftmul@f3_as_product:
   535                           	opt stack 0
   536                           
   537                           ; 3 bytes @ 0x19
   538  000079                     	ds	3
   539  00007C                     ___ftmul@cntr:
   540                           	opt stack 0
   541                           
   542                           ; 1 bytes @ 0x1C
   543  00007C                     	ds	1
   544  00007D                     ___ftmul@sign:
   545                           	opt stack 0
   546                           
   547                           ; 1 bytes @ 0x1D
   548  00007D                     	ds	1
   549  00007E                     ?_fround:
   550                           	opt stack 0
   551  00007E                     ?_scale:
   552                           	opt stack 0
   553                           
   554                           ; 3 bytes @ 0x1E
   555  00007E                     	ds	3
   556  000081                     _fround$1525:
   557                           	opt stack 0
   558  000081                     _scale$1526:
   559                           	opt stack 0
   560                           
   561                           ; 3 bytes @ 0x21
   562  000081                     	ds	3
   563  000084                     scale@scl:
   564                           	opt stack 0
   565  000084                     _fround$1524:
   566                           	opt stack 0
   567                           
   568                           ; 3 bytes @ 0x24
   569  000084                     	ds	1
   570  000085                     ?___fttol:
   571                           	opt stack 0
   572  000085                     ___fttol@f1:
   573                           	opt stack 0
   574                           
   575                           ; 3 bytes @ 0x25
   576  000085                     	ds	2
   577  000087                     fround@prec:
   578                           	opt stack 0
   579                           
   580                           ; 1 bytes @ 0x27
   581  000087                     	ds	2
   582  000089                     ??___fttol:
   583                           
   584                           ; 1 bytes @ 0x29
   585  000089                     	ds	5
   586  00008E                     ___fttol@sign1:
   587                           	opt stack 0
   588                           
   589                           ; 1 bytes @ 0x2E
   590  00008E                     	ds	1
   591  00008F                     ___fttol@lval:
   592                           	opt stack 0
   593                           
   594                           ; 4 bytes @ 0x2F
   595  00008F                     	ds	4
   596  000093                     ___fttol@exp1:
   597                           	opt stack 0
   598                           
   599                           ; 1 bytes @ 0x33
   600  000093                     	ds	1
   601  000094                     ?_sprintf:
   602                           	opt stack 0
   603  000094                     sprintf@sp:
   604                           	opt stack 0
   605                           
   606                           ; 2 bytes @ 0x34
   607  000094                     	ds	2
   608  000096                     sprintf@f:
   609                           	opt stack 0
   610                           
   611                           ; 2 bytes @ 0x36
   612  000096                     	ds	5
   613  00009B                     ??_sprintf:
   614                           
   615                           ; 1 bytes @ 0x3B
   616  00009B                     	ds	6
   617  0000A1                     _sprintf$1527:
   618                           	opt stack 0
   619                           
   620                           ; 3 bytes @ 0x41
   621  0000A1                     	ds	3
   622  0000A4                     sprintf@ap:
   623                           	opt stack 0
   624                           
   625                           ; 2 bytes @ 0x44
   626  0000A4                     	ds	2
   627  0000A6                     sprintf@tmpval:
   628                           	opt stack 0
   629                           
   630                           ; 4 bytes @ 0x46
   631  0000A6                     	ds	4
   632  0000AA                     sprintf@val:
   633                           	opt stack 0
   634                           
   635                           ; 4 bytes @ 0x4A
   636  0000AA                     	ds	4
   637  0000AE                     sprintf@exp:
   638                           	opt stack 0
   639                           
   640                           ; 2 bytes @ 0x4E
   641  0000AE                     	ds	2
   642  0000B0                     sprintf@flag:
   643                           	opt stack 0
   644                           
   645                           ; 2 bytes @ 0x50
   646  0000B0                     	ds	2
   647  0000B2                     sprintf@width:
   648                           	opt stack 0
   649                           
   650                           ; 2 bytes @ 0x52
   651  0000B2                     	ds	2
   652  0000B4                     sprintf@fval:
   653                           	opt stack 0
   654                           
   655                           ; 3 bytes @ 0x54
   656  0000B4                     	ds	3
   657  0000B7                     sprintf@prec:
   658                           	opt stack 0
   659                           
   660                           ; 2 bytes @ 0x57
   661  0000B7                     	ds	2
   662  0000B9                     sprintf@c:
   663                           	opt stack 0
   664                           
   665                           ; 1 bytes @ 0x59
   666  0000B9                     	ds	1
   667  0000BA                     temperatureMeasurementC@x:
   668                           	opt stack 0
   669  0000BA                     temperatureMeasurementF@x:
   670                           	opt stack 0
   671  0000BA                     carbonMeasurement@x:
   672                           	opt stack 0
   673  0000BA                     salinityMeasurement@x:
   674                           	opt stack 0
   675                           
   676                           ; 2 bytes @ 0x5A
   677  0000BA                     	ds	2
   678  0000BC                     temperatureMeasurementC@str:
   679                           	opt stack 0
   680  0000BC                     temperatureMeasurementF@str:
   681                           	opt stack 0
   682  0000BC                     carbonMeasurement@str:
   683                           	opt stack 0
   684  0000BC                     salinityMeasurement@str:
   685                           	opt stack 0
   686                           
   687                           ; 16 bytes @ 0x5C
   688  0000BC                     	ds	16
   689  0000CC                     temperatureMeasurementC@str2:
   690                           	opt stack 0
   691  0000CC                     temperatureMeasurementF@str2:
   692                           	opt stack 0
   693  0000CC                     carbonMeasurement@str2:
   694                           	opt stack 0
   695  0000CC                     salinityMeasurement@str2:
   696                           	opt stack 0
   697                           
   698                           ; 16 bytes @ 0x6C
   699  0000CC                     	ds	16
   700  0000DC                     temperatureMeasurementC@str1:
   701                           	opt stack 0
   702  0000DC                     temperatureMeasurementF@str1:
   703                           	opt stack 0
   704  0000DC                     carbonMeasurement@str1:
   705                           	opt stack 0
   706  0000DC                     salinityMeasurement@str1:
   707                           	opt stack 0
   708                           
   709                           ; 16 bytes @ 0x7C
   710  0000DC                     	ds	16
   711  0000EC                     temperatureMeasurementC@Vin:
   712                           	opt stack 0
   713  0000EC                     temperatureMeasurementF@Vin:
   714                           	opt stack 0
   715  0000EC                     carbonMeasurement@carbon:
   716                           	opt stack 0
   717  0000EC                     salinityMeasurement@salinity:
   718                           	opt stack 0
   719                           
   720                           ; 3 bytes @ 0x8C
   721  0000EC                     	ds	3
   722  0000EF                     temperatureMeasurementC@temp:
   723                           	opt stack 0
   724  0000EF                     temperatureMeasurementF@temp:
   725                           	opt stack 0
   726  0000EF                     carbonMeasurement@Vin:
   727                           	opt stack 0
   728  0000EF                     salinityMeasurement@Vin:
   729                           	opt stack 0
   730                           
   731                           ; 3 bytes @ 0x8F
   732  0000EF                     	ds	2
   733  0000F1                     temperatureMeasurementF@F:
   734                           	opt stack 0
   735                           
   736                           ; 2 bytes @ 0x91
   737  0000F1                     	ds	2
   738                           tblptru	equ	0xFF8
   739                           tblptrh	equ	0xFF7
   740                           tblptrl	equ	0xFF6
   741                           tablat	equ	0xFF5
   742                           postinc0	equ	0xFEE
   743                           wreg	equ	0xFE8
   744                           
   745                           	psect	cstackCOMRAM
   746  000001                     __pcstackCOMRAM:
   747                           	opt stack 0
   748  000001                     ?_write_slave:
   749                           	opt stack 0
   750  000001                     read_slave@byte1:
   751                           	opt stack 0
   752                           
   753                           ; 2 bytes @ 0x0
   754  000001                     	ds	2
   755  000003                     write_slave@temp:
   756                           	opt stack 0
   757  000003                     read_2bytes@data:
   758                           	opt stack 0
   759                           
   760                           ; 2 bytes @ 0x2
   761  000003                     	ds	2
   762  000005                     ??_isr:
   763                           
   764                           ; 1 bytes @ 0x4
   765  000005                     	ds	18
   766  000017                     ??_isdigit:
   767  000017                     ??_switchE:
   768  000017                     ?_strlen:
   769                           	opt stack 0
   770  000017                     ?_chanSel:
   771                           	opt stack 0
   772  000017                     ?___awmod:
   773                           	opt stack 0
   774  000017                     ?___ftpack:
   775                           	opt stack 0
   776  000017                     ?___ftneg:
   777                           	opt stack 0
   778  000017                     ?__tdiv_to_l_:
   779                           	opt stack 0
   780  000017                     ?__div_to_l_:
   781                           	opt stack 0
   782  000017                     ?___lldiv:
   783                           	opt stack 0
   784  000017                     chanSel@chan:
   785                           	opt stack 0
   786  000017                     ___awmod@dividend:
   787                           	opt stack 0
   788  000017                     strcpy@to:
   789                           	opt stack 0
   790  000017                     strlen@s:
   791                           	opt stack 0
   792  000017                     __div_to_l_@f1:
   793                           	opt stack 0
   794  000017                     ___ftpack@arg:
   795                           	opt stack 0
   796  000017                     __tdiv_to_l_@f1:
   797                           	opt stack 0
   798  000017                     ___ftge@ff1:
   799                           	opt stack 0
   800  000017                     ___ftneg@f1:
   801                           	opt stack 0
   802  000017                     ___lldiv@dividend:
   803                           	opt stack 0
   804                           
   805                           ; 4 bytes @ 0x16
   806  000017                     	ds	1
   807  000018                     ??_writeChar:
   808  000018                     ??_writeCMD:
   809  000018                     _isdigit$1161:
   810                           	opt stack 0
   811                           
   812                           ; 1 bytes @ 0x17
   813  000018                     	ds	1
   814  000019                     ??_strlen:
   815  000019                     ??_chanSel:
   816  000019                     isdigit@c:
   817                           	opt stack 0
   818  000019                     ___awmod@divisor:
   819                           	opt stack 0
   820  000019                     strcpy@from:
   821                           	opt stack 0
   822                           
   823                           ; 2 bytes @ 0x18
   824  000019                     	ds	1
   825  00001A                     writeChar@ch:
   826                           	opt stack 0
   827  00001A                     writeCMD@cmd:
   828                           	opt stack 0
   829  00001A                     ___ftpack@exp:
   830                           	opt stack 0
   831  00001A                     __div_to_l_@f2:
   832                           	opt stack 0
   833  00001A                     __tdiv_to_l_@f2:
   834                           	opt stack 0
   835  00001A                     ___ftge@ff2:
   836                           	opt stack 0
   837                           
   838                           ; 3 bytes @ 0x19
   839  00001A                     	ds	1
   840  00001B                     ___awmod@counter:
   841                           	opt stack 0
   842  00001B                     ___ftpack@sign:
   843                           	opt stack 0
   844  00001B                     writeChar@i:
   845                           	opt stack 0
   846  00001B                     writeCMD@i:
   847                           	opt stack 0
   848  00001B                     chanSel@digital:
   849                           	opt stack 0
   850  00001B                     strcpy@cp:
   851                           	opt stack 0
   852  00001B                     strlen@cp:
   853                           	opt stack 0
   854  00001B                     ___lldiv@divisor:
   855                           	opt stack 0
   856                           
   857                           ; 4 bytes @ 0x1A
   858  00001B                     	ds	1
   859  00001C                     ??___ftpack:
   860  00001C                     ___awmod@sign:
   861                           	opt stack 0
   862                           
   863                           ; 1 bytes @ 0x1B
   864  00001C                     	ds	1
   865  00001D                     ??__tdiv_to_l_:
   866  00001D                     ??_initialize:
   867  00001D                     ??___ftge:
   868  00001D                     ?___awdiv:
   869                           	opt stack 0
   870  00001D                     writeString@str:
   871                           	opt stack 0
   872  00001D                     ___awdiv@dividend:
   873                           	opt stack 0
   874  00001D                     __div_to_l_@quot:
   875                           	opt stack 0
   876                           
   877                           ; 4 bytes @ 0x1C
   878  00001D                     	ds	2
   879  00001F                     ??_writeString:
   880  00001F                     ?___awtoft:
   881                           	opt stack 0
   882  00001F                     ?___lltoft:
   883                           	opt stack 0
   884  00001F                     ___awdiv@divisor:
   885                           	opt stack 0
   886  00001F                     ___awtoft@c:
   887                           	opt stack 0
   888  00001F                     ___lldiv@quotient:
   889                           	opt stack 0
   890  00001F                     ___lltoft@c:
   891                           	opt stack 0
   892                           
   893                           ; 4 bytes @ 0x1E
   894  00001F                     	ds	1
   895  000020                     __tdiv_to_l_@quot:
   896                           	opt stack 0
   897                           
   898                           ; 4 bytes @ 0x1F
   899  000020                     	ds	1
   900  000021                     ___awdiv@counter:
   901                           	opt stack 0
   902  000021                     __div_to_l_@cntr:
   903                           	opt stack 0
   904  000021                     writeString@i:
   905                           	opt stack 0
   906                           
   907                           ; 2 bytes @ 0x20
   908  000021                     	ds	1
   909  000022                     ___awdiv@sign:
   910                           	opt stack 0
   911  000022                     ___awtoft@sign:
   912                           	opt stack 0
   913  000022                     __div_to_l_@exp1:
   914                           	opt stack 0
   915                           
   916                           ; 1 bytes @ 0x21
   917  000022                     	ds	1
   918  000023                     ??___lltoft:
   919  000023                     ___lldiv@counter:
   920                           	opt stack 0
   921  000023                     ___awdiv@quotient:
   922                           	opt stack 0
   923                           
   924                           ; 2 bytes @ 0x22
   925  000023                     	ds	1
   926  000024                     ?___llmod:
   927                           	opt stack 0
   928  000024                     __tdiv_to_l_@cntr:
   929                           	opt stack 0
   930  000024                     ___llmod@dividend:
   931                           	opt stack 0
   932                           
   933                           ; 4 bytes @ 0x23
   934  000024                     	ds	1
   935  000025                     ?___wmul:
   936                           	opt stack 0
   937  000025                     __tdiv_to_l_@exp1:
   938                           	opt stack 0
   939  000025                     ___wmul@multiplier:
   940                           	opt stack 0
   941                           
   942                           ; 2 bytes @ 0x24
   943  000025                     	ds	2
   944  000027                     ___lltoft@exp:
   945                           	opt stack 0
   946  000027                     ___wmul@multiplicand:
   947                           	opt stack 0
   948                           
   949                           ; 2 bytes @ 0x26
   950  000027                     	ds	1
   951  000028                     ___llmod@divisor:
   952                           	opt stack 0
   953                           
   954                           ; 4 bytes @ 0x27
   955  000028                     	ds	1
   956  000029                     ___wmul@product:
   957                           	opt stack 0
   958                           
   959                           ; 2 bytes @ 0x28
   960  000029                     	ds	2
   961  00002B                     ?___ftadd:
   962                           	opt stack 0
   963  00002B                     ___ftadd@f1:
   964                           	opt stack 0
   965                           
   966                           ; 3 bytes @ 0x2A
   967  00002B                     	ds	1
   968  00002C                     ___llmod@counter:
   969                           	opt stack 0
   970                           
   971                           ; 1 bytes @ 0x2B
   972  00002C                     	ds	2
   973  00002E                     ___ftadd@f2:
   974                           	opt stack 0
   975                           
   976                           ; 3 bytes @ 0x2D
   977  00002E                     	ds	3
   978  000031                     ??___ftadd:
   979                           
   980                           ; 1 bytes @ 0x30
   981  000031                     	ds	3
   982  000034                     ___ftadd@sign:
   983                           	opt stack 0
   984                           
   985                           ; 1 bytes @ 0x33
   986  000034                     	ds	1
   987  000035                     ___ftadd@exp2:
   988                           	opt stack 0
   989                           
   990                           ; 1 bytes @ 0x34
   991  000035                     	ds	1
   992  000036                     ___ftadd@exp1:
   993                           	opt stack 0
   994                           
   995                           ; 1 bytes @ 0x35
   996  000036                     	ds	1
   997  000037                     tblptru	equ	0xFF8
   998                           tblptrh	equ	0xFF7
   999                           tblptrl	equ	0xFF6
  1000                           tablat	equ	0xFF5
  1001                           postinc0	equ	0xFEE
  1002                           wreg	equ	0xFE8
  1003                           
  1004                           ; 1 bytes @ 0x36
  1005 ;;
  1006 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1007 ;;
  1008 ;; *************** function _main *****************
  1009 ;; Defined at:
  1010 ;;		line 270 in file "temp.c"
  1011 ;; Parameters:    Size  Location     Type
  1012 ;;		None
  1013 ;; Auto vars:     Size  Location     Type
  1014 ;;		None
  1015 ;; Return value:  Size  Location     Type
  1016 ;;                  1    wreg      void 
  1017 ;; Registers used:
  1018 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1019 ;; Tracked objects:
  1020 ;;		On entry : 0/0
  1021 ;;		On exit  : 0/0
  1022 ;;		Unchanged: 0/0
  1023 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1024 ;;      Params:         0       0       0       0       0       0       0
  1025 ;;      Locals:         0       0       0       0       0       0       0
  1026 ;;      Temps:          0       0       0       0       0       0       0
  1027 ;;      Totals:         0       0       0       0       0       0       0
  1028 ;;Total ram usage:        0 bytes
  1029 ;; Hardware stack levels required when called:    8
  1030 ;; This function calls:
  1031 ;;		_carbonMeasurement
  1032 ;;		_chanSel
  1033 ;;		_initialize
  1034 ;;		_salinityMeasurement
  1035 ;;		_temperatureMeasurementC
  1036 ;;		_temperatureMeasurementF
  1037 ;;		_writeCMD
  1038 ;;		_writeChar
  1039 ;;		_writeString
  1040 ;; This function is called by:
  1041 ;;		Startup code after reset
  1042 ;; This function uses a non-reentrant model
  1043 ;;
  1044                           
  1045                           	psect	text0
  1046  002696                     __ptext0:
  1047                           	opt stack 0
  1048  002696                     _main:
  1049                           	opt stack 23
  1050                           
  1051                           ;temp.c: 273: TRISA=0b11111111;
  1052                           
  1053                           ;incstack = 0
  1054  002696  6892               	setf	3986,c	;volatile
  1055                           
  1056                           ;temp.c: 274: ANSELA=0b00001111;
  1057  002698  0E0F               	movlw	15
  1058  00269A  010F               	movlb	15	; () banked
  1059  00269C  6F38               	movwf	56,b	;volatile
  1060                           
  1061                           ;temp.c: 276: TRISB=0b00000111;
  1062  00269E  0E07               	movlw	7
  1063  0026A0  6E93               	movwf	3987,c	;volatile
  1064                           
  1065                           ;temp.c: 277: ANSELB=0b00000000;
  1066  0026A2  0E00               	movlw	0
  1067  0026A4  010F               	movlb	15	; () banked
  1068  0026A6  6F39               	movwf	57,b	;volatile
  1069                           
  1070                           ;temp.c: 279: TRISC=0b00011000;
  1071  0026A8  0E18               	movlw	24
  1072  0026AA  6E94               	movwf	3988,c	;volatile
  1073                           
  1074                           ;temp.c: 280: ANSELC=0b00000000;
  1075  0026AC  0E00               	movlw	0
  1076  0026AE  010F               	movlb	15	; () banked
  1077  0026B0  6F3A               	movwf	58,b	;volatile
  1078                           
  1079                           ; BSR set to: 15
  1080                           ;temp.c: 283: ADCON0bits.ADON=1;
  1081  0026B2  80C2               	bsf	4034,0,c	;volatile
  1082                           
  1083                           ;temp.c: 284: ADCON1bits.PVCFG=0;
  1084  0026B4  0EF3               	movlw	-13
  1085  0026B6  16C1               	andwf	4033,f,c	;volatile
  1086                           
  1087                           ;temp.c: 285: ADCON1bits.NVCFG=0;
  1088  0026B8  0EFC               	movlw	-4
  1089  0026BA  16C1               	andwf	4033,f,c	;volatile
  1090                           
  1091                           ; BSR set to: 15
  1092                           ;temp.c: 286: ADCON2bits.ADFM=1;
  1093  0026BC  8EC0               	bsf	4032,7,c	;volatile
  1094                           
  1095                           ;temp.c: 287: ADCON2bits.ACQT=0b010;
  1096  0026BE  50C0               	movf	4032,w,c	;volatile
  1097  0026C0  0BC7               	andlw	-57
  1098  0026C2  0910               	iorlw	16
  1099  0026C4  6EC0               	movwf	4032,c	;volatile
  1100                           
  1101                           ; BSR set to: 15
  1102                           ;temp.c: 288: ADCON2bits.ADCS=0;
  1103  0026C6  90C0               	bcf	4032,0,c	;volatile
  1104  0026C8  92C0               	bcf	4032,1,c	;volatile
  1105  0026CA  94C0               	bcf	4032,2,c	;volatile
  1106                           
  1107                           ; BSR set to: 15
  1108                           ;temp.c: 290: INTCONbits.GIE=1;
  1109  0026CC  8EF2               	bsf	intcon,7,c	;volatile
  1110                           
  1111                           ; BSR set to: 15
  1112                           ;temp.c: 291: INTCONbits.INT0IE=1;
  1113  0026CE  88F2               	bsf	intcon,4,c	;volatile
  1114                           
  1115                           ; BSR set to: 15
  1116                           ;temp.c: 292: INTCONbits.INT0IF=0;
  1117  0026D0  92F2               	bcf	intcon,1,c	;volatile
  1118                           
  1119                           ; BSR set to: 15
  1120                           ;temp.c: 293: INTCON2bits.INTEDG0=1;
  1121  0026D2  8CF1               	bsf	intcon2,6,c	;volatile
  1122                           
  1123                           ; BSR set to: 15
  1124                           ;temp.c: 294: PIE1bits.SSPIE=1;
  1125  0026D4  869D               	bsf	3997,3,c	;volatile
  1126                           
  1127                           ; BSR set to: 15
  1128                           ;temp.c: 295: PIR1bits.SSPIF=0;
  1129  0026D6  969E               	bcf	3998,3,c	;volatile
  1130                           
  1131                           ; BSR set to: 15
  1132                           ;temp.c: 296: INTCONbits.PEIE=1;
  1133  0026D8  8CF2               	bsf	intcon,6,c	;volatile
  1134                           
  1135                           ;temp.c: 308: SSP1CON1=0b00110110;
  1136  0026DA  0E36               	movlw	54
  1137  0026DC  6EC6               	movwf	4038,c	;volatile
  1138                           
  1139                           ;temp.c: 309: SSP1ADD=0x80;
  1140  0026DE  0E80               	movlw	128
  1141  0026E0  6EC8               	movwf	4040,c	;volatile
  1142                           
  1143                           ; BSR set to: 15
  1144                           ;temp.c: 310: TRISCbits.RC3=1;
  1145  0026E2  8694               	bsf	3988,3,c	;volatile
  1146                           
  1147                           ; BSR set to: 15
  1148                           ;temp.c: 311: TRISCbits.RC4=1;
  1149  0026E4  8894               	bsf	3988,4,c	;volatile
  1150                           
  1151                           ; BSR set to: 15
  1152                           ;temp.c: 312: ANSELCbits.ANSC3=0;
  1153  0026E6  010F               	movlb	15	; () banked
  1154  0026E8  973A               	bcf	58,3,b	;volatile
  1155                           
  1156                           ; BSR set to: 15
  1157                           ;temp.c: 313: ANSELCbits.ANSC4=0;
  1158  0026EA  010F               	movlb	15	; () banked
  1159  0026EC  993A               	bcf	58,4,b	;volatile
  1160                           
  1161                           ;temp.c: 314: SSP1CON2=0x01;
  1162  0026EE  0E01               	movlw	1
  1163  0026F0  6EC5               	movwf	4037,c	;volatile
  1164                           
  1165                           ;temp.c: 315: SSP1STAT=0x80;
  1166  0026F2  0E80               	movlw	128
  1167  0026F4  6EC7               	movwf	4039,c	;volatile
  1168                           
  1169                           ; BSR set to: 15
  1170                           ;temp.c: 317: initialize();
  1171  0026F6  EC13  F015         	call	_initialize	;wreg free
  1172                           
  1173                           ;temp.c: 318: writeChar('a');
  1174  0026FA  0E61               	movlw	97
  1175  0026FC  EC9F  F016         	call	_writeChar
  1176                           
  1177                           ;temp.c: 319: writeString("Temperature");
  1178  002700  0EE3               	movlw	low STR_13
  1179  002702  6E1D               	movwf	writeString@str,c
  1180  002704  0E06               	movlw	high STR_13
  1181  002706  6E1E               	movwf	writeString@str+1,c
  1182  002708  EC73  F016         	call	_writeString	;wreg free
  1183  00270C                     
  1184                           ;temp.c: 328: temperC_F=chanSel(0);
  1185  00270C  0E00               	movlw	0
  1186  00270E  6E18               	movwf	chanSel@chan+1,c
  1187  002710  0E00               	movlw	0
  1188  002712  6E17               	movwf	chanSel@chan,c
  1189  002714  EC5B  F017         	call	_chanSel	;wreg free
  1190  002718  C017  F03D         	movff	?_chanSel,_temperC_F
  1191  00271C  C018  F03E         	movff	?_chanSel+1,_temperC_F+1
  1192                           
  1193                           ;temp.c: 329: carbon=chanSel(1);
  1194  002720  0E00               	movlw	0
  1195  002722  6E18               	movwf	chanSel@chan+1,c
  1196  002724  0E01               	movlw	1
  1197  002726  6E17               	movwf	chanSel@chan,c
  1198  002728  EC5B  F017         	call	_chanSel	;wreg free
  1199  00272C  C017  F03B         	movff	?_chanSel,_carbon
  1200  002730  C018  F03C         	movff	?_chanSel+1,_carbon+1
  1201                           
  1202                           ;temp.c: 330: salinity=chanSel(2);
  1203  002734  0E00               	movlw	0
  1204  002736  6E18               	movwf	chanSel@chan+1,c
  1205  002738  0E02               	movlw	2
  1206  00273A  6E17               	movwf	chanSel@chan,c
  1207  00273C  EC5B  F017         	call	_chanSel	;wreg free
  1208  002740  C017  F039         	movff	?_chanSel,_salinity
  1209  002744  C018  F03A         	movff	?_chanSel+1,_salinity+1
  1210                           
  1211                           ;temp.c: 332: if(CMD==6){
  1212  002748  0E06               	movlw	6
  1213  00274A  1841               	xorwf	_CMD,w,c
  1214  00274C  1042               	iorwf	_CMD+1,w,c
  1215  00274E  A4D8               	btfss	status,2,c
  1216  002750  D00A               	goto	l161
  1217                           
  1218                           ;temp.c: 333: writeCMD(0x02);
  1219  002752  0E02               	movlw	2
  1220  002754  ECF1  F016         	call	_writeCMD
  1221                           
  1222                           ;temp.c: 334: temperatureMeasurementC(temperC_F);
  1223  002758  C03D  F0BA         	movff	_temperC_F,temperatureMeasurementC@x
  1224  00275C  C03E  F0BB         	movff	_temperC_F+1,temperatureMeasurementC@x+1
  1225  002760  ECB3  F012         	call	_temperatureMeasurementC	;wreg free
  1226                           
  1227                           ;temp.c: 335: } else if (CMD==7) {
  1228  002764  D7D3               	goto	l160
  1229  002766                     l161:
  1230  002766  0E07               	movlw	7
  1231  002768  1841               	xorwf	_CMD,w,c
  1232  00276A  1042               	iorwf	_CMD+1,w,c
  1233  00276C  A4D8               	btfss	status,2,c
  1234  00276E  D00A               	goto	l163
  1235                           
  1236                           ;temp.c: 336: writeCMD(0x02);
  1237  002770  0E02               	movlw	2
  1238  002772  ECF1  F016         	call	_writeCMD
  1239                           
  1240                           ;temp.c: 337: temperatureMeasurementF(temperC_F);
  1241  002776  C03D  F0BA         	movff	_temperC_F,temperatureMeasurementF@x
  1242  00277A  C03E  F0BB         	movff	_temperC_F+1,temperatureMeasurementF@x+1
  1243  00277E  ECCC  F00D         	call	_temperatureMeasurementF	;wreg free
  1244                           
  1245                           ;temp.c: 338: } else if (CMD==8){
  1246  002782  D7C4               	goto	l160
  1247  002784                     l163:
  1248  002784  0E08               	movlw	8
  1249  002786  1841               	xorwf	_CMD,w,c
  1250  002788  1042               	iorwf	_CMD+1,w,c
  1251  00278A  A4D8               	btfss	status,2,c
  1252  00278C  D00A               	goto	l165
  1253                           
  1254                           ;temp.c: 339: writeCMD(0x02);
  1255  00278E  0E02               	movlw	2
  1256  002790  ECF1  F016         	call	_writeCMD
  1257                           
  1258                           ;temp.c: 340: carbonMeasurement(carbon);
  1259  002794  C03B  F0BA         	movff	_carbon,carbonMeasurement@x
  1260  002798  C03C  F0BB         	movff	_carbon+1,carbonMeasurement@x+1
  1261  00279C  EC5C  F00F         	call	_carbonMeasurement	;wreg free
  1262                           
  1263                           ;temp.c: 341: } else if (CMD==9){
  1264  0027A0  D7B5               	goto	l160
  1265  0027A2                     l165:
  1266  0027A2  0E09               	movlw	9
  1267  0027A4  1841               	xorwf	_CMD,w,c
  1268  0027A6  1042               	iorwf	_CMD+1,w,c
  1269  0027A8  A4D8               	btfss	status,2,c
  1270  0027AA  D7B0               	goto	l160
  1271                           
  1272                           ;temp.c: 342: writeCMD(0x02);
  1273  0027AC  0E02               	movlw	2
  1274  0027AE  ECF1  F016         	call	_writeCMD
  1275                           
  1276                           ;temp.c: 343: salinityMeasurement(salinity);
  1277  0027B2  C039  F0BA         	movff	_salinity,salinityMeasurement@x
  1278  0027B6  C03A  F0BB         	movff	_salinity+1,salinityMeasurement@x+1
  1279  0027BA  EC95  F00E         	call	_salinityMeasurement	;wreg free
  1280  0027BE  D7A6               	goto	l160
  1281  0027C0                     __end_of_main:
  1282                           	opt stack 0
  1283                           tblptru	equ	0xFF8
  1284                           tblptrh	equ	0xFF7
  1285                           tblptrl	equ	0xFF6
  1286                           tablat	equ	0xFF5
  1287                           intcon	equ	0xFF2
  1288                           intcon2	equ	0xFF1
  1289                           postinc0	equ	0xFEE
  1290                           wreg	equ	0xFE8
  1291                           status	equ	0xFD8
  1292                           
  1293 ;; *************** function _temperatureMeasurementF *****************
  1294 ;; Defined at:
  1295 ;;		line 128 in file "temp.c"
  1296 ;; Parameters:    Size  Location     Type
  1297 ;;  x               2   90[BANK0 ] int 
  1298 ;; Auto vars:     Size  Location     Type
  1299 ;;  str1           16  124[BANK0 ] unsigned char [16]
  1300 ;;  str2           16  108[BANK0 ] unsigned char [16]
  1301 ;;  str            16   92[BANK0 ] unsigned char [16]
  1302 ;;  Vin             3  140[BANK0 ] float 
  1303 ;;  F               2  145[BANK0 ] int 
  1304 ;;  temp            2  143[BANK0 ] int 
  1305 ;; Return value:  Size  Location     Type
  1306 ;;                  1    wreg      void 
  1307 ;; Registers used:
  1308 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1309 ;; Tracked objects:
  1310 ;;		On entry : 0/0
  1311 ;;		On exit  : 0/0
  1312 ;;		Unchanged: 0/0
  1313 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1314 ;;      Params:         0       2       0       0       0       0       0
  1315 ;;      Locals:         0      55       0       0       0       0       0
  1316 ;;      Temps:          0       0       0       0       0       0       0
  1317 ;;      Totals:         0      57       0       0       0       0       0
  1318 ;;Total ram usage:       57 bytes
  1319 ;; Hardware stack levels used:    1
  1320 ;; Hardware stack levels required when called:    7
  1321 ;; This function calls:
  1322 ;;		___awtoft
  1323 ;;		___ftadd
  1324 ;;		___ftdiv
  1325 ;;		___ftmul
  1326 ;;		___fttol
  1327 ;;		_sprintf
  1328 ;;		_strcpy
  1329 ;;		_writeCMD
  1330 ;;		_writeChar
  1331 ;;		_writeString
  1332 ;; This function is called by:
  1333 ;;		_main
  1334 ;; This function uses a non-reentrant model
  1335 ;;
  1336                           
  1337                           	psect	text1
  1338  001B98                     __ptext1:
  1339                           	opt stack 0
  1340  001B98                     _temperatureMeasurementF:
  1341                           	opt stack 23
  1342                           
  1343                           ;temp.c: 130: float Vin = ((float)x / 1023) * 4.75;
  1344                           
  1345                           ;incstack = 0
  1346  001B98  0EC0               	movlw	192
  1347  001B9A  0100               	movlb	0	; () banked
  1348  001B9C  6F63               	movwf	___ftdiv@f2& (0+255),b
  1349  001B9E  0E7F               	movlw	127
  1350  001BA0  0100               	movlb	0	; () banked
  1351  001BA2  6F64               	movwf	(___ftdiv@f2+1)& (0+255),b
  1352  001BA4  0E44               	movlw	68
  1353  001BA6  0100               	movlb	0	; () banked
  1354  001BA8  6F65               	movwf	(___ftdiv@f2+2)& (0+255),b
  1355  001BAA  C0BA  F01F         	movff	temperatureMeasurementF@x,___awtoft@c
  1356  001BAE  C0BB  F020         	movff	temperatureMeasurementF@x+1,___awtoft@c+1
  1357  001BB2  EC77  F017         	call	___awtoft	;wreg free
  1358  001BB6  C01F  F060         	movff	?___awtoft,___ftdiv@f1
  1359  001BBA  C020  F061         	movff	?___awtoft+1,___ftdiv@f1+1
  1360  001BBE  C021  F062         	movff	?___awtoft+2,___ftdiv@f1+2
  1361  001BC2  ECD2  F010         	call	___ftdiv	;wreg free
  1362  001BC6  C060  F06F         	movff	?___ftdiv,___ftmul@f1
  1363  001BCA  C061  F070         	movff	?___ftdiv+1,___ftmul@f1+1
  1364  001BCE  C062  F071         	movff	?___ftdiv+2,___ftmul@f1+2
  1365  001BD2  0E00               	movlw	0
  1366  001BD4  0100               	movlb	0	; () banked
  1367  001BD6  6F72               	movwf	___ftmul@f2& (0+255),b
  1368  001BD8  0E98               	movlw	152
  1369  001BDA  0100               	movlb	0	; () banked
  1370  001BDC  6F73               	movwf	(___ftmul@f2+1)& (0+255),b
  1371  001BDE  0E40               	movlw	64
  1372  001BE0  0100               	movlb	0	; () banked
  1373  001BE2  6F74               	movwf	(___ftmul@f2+2)& (0+255),b
  1374  001BE4  EC23  F010         	call	___ftmul	;wreg free
  1375  001BE8  C06F  F0EC         	movff	?___ftmul,temperatureMeasurementF@Vin
  1376  001BEC  C070  F0ED         	movff	?___ftmul+1,temperatureMeasurementF@Vin+1
  1377  001BF0  C071  F0EE         	movff	?___ftmul+2,temperatureMeasurementF@Vin+2
  1378                           
  1379                           ;temp.c: 131: int temp = (int)((Vin - 0.0023)/0.0394);
  1380  001BF4  0E62               	movlw	98
  1381  001BF6  0100               	movlb	0	; () banked
  1382  001BF8  6F63               	movwf	___ftdiv@f2& (0+255),b
  1383  001BFA  0E21               	movlw	33
  1384  001BFC  0100               	movlb	0	; () banked
  1385  001BFE  6F64               	movwf	(___ftdiv@f2+1)& (0+255),b
  1386  001C00  0E3D               	movlw	61
  1387  001C02  0100               	movlb	0	; () banked
  1388  001C04  6F65               	movwf	(___ftdiv@f2+2)& (0+255),b
  1389  001C06  0EBC               	movlw	188
  1390  001C08  6E2E               	movwf	___ftadd@f2,c
  1391  001C0A  0E16               	movlw	22
  1392  001C0C  6E2F               	movwf	___ftadd@f2+1,c
  1393  001C0E  0EBB               	movlw	187
  1394  001C10  6E30               	movwf	___ftadd@f2+2,c
  1395  001C12  C0EC  F02B         	movff	temperatureMeasurementF@Vin,___ftadd@f1
  1396  001C16  C0ED  F02C         	movff	temperatureMeasurementF@Vin+1,___ftadd@f1+1
  1397  001C1A  C0EE  F02D         	movff	temperatureMeasurementF@Vin+2,___ftadd@f1+2
  1398  001C1E  ECF6  F00C         	call	___ftadd	;wreg free
  1399  001C22  C02B  F060         	movff	?___ftadd,___ftdiv@f1
  1400  001C26  C02C  F061         	movff	?___ftadd+1,___ftdiv@f1+1
  1401  001C2A  C02D  F062         	movff	?___ftadd+2,___ftdiv@f1+2
  1402  001C2E  ECD2  F010         	call	___ftdiv	;wreg free
  1403  001C32  C060  F085         	movff	?___ftdiv,___fttol@f1
  1404  001C36  C061  F086         	movff	?___ftdiv+1,___fttol@f1+1
  1405  001C3A  C062  F087         	movff	?___ftdiv+2,___fttol@f1+2
  1406  001C3E  EC78  F011         	call	___fttol	;wreg free
  1407  001C42  C085  F0EF         	movff	?___fttol,temperatureMeasurementF@temp
  1408  001C46  C086  F0F0         	movff	?___fttol+1,temperatureMeasurementF@temp+1
  1409                           
  1410                           ;temp.c: 132: int F = temp*1.8 + 32;
  1411  001C4A  0E00               	movlw	0
  1412  001C4C  6E2E               	movwf	___ftadd@f2,c
  1413  001C4E  0E00               	movlw	0
  1414  001C50  6E2F               	movwf	___ftadd@f2+1,c
  1415  001C52  0E42               	movlw	66
  1416  001C54  6E30               	movwf	___ftadd@f2+2,c
  1417  001C56  0E66               	movlw	102
  1418  001C58  0100               	movlb	0	; () banked
  1419  001C5A  6F72               	movwf	___ftmul@f2& (0+255),b
  1420  001C5C  0EE6               	movlw	230
  1421  001C5E  0100               	movlb	0	; () banked
  1422  001C60  6F73               	movwf	(___ftmul@f2+1)& (0+255),b
  1423  001C62  0E3F               	movlw	63
  1424  001C64  0100               	movlb	0	; () banked
  1425  001C66  6F74               	movwf	(___ftmul@f2+2)& (0+255),b
  1426  001C68  C0EF  F01F         	movff	temperatureMeasurementF@temp,___awtoft@c
  1427  001C6C  C0F0  F020         	movff	temperatureMeasurementF@temp+1,___awtoft@c+1
  1428  001C70  EC77  F017         	call	___awtoft	;wreg free
  1429  001C74  C01F  F06F         	movff	?___awtoft,___ftmul@f1
  1430  001C78  C020  F070         	movff	?___awtoft+1,___ftmul@f1+1
  1431  001C7C  C021  F071         	movff	?___awtoft+2,___ftmul@f1+2
  1432  001C80  EC23  F010         	call	___ftmul	;wreg free
  1433  001C84  C06F  F02B         	movff	?___ftmul,___ftadd@f1
  1434  001C88  C070  F02C         	movff	?___ftmul+1,___ftadd@f1+1
  1435  001C8C  C071  F02D         	movff	?___ftmul+2,___ftadd@f1+2
  1436  001C90  ECF6  F00C         	call	___ftadd	;wreg free
  1437  001C94  C02B  F085         	movff	?___ftadd,___fttol@f1
  1438  001C98  C02C  F086         	movff	?___ftadd+1,___fttol@f1+1
  1439  001C9C  C02D  F087         	movff	?___ftadd+2,___fttol@f1+2
  1440  001CA0  EC78  F011         	call	___fttol	;wreg free
  1441  001CA4  C085  F0F1         	movff	?___fttol,temperatureMeasurementF@F
  1442  001CA8  C086  F0F2         	movff	?___fttol+1,temperatureMeasurementF@F+1
  1443                           
  1444                           ;temp.c: 133: char str[16];
  1445                           ;temp.c: 134: char str1[16];
  1446                           ;temp.c: 135: char str2[16];
  1447                           ;temp.c: 137: strcpy(str, "temperature     ");
  1448  001CAC  0EBC               	movlw	low temperatureMeasurementF@str
  1449  001CAE  6E17               	movwf	strcpy@to,c
  1450  001CB0  0E00               	movlw	high temperatureMeasurementF@str
  1451  001CB2  6E18               	movwf	strcpy@to+1,c
  1452  001CB4  0E77               	movlw	low STR_1
  1453  001CB6  6E19               	movwf	strcpy@from,c
  1454  001CB8  0E06               	movlw	high STR_1
  1455  001CBA  6E1A               	movwf	strcpy@from+1,c
  1456  001CBC  ECAC  F017         	call	_strcpy	;wreg free
  1457                           
  1458                           ;temp.c: 138: writeString(str);
  1459  001CC0  0EBC               	movlw	low temperatureMeasurementF@str
  1460  001CC2  6E1D               	movwf	writeString@str,c
  1461  001CC4  0E00               	movlw	high temperatureMeasurementF@str
  1462  001CC6  6E1E               	movwf	writeString@str+1,c
  1463  001CC8  EC73  F016         	call	_writeString	;wreg free
  1464                           
  1465                           ;temp.c: 139: writeCMD(0xC0);
  1466  001CCC  0EC0               	movlw	192
  1467  001CCE  ECF1  F016         	call	_writeCMD
  1468                           
  1469                           ;temp.c: 140: sprintf(str1, "%d", F);
  1470  001CD2  0EDC               	movlw	low temperatureMeasurementF@str1
  1471  001CD4  0100               	movlb	0	; () banked
  1472  001CD6  6F94               	movwf	sprintf@sp& (0+255),b
  1473  001CD8  0E00               	movlw	high temperatureMeasurementF@str1
  1474  001CDA  0100               	movlb	0	; () banked
  1475  001CDC  6F95               	movwf	(sprintf@sp+1)& (0+255),b
  1476  001CDE  0EF5               	movlw	low STR_2
  1477  001CE0  0100               	movlb	0	; () banked
  1478  001CE2  6F96               	movwf	sprintf@f& (0+255),b
  1479  001CE4  0E06               	movlw	high STR_2
  1480  001CE6  0100               	movlb	0	; () banked
  1481  001CE8  6F97               	movwf	(sprintf@f+1)& (0+255),b
  1482  001CEA  C0F1  F098         	movff	temperatureMeasurementF@F,?_sprintf+4
  1483  001CEE  C0F2  F099         	movff	temperatureMeasurementF@F+1,?_sprintf+5
  1484  001CF2  EC7D  F003         	call	_sprintf	;wreg free
  1485                           
  1486                           ;temp.c: 141: writeString(str1);
  1487  001CF6  0EDC               	movlw	low temperatureMeasurementF@str1
  1488  001CF8  6E1D               	movwf	writeString@str,c
  1489  001CFA  0E00               	movlw	high temperatureMeasurementF@str1
  1490  001CFC  6E1E               	movwf	writeString@str+1,c
  1491  001CFE  EC73  F016         	call	_writeString	;wreg free
  1492                           
  1493                           ;temp.c: 142: writeChar(0xDF);
  1494  001D02  0EDF               	movlw	223
  1495  001D04  EC9F  F016         	call	_writeChar
  1496                           
  1497                           ;temp.c: 143: strcpy(str2, "F             ");
  1498  001D08  0ECC               	movlw	low temperatureMeasurementF@str2
  1499  001D0A  6E17               	movwf	strcpy@to,c
  1500  001D0C  0E00               	movlw	high temperatureMeasurementF@str2
  1501  001D0E  6E18               	movwf	strcpy@to+1,c
  1502  001D10  0EB8               	movlw	low STR_6
  1503  001D12  6E19               	movwf	strcpy@from,c
  1504  001D14  0E06               	movlw	high STR_6
  1505  001D16  6E1A               	movwf	strcpy@from+1,c
  1506  001D18  ECAC  F017         	call	_strcpy	;wreg free
  1507                           
  1508                           ;temp.c: 144: writeString(str2);
  1509  001D1C  0ECC               	movlw	low temperatureMeasurementF@str2
  1510  001D1E  6E1D               	movwf	writeString@str,c
  1511  001D20  0E00               	movlw	high temperatureMeasurementF@str2
  1512  001D22  6E1E               	movwf	writeString@str+1,c
  1513  001D24  EC73  F016         	call	_writeString	;wreg free
  1514  001D28  0012               	return		;funcret
  1515  001D2A                     __end_of_temperatureMeasurementF:
  1516                           	opt stack 0
  1517                           tblptru	equ	0xFF8
  1518                           tblptrh	equ	0xFF7
  1519                           tblptrl	equ	0xFF6
  1520                           tablat	equ	0xFF5
  1521                           intcon	equ	0xFF2
  1522                           intcon2	equ	0xFF1
  1523                           postinc0	equ	0xFEE
  1524                           wreg	equ	0xFE8
  1525                           status	equ	0xFD8
  1526                           
  1527 ;; *************** function _temperatureMeasurementC *****************
  1528 ;; Defined at:
  1529 ;;		line 109 in file "temp.c"
  1530 ;; Parameters:    Size  Location     Type
  1531 ;;  x               2   90[BANK0 ] int 
  1532 ;; Auto vars:     Size  Location     Type
  1533 ;;  str1           16  124[BANK0 ] unsigned char [16]
  1534 ;;  str2           16  108[BANK0 ] unsigned char [16]
  1535 ;;  str            16   92[BANK0 ] unsigned char [16]
  1536 ;;  Vin             3  140[BANK0 ] float 
  1537 ;;  temp            2  143[BANK0 ] int 
  1538 ;; Return value:  Size  Location     Type
  1539 ;;                  1    wreg      void 
  1540 ;; Registers used:
  1541 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1542 ;; Tracked objects:
  1543 ;;		On entry : 0/0
  1544 ;;		On exit  : 0/0
  1545 ;;		Unchanged: 0/0
  1546 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1547 ;;      Params:         0       2       0       0       0       0       0
  1548 ;;      Locals:         0      53       0       0       0       0       0
  1549 ;;      Temps:          0       0       0       0       0       0       0
  1550 ;;      Totals:         0      55       0       0       0       0       0
  1551 ;;Total ram usage:       55 bytes
  1552 ;; Hardware stack levels used:    1
  1553 ;; Hardware stack levels required when called:    7
  1554 ;; This function calls:
  1555 ;;		___awtoft
  1556 ;;		___ftadd
  1557 ;;		___ftdiv
  1558 ;;		___ftmul
  1559 ;;		___fttol
  1560 ;;		_sprintf
  1561 ;;		_strcpy
  1562 ;;		_writeCMD
  1563 ;;		_writeChar
  1564 ;;		_writeString
  1565 ;; This function is called by:
  1566 ;;		_main
  1567 ;; This function uses a non-reentrant model
  1568 ;;
  1569                           
  1570                           	psect	text2
  1571  002566                     __ptext2:
  1572                           	opt stack 0
  1573  002566                     _temperatureMeasurementC:
  1574                           	opt stack 23
  1575                           
  1576                           ;temp.c: 111: float Vin = ((float)x / 1023) * 4.75;
  1577                           
  1578                           ;incstack = 0
  1579  002566  0EC0               	movlw	192
  1580  002568  0100               	movlb	0	; () banked
  1581  00256A  6F63               	movwf	___ftdiv@f2& (0+255),b
  1582  00256C  0E7F               	movlw	127
  1583  00256E  0100               	movlb	0	; () banked
  1584  002570  6F64               	movwf	(___ftdiv@f2+1)& (0+255),b
  1585  002572  0E44               	movlw	68
  1586  002574  0100               	movlb	0	; () banked
  1587  002576  6F65               	movwf	(___ftdiv@f2+2)& (0+255),b
  1588  002578  C0BA  F01F         	movff	temperatureMeasurementC@x,___awtoft@c
  1589  00257C  C0BB  F020         	movff	temperatureMeasurementC@x+1,___awtoft@c+1
  1590  002580  EC77  F017         	call	___awtoft	;wreg free
  1591  002584  C01F  F060         	movff	?___awtoft,___ftdiv@f1
  1592  002588  C020  F061         	movff	?___awtoft+1,___ftdiv@f1+1
  1593  00258C  C021  F062         	movff	?___awtoft+2,___ftdiv@f1+2
  1594  002590  ECD2  F010         	call	___ftdiv	;wreg free
  1595  002594  C060  F06F         	movff	?___ftdiv,___ftmul@f1
  1596  002598  C061  F070         	movff	?___ftdiv+1,___ftmul@f1+1
  1597  00259C  C062  F071         	movff	?___ftdiv+2,___ftmul@f1+2
  1598  0025A0  0E00               	movlw	0
  1599  0025A2  0100               	movlb	0	; () banked
  1600  0025A4  6F72               	movwf	___ftmul@f2& (0+255),b
  1601  0025A6  0E98               	movlw	152
  1602  0025A8  0100               	movlb	0	; () banked
  1603  0025AA  6F73               	movwf	(___ftmul@f2+1)& (0+255),b
  1604  0025AC  0E40               	movlw	64
  1605  0025AE  0100               	movlb	0	; () banked
  1606  0025B0  6F74               	movwf	(___ftmul@f2+2)& (0+255),b
  1607  0025B2  EC23  F010         	call	___ftmul	;wreg free
  1608  0025B6  C06F  F0EC         	movff	?___ftmul,temperatureMeasurementC@Vin
  1609  0025BA  C070  F0ED         	movff	?___ftmul+1,temperatureMeasurementC@Vin+1
  1610  0025BE  C071  F0EE         	movff	?___ftmul+2,temperatureMeasurementC@Vin+2
  1611                           
  1612                           ;temp.c: 112: int temp = (int)((Vin - 0.0023)/0.0394);
  1613  0025C2  0E62               	movlw	98
  1614  0025C4  0100               	movlb	0	; () banked
  1615  0025C6  6F63               	movwf	___ftdiv@f2& (0+255),b
  1616  0025C8  0E21               	movlw	33
  1617  0025CA  0100               	movlb	0	; () banked
  1618  0025CC  6F64               	movwf	(___ftdiv@f2+1)& (0+255),b
  1619  0025CE  0E3D               	movlw	61
  1620  0025D0  0100               	movlb	0	; () banked
  1621  0025D2  6F65               	movwf	(___ftdiv@f2+2)& (0+255),b
  1622  0025D4  0EBC               	movlw	188
  1623  0025D6  6E2E               	movwf	___ftadd@f2,c
  1624  0025D8  0E16               	movlw	22
  1625  0025DA  6E2F               	movwf	___ftadd@f2+1,c
  1626  0025DC  0EBB               	movlw	187
  1627  0025DE  6E30               	movwf	___ftadd@f2+2,c
  1628  0025E0  C0EC  F02B         	movff	temperatureMeasurementC@Vin,___ftadd@f1
  1629  0025E4  C0ED  F02C         	movff	temperatureMeasurementC@Vin+1,___ftadd@f1+1
  1630  0025E8  C0EE  F02D         	movff	temperatureMeasurementC@Vin+2,___ftadd@f1+2
  1631  0025EC  ECF6  F00C         	call	___ftadd	;wreg free
  1632  0025F0  C02B  F060         	movff	?___ftadd,___ftdiv@f1
  1633  0025F4  C02C  F061         	movff	?___ftadd+1,___ftdiv@f1+1
  1634  0025F8  C02D  F062         	movff	?___ftadd+2,___ftdiv@f1+2
  1635  0025FC  ECD2  F010         	call	___ftdiv	;wreg free
  1636  002600  C060  F085         	movff	?___ftdiv,___fttol@f1
  1637  002604  C061  F086         	movff	?___ftdiv+1,___fttol@f1+1
  1638  002608  C062  F087         	movff	?___ftdiv+2,___fttol@f1+2
  1639  00260C  EC78  F011         	call	___fttol	;wreg free
  1640  002610  C085  F0EF         	movff	?___fttol,temperatureMeasurementC@temp
  1641  002614  C086  F0F0         	movff	?___fttol+1,temperatureMeasurementC@temp+1
  1642                           
  1643                           ;temp.c: 113: char str[16];
  1644                           ;temp.c: 114: char str1[16];
  1645                           ;temp.c: 115: char str2[16];
  1646                           ;temp.c: 117: strcpy(str, "temperature     ");
  1647  002618  0EBC               	movlw	low temperatureMeasurementC@str
  1648  00261A  6E17               	movwf	strcpy@to,c
  1649  00261C  0E00               	movlw	high temperatureMeasurementC@str
  1650  00261E  6E18               	movwf	strcpy@to+1,c
  1651  002620  0E77               	movlw	low STR_1
  1652  002622  6E19               	movwf	strcpy@from,c
  1653  002624  0E06               	movlw	high STR_1
  1654  002626  6E1A               	movwf	strcpy@from+1,c
  1655  002628  ECAC  F017         	call	_strcpy	;wreg free
  1656                           
  1657                           ;temp.c: 118: writeString(str);
  1658  00262C  0EBC               	movlw	low temperatureMeasurementC@str
  1659  00262E  6E1D               	movwf	writeString@str,c
  1660  002630  0E00               	movlw	high temperatureMeasurementC@str
  1661  002632  6E1E               	movwf	writeString@str+1,c
  1662  002634  EC73  F016         	call	_writeString	;wreg free
  1663                           
  1664                           ;temp.c: 119: writeCMD(0xC0);
  1665  002638  0EC0               	movlw	192
  1666  00263A  ECF1  F016         	call	_writeCMD
  1667                           
  1668                           ;temp.c: 120: sprintf(str1, "%d", temp);
  1669  00263E  0EDC               	movlw	low temperatureMeasurementC@str1
  1670  002640  0100               	movlb	0	; () banked
  1671  002642  6F94               	movwf	sprintf@sp& (0+255),b
  1672  002644  0E00               	movlw	high temperatureMeasurementC@str1
  1673  002646  0100               	movlb	0	; () banked
  1674  002648  6F95               	movwf	(sprintf@sp+1)& (0+255),b
  1675  00264A  0EF5               	movlw	low STR_2
  1676  00264C  0100               	movlb	0	; () banked
  1677  00264E  6F96               	movwf	sprintf@f& (0+255),b
  1678  002650  0E06               	movlw	high STR_2
  1679  002652  0100               	movlb	0	; () banked
  1680  002654  6F97               	movwf	(sprintf@f+1)& (0+255),b
  1681  002656  C0EF  F098         	movff	temperatureMeasurementC@temp,?_sprintf+4
  1682  00265A  C0F0  F099         	movff	temperatureMeasurementC@temp+1,?_sprintf+5
  1683  00265E  EC7D  F003         	call	_sprintf	;wreg free
  1684                           
  1685                           ;temp.c: 121: writeString(str1);
  1686  002662  0EDC               	movlw	low temperatureMeasurementC@str1
  1687  002664  6E1D               	movwf	writeString@str,c
  1688  002666  0E00               	movlw	high temperatureMeasurementC@str1
  1689  002668  6E1E               	movwf	writeString@str+1,c
  1690  00266A  EC73  F016         	call	_writeString	;wreg free
  1691                           
  1692                           ;temp.c: 122: writeChar(0xDF);
  1693  00266E  0EDF               	movlw	223
  1694  002670  EC9F  F016         	call	_writeChar
  1695                           
  1696                           ;temp.c: 123: strcpy(str2, "C             ");
  1697  002674  0ECC               	movlw	low temperatureMeasurementC@str2
  1698  002676  6E17               	movwf	strcpy@to,c
  1699  002678  0E00               	movlw	high temperatureMeasurementC@str2
  1700  00267A  6E18               	movwf	strcpy@to+1,c
  1701  00267C  0EA9               	movlw	low STR_3
  1702  00267E  6E19               	movwf	strcpy@from,c
  1703  002680  0E06               	movlw	high STR_3
  1704  002682  6E1A               	movwf	strcpy@from+1,c
  1705  002684  ECAC  F017         	call	_strcpy	;wreg free
  1706                           
  1707                           ;temp.c: 124: writeString(str2);
  1708  002688  0ECC               	movlw	low temperatureMeasurementC@str2
  1709  00268A  6E1D               	movwf	writeString@str,c
  1710  00268C  0E00               	movlw	high temperatureMeasurementC@str2
  1711  00268E  6E1E               	movwf	writeString@str+1,c
  1712  002690  EC73  F016         	call	_writeString	;wreg free
  1713  002694  0012               	return		;funcret
  1714  002696                     __end_of_temperatureMeasurementC:
  1715                           	opt stack 0
  1716                           tblptru	equ	0xFF8
  1717                           tblptrh	equ	0xFF7
  1718                           tblptrl	equ	0xFF6
  1719                           tablat	equ	0xFF5
  1720                           intcon	equ	0xFF2
  1721                           intcon2	equ	0xFF1
  1722                           postinc0	equ	0xFEE
  1723                           wreg	equ	0xFE8
  1724                           status	equ	0xFD8
  1725                           
  1726 ;; *************** function _salinityMeasurement *****************
  1727 ;; Defined at:
  1728 ;;		line 166 in file "temp.c"
  1729 ;; Parameters:    Size  Location     Type
  1730 ;;  x               2   90[BANK0 ] int 
  1731 ;; Auto vars:     Size  Location     Type
  1732 ;;  str1           16  124[BANK0 ] unsigned char [16]
  1733 ;;  str2           16  108[BANK0 ] unsigned char [16]
  1734 ;;  str            16   92[BANK0 ] unsigned char [16]
  1735 ;;  Vin             3  143[BANK0 ] float 
  1736 ;;  salinity        3  140[BANK0 ] float 
  1737 ;; Return value:  Size  Location     Type
  1738 ;;                  1    wreg      void 
  1739 ;; Registers used:
  1740 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1741 ;; Tracked objects:
  1742 ;;		On entry : 0/0
  1743 ;;		On exit  : 0/0
  1744 ;;		Unchanged: 0/0
  1745 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1746 ;;      Params:         0       2       0       0       0       0       0
  1747 ;;      Locals:         0      54       0       0       0       0       0
  1748 ;;      Temps:          0       0       0       0       0       0       0
  1749 ;;      Totals:         0      56       0       0       0       0       0
  1750 ;;Total ram usage:       56 bytes
  1751 ;; Hardware stack levels used:    1
  1752 ;; Hardware stack levels required when called:    7
  1753 ;; This function calls:
  1754 ;;		___awtoft
  1755 ;;		___ftadd
  1756 ;;		___ftdiv
  1757 ;;		___ftmul
  1758 ;;		_sprintf
  1759 ;;		_strcpy
  1760 ;;		_writeCMD
  1761 ;;		_writeString
  1762 ;; This function is called by:
  1763 ;;		_main
  1764 ;; This function uses a non-reentrant model
  1765 ;;
  1766                           
  1767                           	psect	text3
  1768  001D2A                     __ptext3:
  1769                           	opt stack 0
  1770  001D2A                     _salinityMeasurement:
  1771                           	opt stack 23
  1772                           
  1773                           ;temp.c: 168: float Vin = ((float)x / 1023) * 4.75;
  1774                           
  1775                           ;incstack = 0
  1776  001D2A  0EC0               	movlw	192
  1777  001D2C  0100               	movlb	0	; () banked
  1778  001D2E  6F63               	movwf	___ftdiv@f2& (0+255),b
  1779  001D30  0E7F               	movlw	127
  1780  001D32  0100               	movlb	0	; () banked
  1781  001D34  6F64               	movwf	(___ftdiv@f2+1)& (0+255),b
  1782  001D36  0E44               	movlw	68
  1783  001D38  0100               	movlb	0	; () banked
  1784  001D3A  6F65               	movwf	(___ftdiv@f2+2)& (0+255),b
  1785  001D3C  C0BA  F01F         	movff	salinityMeasurement@x,___awtoft@c
  1786  001D40  C0BB  F020         	movff	salinityMeasurement@x+1,___awtoft@c+1
  1787  001D44  EC77  F017         	call	___awtoft	;wreg free
  1788  001D48  C01F  F060         	movff	?___awtoft,___ftdiv@f1
  1789  001D4C  C020  F061         	movff	?___awtoft+1,___ftdiv@f1+1
  1790  001D50  C021  F062         	movff	?___awtoft+2,___ftdiv@f1+2
  1791  001D54  ECD2  F010         	call	___ftdiv	;wreg free
  1792  001D58  C060  F06F         	movff	?___ftdiv,___ftmul@f1
  1793  001D5C  C061  F070         	movff	?___ftdiv+1,___ftmul@f1+1
  1794  001D60  C062  F071         	movff	?___ftdiv+2,___ftmul@f1+2
  1795  001D64  0E00               	movlw	0
  1796  001D66  0100               	movlb	0	; () banked
  1797  001D68  6F72               	movwf	___ftmul@f2& (0+255),b
  1798  001D6A  0E98               	movlw	152
  1799  001D6C  0100               	movlb	0	; () banked
  1800  001D6E  6F73               	movwf	(___ftmul@f2+1)& (0+255),b
  1801  001D70  0E40               	movlw	64
  1802  001D72  0100               	movlb	0	; () banked
  1803  001D74  6F74               	movwf	(___ftmul@f2+2)& (0+255),b
  1804  001D76  EC23  F010         	call	___ftmul	;wreg free
  1805  001D7A  C06F  F0EF         	movff	?___ftmul,salinityMeasurement@Vin
  1806  001D7E  C070  F0F0         	movff	?___ftmul+1,salinityMeasurement@Vin+1
  1807  001D82  C071  F0F1         	movff	?___ftmul+2,salinityMeasurement@Vin+2
  1808                           
  1809                           ;temp.c: 169: float Vin = 40.0*Vin + 100.0;
  1810  001D86  0E00               	movlw	0
  1811  001D88  0100               	movlb	0	; () banked
  1812  001D8A  6F72               	movwf	___ftmul@f2& (0+255),b
  1813  001D8C  0E20               	movlw	32
  1814  001D8E  0100               	movlb	0	; () banked
  1815  001D90  6F73               	movwf	(___ftmul@f2+1)& (0+255),b
  1816  001D92  0E42               	movlw	66
  1817  001D94  0100               	movlb	0	; () banked
  1818  001D96  6F74               	movwf	(___ftmul@f2+2)& (0+255),b
  1819  001D98  C0EF  F06F         	movff	salinityMeasurement@Vin,___ftmul@f1
  1820  001D9C  C0F0  F070         	movff	salinityMeasurement@Vin+1,___ftmul@f1+1
  1821  001DA0  C0F1  F071         	movff	salinityMeasurement@Vin+2,___ftmul@f1+2
  1822  001DA4  EC23  F010         	call	___ftmul	;wreg free
  1823  001DA8  C06F  F02B         	movff	?___ftmul,___ftadd@f1
  1824  001DAC  C070  F02C         	movff	?___ftmul+1,___ftadd@f1+1
  1825  001DB0  C071  F02D         	movff	?___ftmul+2,___ftadd@f1+2
  1826  001DB4  0E00               	movlw	0
  1827  001DB6  6E2E               	movwf	___ftadd@f2,c
  1828  001DB8  0EC8               	movlw	200
  1829  001DBA  6E2F               	movwf	___ftadd@f2+1,c
  1830  001DBC  0E42               	movlw	66
  1831  001DBE  6E30               	movwf	___ftadd@f2+2,c
  1832  001DC0  ECF6  F00C         	call	___ftadd	;wreg free
  1833  001DC4  C02B  F0EF         	movff	?___ftadd,salinityMeasurement@Vin
  1834  001DC8  C02C  F0F0         	movff	?___ftadd+1,salinityMeasurement@Vin+1
  1835  001DCC  C02D  F0F1         	movff	?___ftadd+2,salinityMeasurement@Vin+2
  1836                           
  1837                           ;temp.c: 170: float salinity = (9*Vin/40) - 35/2;
  1838  001DD0  0E00               	movlw	0
  1839  001DD2  0100               	movlb	0	; () banked
  1840  001DD4  6F63               	movwf	___ftdiv@f2& (0+255),b
  1841  001DD6  0E20               	movlw	32
  1842  001DD8  0100               	movlb	0	; () banked
  1843  001DDA  6F64               	movwf	(___ftdiv@f2+1)& (0+255),b
  1844  001DDC  0E42               	movlw	66
  1845  001DDE  0100               	movlb	0	; () banked
  1846  001DE0  6F65               	movwf	(___ftdiv@f2+2)& (0+255),b
  1847  001DE2  0E00               	movlw	0
  1848  001DE4  0100               	movlb	0	; () banked
  1849  001DE6  6F72               	movwf	___ftmul@f2& (0+255),b
  1850  001DE8  0E10               	movlw	16
  1851  001DEA  0100               	movlb	0	; () banked
  1852  001DEC  6F73               	movwf	(___ftmul@f2+1)& (0+255),b
  1853  001DEE  0E41               	movlw	65
  1854  001DF0  0100               	movlb	0	; () banked
  1855  001DF2  6F74               	movwf	(___ftmul@f2+2)& (0+255),b
  1856  001DF4  C0EF  F06F         	movff	salinityMeasurement@Vin,___ftmul@f1
  1857  001DF8  C0F0  F070         	movff	salinityMeasurement@Vin+1,___ftmul@f1+1
  1858  001DFC  C0F1  F071         	movff	salinityMeasurement@Vin+2,___ftmul@f1+2
  1859  001E00  EC23  F010         	call	___ftmul	;wreg free
  1860  001E04  C06F  F060         	movff	?___ftmul,___ftdiv@f1
  1861  001E08  C070  F061         	movff	?___ftmul+1,___ftdiv@f1+1
  1862  001E0C  C071  F062         	movff	?___ftmul+2,___ftdiv@f1+2
  1863  001E10  ECD2  F010         	call	___ftdiv	;wreg free
  1864  001E14  C060  F02B         	movff	?___ftdiv,___ftadd@f1
  1865  001E18  C061  F02C         	movff	?___ftdiv+1,___ftadd@f1+1
  1866  001E1C  C062  F02D         	movff	?___ftdiv+2,___ftadd@f1+2
  1867  001E20  0E00               	movlw	0
  1868  001E22  6E2E               	movwf	___ftadd@f2,c
  1869  001E24  0E88               	movlw	136
  1870  001E26  6E2F               	movwf	___ftadd@f2+1,c
  1871  001E28  0EC1               	movlw	193
  1872  001E2A  6E30               	movwf	___ftadd@f2+2,c
  1873  001E2C  ECF6  F00C         	call	___ftadd	;wreg free
  1874  001E30  C02B  F0EC         	movff	?___ftadd,salinityMeasurement@salinity
  1875  001E34  C02C  F0ED         	movff	?___ftadd+1,salinityMeasurement@salinity+1
  1876  001E38  C02D  F0EE         	movff	?___ftadd+2,salinityMeasurement@salinity+2
  1877                           
  1878                           ;temp.c: 171: char str[16];
  1879                           ;temp.c: 172: char str1[16];
  1880                           ;temp.c: 173: char str2[16];
  1881                           ;temp.c: 175: strcpy(str, "salinity level  ");
  1882  001E3C  0EBC               	movlw	low salinityMeasurement@str
  1883  001E3E  6E17               	movwf	strcpy@to,c
  1884  001E40  0E00               	movlw	high salinityMeasurement@str
  1885  001E42  6E18               	movwf	strcpy@to+1,c
  1886  001E44  0E88               	movlw	low STR_10
  1887  001E46  6E19               	movwf	strcpy@from,c
  1888  001E48  0E06               	movlw	high STR_10
  1889  001E4A  6E1A               	movwf	strcpy@from+1,c
  1890  001E4C  ECAC  F017         	call	_strcpy	;wreg free
  1891                           
  1892                           ;temp.c: 176: writeString(str);
  1893  001E50  0EBC               	movlw	low salinityMeasurement@str
  1894  001E52  6E1D               	movwf	writeString@str,c
  1895  001E54  0E00               	movlw	high salinityMeasurement@str
  1896  001E56  6E1E               	movwf	writeString@str+1,c
  1897  001E58  EC73  F016         	call	_writeString	;wreg free
  1898                           
  1899                           ;temp.c: 177: writeCMD(0xC0);
  1900  001E5C  0EC0               	movlw	192
  1901  001E5E  ECF1  F016         	call	_writeCMD
  1902                           
  1903                           ;temp.c: 178: sprintf(str1, "%0.2f", salinity);
  1904  001E62  0EDC               	movlw	low salinityMeasurement@str1
  1905  001E64  0100               	movlb	0	; () banked
  1906  001E66  6F94               	movwf	sprintf@sp& (0+255),b
  1907  001E68  0E00               	movlw	high salinityMeasurement@str1
  1908  001E6A  0100               	movlb	0	; () banked
  1909  001E6C  6F95               	movwf	(sprintf@sp+1)& (0+255),b
  1910  001E6E  0EEF               	movlw	low STR_8
  1911  001E70  0100               	movlb	0	; () banked
  1912  001E72  6F96               	movwf	sprintf@f& (0+255),b
  1913  001E74  0E06               	movlw	high STR_8
  1914  001E76  0100               	movlb	0	; () banked
  1915  001E78  6F97               	movwf	(sprintf@f+1)& (0+255),b
  1916  001E7A  C0EC  F098         	movff	salinityMeasurement@salinity,?_sprintf+4
  1917  001E7E  C0ED  F099         	movff	salinityMeasurement@salinity+1,?_sprintf+5
  1918  001E82  C0EE  F09A         	movff	salinityMeasurement@salinity+2,?_sprintf+6
  1919  001E86  EC7D  F003         	call	_sprintf	;wreg free
  1920                           
  1921                           ;temp.c: 179: writeString(str1);
  1922  001E8A  0EDC               	movlw	low salinityMeasurement@str1
  1923  001E8C  6E1D               	movwf	writeString@str,c
  1924  001E8E  0E00               	movlw	high salinityMeasurement@str1
  1925  001E90  6E1E               	movwf	writeString@str+1,c
  1926  001E92  EC73  F016         	call	_writeString	;wreg free
  1927                           
  1928                           ;temp.c: 180: strcpy(str2, "ppt          ");
  1929  001E96  0ECC               	movlw	low salinityMeasurement@str2
  1930  001E98  6E17               	movwf	strcpy@to,c
  1931  001E9A  0E00               	movlw	high salinityMeasurement@str2
  1932  001E9C  6E18               	movwf	strcpy@to+1,c
  1933  001E9E  0ED5               	movlw	low STR_12
  1934  001EA0  6E19               	movwf	strcpy@from,c
  1935  001EA2  0E06               	movlw	high STR_12
  1936  001EA4  6E1A               	movwf	strcpy@from+1,c
  1937  001EA6  ECAC  F017         	call	_strcpy	;wreg free
  1938                           
  1939                           ;temp.c: 181: writeString(str2);
  1940  001EAA  0ECC               	movlw	low salinityMeasurement@str2
  1941  001EAC  6E1D               	movwf	writeString@str,c
  1942  001EAE  0E00               	movlw	high salinityMeasurement@str2
  1943  001EB0  6E1E               	movwf	writeString@str+1,c
  1944  001EB2  EC73  F016         	call	_writeString	;wreg free
  1945  001EB6  0012               	return		;funcret
  1946  001EB8                     __end_of_salinityMeasurement:
  1947                           	opt stack 0
  1948                           tblptru	equ	0xFF8
  1949                           tblptrh	equ	0xFF7
  1950                           tblptrl	equ	0xFF6
  1951                           tablat	equ	0xFF5
  1952                           intcon	equ	0xFF2
  1953                           intcon2	equ	0xFF1
  1954                           postinc0	equ	0xFEE
  1955                           wreg	equ	0xFE8
  1956                           status	equ	0xFD8
  1957                           
  1958 ;; *************** function _initialize *****************
  1959 ;; Defined at:
  1960 ;;		line 73 in file "temp.c"
  1961 ;; Parameters:    Size  Location     Type
  1962 ;;		None
  1963 ;; Auto vars:     Size  Location     Type
  1964 ;;		None
  1965 ;; Return value:  Size  Location     Type
  1966 ;;                  1    wreg      void 
  1967 ;; Registers used:
  1968 ;;		wreg, status,2, status,0, cstack
  1969 ;; Tracked objects:
  1970 ;;		On entry : 0/0
  1971 ;;		On exit  : 0/0
  1972 ;;		Unchanged: 0/0
  1973 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1974 ;;      Params:         0       0       0       0       0       0       0
  1975 ;;      Locals:         0       0       0       0       0       0       0
  1976 ;;      Temps:          1       0       0       0       0       0       0
  1977 ;;      Totals:         1       0       0       0       0       0       0
  1978 ;;Total ram usage:        1 bytes
  1979 ;; Hardware stack levels used:    1
  1980 ;; Hardware stack levels required when called:    5
  1981 ;; This function calls:
  1982 ;;		_writeCMD
  1983 ;; This function is called by:
  1984 ;;		_main
  1985 ;; This function uses a non-reentrant model
  1986 ;;
  1987                           
  1988                           	psect	text4
  1989  002A26                     __ptext4:
  1990                           	opt stack 0
  1991  002A26                     _initialize:
  1992                           	opt stack 25
  1993                           
  1994                           ;temp.c: 74: _delay((unsigned long)((15)*(1000000/4000.0)));
  1995                           
  1996                           ;incstack = 0
  1997  002A26  0E05               	movlw	5
  1998  002A28  6E1D               	movwf	??_initialize& (0+255),c
  1999  002A2A  0EDE               	movlw	222
  2000  002A2C                     u4847:
  2001  002A2C  2EE8               	decfsz	wreg,f,c
  2002  002A2E  D7FE               	bra	u4847
  2003  002A30  2E1D               	decfsz	??_initialize& (0+255),f,c
  2004  002A32  D7FC               	bra	u4847
  2005                           
  2006                           ;temp.c: 77: _delay((unsigned long)((15)*(1000000/4000.0)));
  2007  002A34  0E05               	movlw	5
  2008  002A36  6E1D               	movwf	??_initialize& (0+255),c
  2009  002A38  0EDE               	movlw	222
  2010  002A3A                     u4857:
  2011  002A3A  2EE8               	decfsz	wreg,f,c
  2012  002A3C  D7FE               	bra	u4857
  2013  002A3E  2E1D               	decfsz	??_initialize& (0+255),f,c
  2014  002A40  D7FC               	bra	u4857
  2015                           
  2016                           ;temp.c: 79: writeCMD(0x30);
  2017  002A42  0E30               	movlw	48
  2018  002A44  ECF1  F016         	call	_writeCMD
  2019                           
  2020                           ;temp.c: 81: writeCMD(0x38);
  2021  002A48  0E38               	movlw	56
  2022  002A4A  ECF1  F016         	call	_writeCMD
  2023                           
  2024                           ;temp.c: 82: _delay((unsigned long)((15)*(1000000/4000.0)));
  2025  002A4E  0E05               	movlw	5
  2026  002A50  6E1D               	movwf	??_initialize& (0+255),c
  2027  002A52  0EDE               	movlw	222
  2028  002A54                     u4867:
  2029  002A54  2EE8               	decfsz	wreg,f,c
  2030  002A56  D7FE               	bra	u4867
  2031  002A58  2E1D               	decfsz	??_initialize& (0+255),f,c
  2032  002A5A  D7FC               	bra	u4867
  2033                           
  2034                           ;temp.c: 84: writeCMD(0x08);
  2035  002A5C  0E08               	movlw	8
  2036  002A5E  ECF1  F016         	call	_writeCMD
  2037                           
  2038                           ;temp.c: 85: _delay((unsigned long)((15)*(1000000/4000.0)));
  2039  002A62  0E05               	movlw	5
  2040  002A64  6E1D               	movwf	??_initialize& (0+255),c
  2041  002A66  0EDE               	movlw	222
  2042  002A68                     u4877:
  2043  002A68  2EE8               	decfsz	wreg,f,c
  2044  002A6A  D7FE               	bra	u4877
  2045  002A6C  2E1D               	decfsz	??_initialize& (0+255),f,c
  2046  002A6E  D7FC               	bra	u4877
  2047                           
  2048                           ;temp.c: 89: writeCMD(0x01);
  2049  002A70  0E01               	movlw	1
  2050  002A72  ECF1  F016         	call	_writeCMD
  2051                           
  2052                           ;temp.c: 90: _delay((unsigned long)((15)*(1000000/4000.0)));
  2053  002A76  0E05               	movlw	5
  2054  002A78  6E1D               	movwf	??_initialize& (0+255),c
  2055  002A7A  0EDE               	movlw	222
  2056  002A7C                     u4887:
  2057  002A7C  2EE8               	decfsz	wreg,f,c
  2058  002A7E  D7FE               	bra	u4887
  2059  002A80  2E1D               	decfsz	??_initialize& (0+255),f,c
  2060  002A82  D7FC               	bra	u4887
  2061                           
  2062                           ;temp.c: 92: writeCMD(0x06);
  2063  002A84  0E06               	movlw	6
  2064  002A86  ECF1  F016         	call	_writeCMD
  2065                           
  2066                           ;temp.c: 93: _delay((unsigned long)((15)*(1000000/4000.0)));
  2067  002A8A  0E05               	movlw	5
  2068  002A8C  6E1D               	movwf	??_initialize& (0+255),c
  2069  002A8E  0EDE               	movlw	222
  2070  002A90                     u4897:
  2071  002A90  2EE8               	decfsz	wreg,f,c
  2072  002A92  D7FE               	bra	u4897
  2073  002A94  2E1D               	decfsz	??_initialize& (0+255),f,c
  2074  002A96  D7FC               	bra	u4897
  2075                           
  2076                           ;temp.c: 94: writeCMD(0xF);
  2077  002A98  0E0F               	movlw	15
  2078  002A9A  ECF1  F016         	call	_writeCMD
  2079                           
  2080                           ;temp.c: 95: _delay((unsigned long)((15)*(1000000/4000.0)));
  2081  002A9E  0E05               	movlw	5
  2082  002AA0  6E1D               	movwf	??_initialize& (0+255),c
  2083  002AA2  0EDE               	movlw	222
  2084  002AA4                     u4907:
  2085  002AA4  2EE8               	decfsz	wreg,f,c
  2086  002AA6  D7FE               	bra	u4907
  2087  002AA8  2E1D               	decfsz	??_initialize& (0+255),f,c
  2088  002AAA  D7FC               	bra	u4907
  2089  002AAC  0012               	return		;funcret
  2090  002AAE                     __end_of_initialize:
  2091                           	opt stack 0
  2092                           tblptru	equ	0xFF8
  2093                           tblptrh	equ	0xFF7
  2094                           tblptrl	equ	0xFF6
  2095                           tablat	equ	0xFF5
  2096                           intcon	equ	0xFF2
  2097                           intcon2	equ	0xFF1
  2098                           postinc0	equ	0xFEE
  2099                           wreg	equ	0xFE8
  2100                           status	equ	0xFD8
  2101                           
  2102 ;; *************** function _chanSel *****************
  2103 ;; Defined at:
  2104 ;;		line 185 in file "temp.c"
  2105 ;; Parameters:    Size  Location     Type
  2106 ;;  chan            2   22[COMRAM] int 
  2107 ;; Auto vars:     Size  Location     Type
  2108 ;;  digital         2   26[COMRAM] unsigned int 
  2109 ;; Return value:  Size  Location     Type
  2110 ;;                  2   22[COMRAM] int 
  2111 ;; Registers used:
  2112 ;;		wreg, status,2, status,0
  2113 ;; Tracked objects:
  2114 ;;		On entry : 0/0
  2115 ;;		On exit  : 0/0
  2116 ;;		Unchanged: 0/0
  2117 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2118 ;;      Params:         2       0       0       0       0       0       0
  2119 ;;      Locals:         2       0       0       0       0       0       0
  2120 ;;      Temps:          2       0       0       0       0       0       0
  2121 ;;      Totals:         6       0       0       0       0       0       0
  2122 ;;Total ram usage:        6 bytes
  2123 ;; Hardware stack levels used:    1
  2124 ;; Hardware stack levels required when called:    3
  2125 ;; This function calls:
  2126 ;;		Nothing
  2127 ;; This function is called by:
  2128 ;;		_main
  2129 ;; This function uses a non-reentrant model
  2130 ;;
  2131                           
  2132                           	psect	text5
  2133  002EB6                     __ptext5:
  2134                           	opt stack 0
  2135  002EB6                     _chanSel:
  2136                           	opt stack 27
  2137                           
  2138                           ;temp.c: 186: ADCON0bits.CHS=chan;
  2139                           
  2140                           ;incstack = 0
  2141  002EB6  C017  F019         	movff	chanSel@chan,??_chanSel
  2142  002EBA  4619               	rlncf	??_chanSel,f,c
  2143  002EBC  4619               	rlncf	??_chanSel,f,c
  2144  002EBE  50C2               	movf	4034,w,c	;volatile
  2145  002EC0  1819               	xorwf	??_chanSel,w,c
  2146  002EC2  0B83               	andlw	-125
  2147  002EC4  1819               	xorwf	??_chanSel,w,c
  2148  002EC6  6EC2               	movwf	4034,c	;volatile
  2149                           
  2150                           ;temp.c: 187: _delay((unsigned long)((10)*(1000000/4000000.0)));
  2151  002EC8  D000               	nop2		;2 cycle nop
  2152                           
  2153                           ;temp.c: 188: ADCON0bits.GO=1;
  2154  002ECA  82C2               	bsf	4034,1,c	;volatile
  2155  002ECC  B2C2               	btfsc	4034,1,c	;volatile
  2156  002ECE  D7FE               	goto	l114
  2157                           
  2158                           ;temp.c: 190: unsigned int digital = (ADRESH << 8) + ADRESL;
  2159  002ED0  50C4               	movf	4036,w,c	;volatile
  2160  002ED2  6E1A               	movwf	(??_chanSel+1)& (0+255),c
  2161  002ED4  6A19               	clrf	??_chanSel& (0+255),c
  2162  002ED6  50C3               	movf	4035,w,c	;volatile
  2163  002ED8  2419               	addwf	??_chanSel,w,c
  2164  002EDA  6E1B               	movwf	chanSel@digital,c
  2165  002EDC  0E00               	movlw	0
  2166  002EDE  201A               	addwfc	??_chanSel+1,w,c
  2167  002EE0  6E1C               	movwf	chanSel@digital+1,c
  2168                           
  2169                           ;temp.c: 191: _delay((unsigned long)((10)*(1000000/4000000.0)));
  2170  002EE2  D000               	nop2		;2 cycle nop
  2171                           
  2172                           ;temp.c: 192: return digital;
  2173  002EE4  C01B  F017         	movff	chanSel@digital,?_chanSel
  2174  002EE8  C01C  F018         	movff	chanSel@digital+1,?_chanSel+1
  2175  002EEC  0012               	return	
  2176  002EEE                     __end_of_chanSel:
  2177                           	opt stack 0
  2178                           tblptru	equ	0xFF8
  2179                           tblptrh	equ	0xFF7
  2180                           tblptrl	equ	0xFF6
  2181                           tablat	equ	0xFF5
  2182                           intcon	equ	0xFF2
  2183                           intcon2	equ	0xFF1
  2184                           postinc0	equ	0xFEE
  2185                           wreg	equ	0xFE8
  2186                           status	equ	0xFD8
  2187                           
  2188 ;; *************** function _carbonMeasurement *****************
  2189 ;; Defined at:
  2190 ;;		line 147 in file "temp.c"
  2191 ;; Parameters:    Size  Location     Type
  2192 ;;  x               2   90[BANK0 ] int 
  2193 ;; Auto vars:     Size  Location     Type
  2194 ;;  str1           16  124[BANK0 ] unsigned char [16]
  2195 ;;  str2           16  108[BANK0 ] unsigned char [16]
  2196 ;;  str            16   92[BANK0 ] unsigned char [16]
  2197 ;;  Vin             3  143[BANK0 ] float 
  2198 ;;  carbon          3  140[BANK0 ] float 
  2199 ;; Return value:  Size  Location     Type
  2200 ;;                  1    wreg      void 
  2201 ;; Registers used:
  2202 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2203 ;; Tracked objects:
  2204 ;;		On entry : 0/0
  2205 ;;		On exit  : 0/0
  2206 ;;		Unchanged: 0/0
  2207 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2208 ;;      Params:         0       2       0       0       0       0       0
  2209 ;;      Locals:         0      54       0       0       0       0       0
  2210 ;;      Temps:          0       0       0       0       0       0       0
  2211 ;;      Totals:         0      56       0       0       0       0       0
  2212 ;;Total ram usage:       56 bytes
  2213 ;; Hardware stack levels used:    1
  2214 ;; Hardware stack levels required when called:    7
  2215 ;; This function calls:
  2216 ;;		___awtoft
  2217 ;;		___ftadd
  2218 ;;		___ftdiv
  2219 ;;		___ftmul
  2220 ;;		_sprintf
  2221 ;;		_strcpy
  2222 ;;		_writeCMD
  2223 ;;		_writeString
  2224 ;; This function is called by:
  2225 ;;		_main
  2226 ;; This function uses a non-reentrant model
  2227 ;;
  2228                           
  2229                           	psect	text6
  2230  001EB8                     __ptext6:
  2231                           	opt stack 0
  2232  001EB8                     _carbonMeasurement:
  2233                           	opt stack 23
  2234                           
  2235                           ;temp.c: 149: float Vin = ((float)x / 1023) * 4.75;
  2236                           
  2237                           ;incstack = 0
  2238  001EB8  0EC0               	movlw	192
  2239  001EBA  0100               	movlb	0	; () banked
  2240  001EBC  6F63               	movwf	___ftdiv@f2& (0+255),b
  2241  001EBE  0E7F               	movlw	127
  2242  001EC0  0100               	movlb	0	; () banked
  2243  001EC2  6F64               	movwf	(___ftdiv@f2+1)& (0+255),b
  2244  001EC4  0E44               	movlw	68
  2245  001EC6  0100               	movlb	0	; () banked
  2246  001EC8  6F65               	movwf	(___ftdiv@f2+2)& (0+255),b
  2247  001ECA  C0BA  F01F         	movff	carbonMeasurement@x,___awtoft@c
  2248  001ECE  C0BB  F020         	movff	carbonMeasurement@x+1,___awtoft@c+1
  2249  001ED2  EC77  F017         	call	___awtoft	;wreg free
  2250  001ED6  C01F  F060         	movff	?___awtoft,___ftdiv@f1
  2251  001EDA  C020  F061         	movff	?___awtoft+1,___ftdiv@f1+1
  2252  001EDE  C021  F062         	movff	?___awtoft+2,___ftdiv@f1+2
  2253  001EE2  ECD2  F010         	call	___ftdiv	;wreg free
  2254  001EE6  C060  F06F         	movff	?___ftdiv,___ftmul@f1
  2255  001EEA  C061  F070         	movff	?___ftdiv+1,___ftmul@f1+1
  2256  001EEE  C062  F071         	movff	?___ftdiv+2,___ftmul@f1+2
  2257  001EF2  0E00               	movlw	0
  2258  001EF4  0100               	movlb	0	; () banked
  2259  001EF6  6F72               	movwf	___ftmul@f2& (0+255),b
  2260  001EF8  0E98               	movlw	152
  2261  001EFA  0100               	movlb	0	; () banked
  2262  001EFC  6F73               	movwf	(___ftmul@f2+1)& (0+255),b
  2263  001EFE  0E40               	movlw	64
  2264  001F00  0100               	movlb	0	; () banked
  2265  001F02  6F74               	movwf	(___ftmul@f2+2)& (0+255),b
  2266  001F04  EC23  F010         	call	___ftmul	;wreg free
  2267  001F08  C06F  F0EF         	movff	?___ftmul,carbonMeasurement@Vin
  2268  001F0C  C070  F0F0         	movff	?___ftmul+1,carbonMeasurement@Vin+1
  2269  001F10  C071  F0F1         	movff	?___ftmul+2,carbonMeasurement@Vin+2
  2270                           
  2271                           ;temp.c: 150: float Vin = Vin*40 + 50;
  2272  001F14  0E00               	movlw	0
  2273  001F16  0100               	movlb	0	; () banked
  2274  001F18  6F72               	movwf	___ftmul@f2& (0+255),b
  2275  001F1A  0E20               	movlw	32
  2276  001F1C  0100               	movlb	0	; () banked
  2277  001F1E  6F73               	movwf	(___ftmul@f2+1)& (0+255),b
  2278  001F20  0E42               	movlw	66
  2279  001F22  0100               	movlb	0	; () banked
  2280  001F24  6F74               	movwf	(___ftmul@f2+2)& (0+255),b
  2281  001F26  C0EF  F06F         	movff	carbonMeasurement@Vin,___ftmul@f1
  2282  001F2A  C0F0  F070         	movff	carbonMeasurement@Vin+1,___ftmul@f1+1
  2283  001F2E  C0F1  F071         	movff	carbonMeasurement@Vin+2,___ftmul@f1+2
  2284  001F32  EC23  F010         	call	___ftmul	;wreg free
  2285  001F36  C06F  F02B         	movff	?___ftmul,___ftadd@f1
  2286  001F3A  C070  F02C         	movff	?___ftmul+1,___ftadd@f1+1
  2287  001F3E  C071  F02D         	movff	?___ftmul+2,___ftadd@f1+2
  2288  001F42  0E00               	movlw	0
  2289  001F44  6E2E               	movwf	___ftadd@f2,c
  2290  001F46  0E48               	movlw	72
  2291  001F48  6E2F               	movwf	___ftadd@f2+1,c
  2292  001F4A  0E42               	movlw	66
  2293  001F4C  6E30               	movwf	___ftadd@f2+2,c
  2294  001F4E  ECF6  F00C         	call	___ftadd	;wreg free
  2295  001F52  C02B  F0EF         	movff	?___ftadd,carbonMeasurement@Vin
  2296  001F56  C02C  F0F0         	movff	?___ftadd+1,carbonMeasurement@Vin+1
  2297  001F5A  C02D  F0F1         	movff	?___ftadd+2,carbonMeasurement@Vin+2
  2298                           
  2299                           ;temp.c: 151: float carbon = ((68*Vin/49) + 150/49);
  2300  001F5E  0E00               	movlw	0
  2301  001F60  0100               	movlb	0	; () banked
  2302  001F62  6F63               	movwf	___ftdiv@f2& (0+255),b
  2303  001F64  0E44               	movlw	68
  2304  001F66  0100               	movlb	0	; () banked
  2305  001F68  6F64               	movwf	(___ftdiv@f2+1)& (0+255),b
  2306  001F6A  0E42               	movlw	66
  2307  001F6C  0100               	movlb	0	; () banked
  2308  001F6E  6F65               	movwf	(___ftdiv@f2+2)& (0+255),b
  2309  001F70  0E00               	movlw	0
  2310  001F72  0100               	movlb	0	; () banked
  2311  001F74  6F72               	movwf	___ftmul@f2& (0+255),b
  2312  001F76  0E88               	movlw	136
  2313  001F78  0100               	movlb	0	; () banked
  2314  001F7A  6F73               	movwf	(___ftmul@f2+1)& (0+255),b
  2315  001F7C  0E42               	movlw	66
  2316  001F7E  0100               	movlb	0	; () banked
  2317  001F80  6F74               	movwf	(___ftmul@f2+2)& (0+255),b
  2318  001F82  C0EF  F06F         	movff	carbonMeasurement@Vin,___ftmul@f1
  2319  001F86  C0F0  F070         	movff	carbonMeasurement@Vin+1,___ftmul@f1+1
  2320  001F8A  C0F1  F071         	movff	carbonMeasurement@Vin+2,___ftmul@f1+2
  2321  001F8E  EC23  F010         	call	___ftmul	;wreg free
  2322  001F92  C06F  F060         	movff	?___ftmul,___ftdiv@f1
  2323  001F96  C070  F061         	movff	?___ftmul+1,___ftdiv@f1+1
  2324  001F9A  C071  F062         	movff	?___ftmul+2,___ftdiv@f1+2
  2325  001F9E  ECD2  F010         	call	___ftdiv	;wreg free
  2326  001FA2  C060  F02B         	movff	?___ftdiv,___ftadd@f1
  2327  001FA6  C061  F02C         	movff	?___ftdiv+1,___ftadd@f1+1
  2328  001FAA  C062  F02D         	movff	?___ftdiv+2,___ftadd@f1+2
  2329  001FAE  0E00               	movlw	0
  2330  001FB0  6E2E               	movwf	___ftadd@f2,c
  2331  001FB2  0E40               	movlw	64
  2332  001FB4  6E2F               	movwf	___ftadd@f2+1,c
  2333  001FB6  0E40               	movlw	64
  2334  001FB8  6E30               	movwf	___ftadd@f2+2,c
  2335  001FBA  ECF6  F00C         	call	___ftadd	;wreg free
  2336  001FBE  C02B  F0EC         	movff	?___ftadd,carbonMeasurement@carbon
  2337  001FC2  C02C  F0ED         	movff	?___ftadd+1,carbonMeasurement@carbon+1
  2338  001FC6  C02D  F0EE         	movff	?___ftadd+2,carbonMeasurement@carbon+2
  2339                           
  2340                           ;temp.c: 152: char str[16];
  2341                           ;temp.c: 153: char str1[16];
  2342                           ;temp.c: 154: char str2[16];
  2343                           ;temp.c: 156: strcpy(str, "carbon level   ");
  2344  001FCA  0EBC               	movlw	low carbonMeasurement@str
  2345  001FCC  6E17               	movwf	strcpy@to,c
  2346  001FCE  0E00               	movlw	high carbonMeasurement@str
  2347  001FD0  6E18               	movwf	strcpy@to+1,c
  2348  001FD2  0E99               	movlw	low STR_7
  2349  001FD4  6E19               	movwf	strcpy@from,c
  2350  001FD6  0E06               	movlw	high STR_7
  2351  001FD8  6E1A               	movwf	strcpy@from+1,c
  2352  001FDA  ECAC  F017         	call	_strcpy	;wreg free
  2353                           
  2354                           ;temp.c: 157: writeString(str);
  2355  001FDE  0EBC               	movlw	low carbonMeasurement@str
  2356  001FE0  6E1D               	movwf	writeString@str,c
  2357  001FE2  0E00               	movlw	high carbonMeasurement@str
  2358  001FE4  6E1E               	movwf	writeString@str+1,c
  2359  001FE6  EC73  F016         	call	_writeString	;wreg free
  2360                           
  2361                           ;temp.c: 158: writeCMD(0xC0);
  2362  001FEA  0EC0               	movlw	192
  2363  001FEC  ECF1  F016         	call	_writeCMD
  2364                           
  2365                           ;temp.c: 159: sprintf(str1, "%0.2f", carbon);
  2366  001FF0  0EDC               	movlw	low carbonMeasurement@str1
  2367  001FF2  0100               	movlb	0	; () banked
  2368  001FF4  6F94               	movwf	sprintf@sp& (0+255),b
  2369  001FF6  0E00               	movlw	high carbonMeasurement@str1
  2370  001FF8  0100               	movlb	0	; () banked
  2371  001FFA  6F95               	movwf	(sprintf@sp+1)& (0+255),b
  2372  001FFC  0EEF               	movlw	low STR_8
  2373  001FFE  0100               	movlb	0	; () banked
  2374  002000  6F96               	movwf	sprintf@f& (0+255),b
  2375  002002  0E06               	movlw	high STR_8
  2376  002004  0100               	movlb	0	; () banked
  2377  002006  6F97               	movwf	(sprintf@f+1)& (0+255),b
  2378  002008  C0EC  F098         	movff	carbonMeasurement@carbon,?_sprintf+4
  2379  00200C  C0ED  F099         	movff	carbonMeasurement@carbon+1,?_sprintf+5
  2380  002010  C0EE  F09A         	movff	carbonMeasurement@carbon+2,?_sprintf+6
  2381  002014  EC7D  F003         	call	_sprintf	;wreg free
  2382                           
  2383                           ;temp.c: 160: writeString(str1);
  2384  002018  0EDC               	movlw	low carbonMeasurement@str1
  2385  00201A  6E1D               	movwf	writeString@str,c
  2386  00201C  0E00               	movlw	high carbonMeasurement@str1
  2387  00201E  6E1E               	movwf	writeString@str+1,c
  2388  002020  EC73  F016         	call	_writeString	;wreg free
  2389                           
  2390                           ;temp.c: 161: strcpy(str2, "ppm          ");
  2391  002024  0ECC               	movlw	low carbonMeasurement@str2
  2392  002026  6E17               	movwf	strcpy@to,c
  2393  002028  0E00               	movlw	high carbonMeasurement@str2
  2394  00202A  6E18               	movwf	strcpy@to+1,c
  2395  00202C  0EC7               	movlw	low STR_9
  2396  00202E  6E19               	movwf	strcpy@from,c
  2397  002030  0E06               	movlw	high STR_9
  2398  002032  6E1A               	movwf	strcpy@from+1,c
  2399  002034  ECAC  F017         	call	_strcpy	;wreg free
  2400                           
  2401                           ;temp.c: 162: writeString(str2);
  2402  002038  0ECC               	movlw	low carbonMeasurement@str2
  2403  00203A  6E1D               	movwf	writeString@str,c
  2404  00203C  0E00               	movlw	high carbonMeasurement@str2
  2405  00203E  6E1E               	movwf	writeString@str+1,c
  2406  002040  EC73  F016         	call	_writeString	;wreg free
  2407  002044  0012               	return		;funcret
  2408  002046                     __end_of_carbonMeasurement:
  2409                           	opt stack 0
  2410                           tblptru	equ	0xFF8
  2411                           tblptrh	equ	0xFF7
  2412                           tblptrl	equ	0xFF6
  2413                           tablat	equ	0xFF5
  2414                           intcon	equ	0xFF2
  2415                           intcon2	equ	0xFF1
  2416                           postinc0	equ	0xFEE
  2417                           wreg	equ	0xFE8
  2418                           status	equ	0xFD8
  2419                           
  2420 ;; *************** function _writeString *****************
  2421 ;; Defined at:
  2422 ;;		line 100 in file "temp.c"
  2423 ;; Parameters:    Size  Location     Type
  2424 ;;  str             2   28[COMRAM] PTR unsigned char 
  2425 ;;		 -> STR_13(12), salinityMeasurement@str2(16), salinityMeasurement@str1(16), salinityMeasurement@str(16), 
  2426 ;;		 -> carbonMeasurement@str2(16), carbonMeasurement@str1(16), carbonMeasurement@str(16), temperatureMeasurementF@str2(
      +16), 
  2427 ;;		 -> temperatureMeasurementF@str1(16), temperatureMeasurementF@str(16), temperatureMeasurementC@str2(16), temperature
      +MeasurementC@str1(16), 
  2428 ;;		 -> temperatureMeasurementC@str(16), 
  2429 ;; Auto vars:     Size  Location     Type
  2430 ;;  i               2   32[COMRAM] int 
  2431 ;; Return value:  Size  Location     Type
  2432 ;;                  1    wreg      void 
  2433 ;; Registers used:
  2434 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2435 ;; Tracked objects:
  2436 ;;		On entry : 0/0
  2437 ;;		On exit  : 0/0
  2438 ;;		Unchanged: 0/0
  2439 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2440 ;;      Params:         2       0       0       0       0       0       0
  2441 ;;      Locals:         2       0       0       0       0       0       0
  2442 ;;      Temps:          2       0       0       0       0       0       0
  2443 ;;      Totals:         6       0       0       0       0       0       0
  2444 ;;Total ram usage:        6 bytes
  2445 ;; Hardware stack levels used:    1
  2446 ;; Hardware stack levels required when called:    5
  2447 ;; This function calls:
  2448 ;;		_strlen
  2449 ;;		_writeChar
  2450 ;; This function is called by:
  2451 ;;		_temperatureMeasurementC
  2452 ;;		_temperatureMeasurementF
  2453 ;;		_carbonMeasurement
  2454 ;;		_salinityMeasurement
  2455 ;;		_main
  2456 ;; This function uses a non-reentrant model
  2457 ;;
  2458                           
  2459                           	psect	text7
  2460  002CE6                     __ptext7:
  2461                           	opt stack 0
  2462  002CE6                     _writeString:
  2463                           	opt stack 25
  2464                           
  2465                           ;temp.c: 102: for (int i =0; i < strlen(str); i++)
  2466                           
  2467                           ;incstack = 0
  2468  002CE6  0E00               	movlw	0
  2469  002CE8  6E22               	movwf	writeString@i+1,c
  2470  002CEA  0E00               	movlw	0
  2471  002CEC  6E21               	movwf	writeString@i,c
  2472  002CEE  D01A               	goto	l95
  2473  002CF0                     
  2474                           ;temp.c: 103: {
  2475                           ;temp.c: 104: writeChar(str[i]);
  2476  002CF0  5021               	movf	writeString@i,w,c
  2477  002CF2  241D               	addwf	writeString@str,w,c
  2478  002CF4  6E1F               	movwf	??_writeString& (0+255),c
  2479  002CF6  5022               	movf	writeString@i+1,w,c
  2480  002CF8  201E               	addwfc	writeString@str+1,w,c
  2481  002CFA  6E20               	movwf	(??_writeString+1)& (0+255),c
  2482  002CFC  C01F  FFF6         	movff	??_writeString,tblptrl
  2483  002D00  C020  FFF7         	movff	??_writeString+1,tblptrh
  2484  002D04  6AF8               	clrf	tblptru,c
  2485  002D06  0E05               	movlw	(high __ramtop+-1)
  2486  002D08  64F7               	cpfsgt	tblptrh,c
  2487  002D0A  D003               	bra	u2877
  2488  002D0C  0008               	tblrd		*
  2489  002D0E  50F5               	movf	tablat,w,c
  2490  002D10  D005               	bra	u2870
  2491  002D12                     u2877:
  2492  002D12  CFF6 FFE9          	movff	tblptrl,fsr0l
  2493  002D16  CFF7 FFEA          	movff	tblptrh,fsr0h
  2494  002D1A  50EF               	movf	indf0,w,c
  2495  002D1C                     u2870:
  2496  002D1C  EC9F  F016         	call	_writeChar
  2497  002D20  4A21               	infsnz	writeString@i,f,c
  2498  002D22  2A22               	incf	writeString@i+1,f,c
  2499  002D24                     l95:
  2500  002D24  C01D  F017         	movff	writeString@str,strlen@s
  2501  002D28  C01E  F018         	movff	writeString@str+1,strlen@s+1
  2502  002D2C  ECC8  F016         	call	_strlen	;wreg free
  2503  002D30  5017               	movf	?_strlen,w,c
  2504  002D32  5C21               	subwf	writeString@i,w,c
  2505  002D34  5018               	movf	?_strlen+1,w,c
  2506  002D36  5822               	subwfb	writeString@i+1,w,c
  2507  002D38  B0D8               	btfsc	status,0,c
  2508  002D3A  0012               	return	
  2509  002D3C  D7D9               	goto	l96
  2510  002D3E                     __end_of_writeString:
  2511                           	opt stack 0
  2512                           tblptru	equ	0xFF8
  2513                           tblptrh	equ	0xFF7
  2514                           tblptrl	equ	0xFF6
  2515                           tablat	equ	0xFF5
  2516                           intcon	equ	0xFF2
  2517                           intcon2	equ	0xFF1
  2518                           indf0	equ	0xFEF
  2519                           postinc0	equ	0xFEE
  2520                           fsr0h	equ	0xFEA
  2521                           fsr0l	equ	0xFE9
  2522                           wreg	equ	0xFE8
  2523                           status	equ	0xFD8
  2524                           
  2525 ;; *************** function _writeChar *****************
  2526 ;; Defined at:
  2527 ;;		line 39 in file "temp.c"
  2528 ;; Parameters:    Size  Location     Type
  2529 ;;  ch              1    wreg     unsigned char 
  2530 ;; Auto vars:     Size  Location     Type
  2531 ;;  ch              1   25[COMRAM] unsigned char 
  2532 ;;  i               2   26[COMRAM] int 
  2533 ;; Return value:  Size  Location     Type
  2534 ;;                  1    wreg      void 
  2535 ;; Registers used:
  2536 ;;		wreg, status,2, status,0, cstack
  2537 ;; Tracked objects:
  2538 ;;		On entry : 0/0
  2539 ;;		On exit  : 0/0
  2540 ;;		Unchanged: 0/0
  2541 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2542 ;;      Params:         0       0       0       0       0       0       0
  2543 ;;      Locals:         3       0       0       0       0       0       0
  2544 ;;      Temps:          2       0       0       0       0       0       0
  2545 ;;      Totals:         5       0       0       0       0       0       0
  2546 ;;Total ram usage:        5 bytes
  2547 ;; Hardware stack levels used:    1
  2548 ;; Hardware stack levels required when called:    4
  2549 ;; This function calls:
  2550 ;;		_switchE
  2551 ;; This function is called by:
  2552 ;;		_writeString
  2553 ;;		_temperatureMeasurementC
  2554 ;;		_temperatureMeasurementF
  2555 ;;		_main
  2556 ;; This function uses a non-reentrant model
  2557 ;;
  2558                           
  2559                           	psect	text8
  2560  002D3E                     __ptext8:
  2561                           	opt stack 0
  2562  002D3E                     _writeChar:
  2563                           	opt stack 25
  2564                           
  2565                           ;incstack = 0
  2566                           ;writeChar@ch stored from wreg
  2567  002D3E  6E1A               	movwf	writeChar@ch,c
  2568                           
  2569                           ;temp.c: 40: LATBbits.LATB3=1;
  2570  002D40  868A               	bsf	3978,3,c	;volatile
  2571                           
  2572                           ;temp.c: 41: LATBbits.LATB4=0;
  2573  002D42  988A               	bcf	3978,4,c	;volatile
  2574                           
  2575                           ;temp.c: 42: for (int i = 7; i>=0 ; i--)
  2576  002D44  0E00               	movlw	0
  2577  002D46  6E1C               	movwf	writeChar@i+1,c
  2578  002D48  0E07               	movlw	7
  2579  002D4A  6E1B               	movwf	writeChar@i,c
  2580  002D4C                     l2484:
  2581  002D4C  BE1C               	btfsc	writeChar@i+1,7,c
  2582  002D4E  D01D               	goto	u2360
  2583                           
  2584                           ;temp.c: 43: {
  2585                           ;temp.c: 44: LATCbits.LATC5 = (ch >> i)&1;
  2586  002D50  C01B  F018         	movff	writeChar@i,??_writeChar
  2587  002D54  C01A  F019         	movff	writeChar@ch,??_writeChar+1
  2588  002D58  2A18               	incf	??_writeChar,f,c
  2589  002D5A  D002               	goto	u2354
  2590  002D5C                     u2355:
  2591  002D5C  90D8               	bcf	status,0,c
  2592  002D5E  3219               	rrcf	??_writeChar+1,f,c
  2593  002D60                     u2354:
  2594  002D60  2E18               	decfsz	??_writeChar,f,c
  2595  002D62  D7FC               	goto	u2355
  2596  002D64  0E01               	movlw	1
  2597  002D66  1619               	andwf	??_writeChar+1,f,c
  2598  002D68  3A19               	swapf	??_writeChar+1,f,c
  2599  002D6A  4619               	rlncf	??_writeChar+1,f,c
  2600  002D6C  508B               	movf	3979,w,c	;volatile
  2601  002D6E  1819               	xorwf	??_writeChar+1,w,c
  2602  002D70  0BDF               	andlw	-33
  2603  002D72  1819               	xorwf	??_writeChar+1,w,c
  2604  002D74  6E8B               	movwf	3979,c	;volatile
  2605                           
  2606                           ;temp.c: 45: LATCbits.LATC6 = 0;
  2607  002D76  9C8B               	bcf	3979,6,c	;volatile
  2608                           
  2609                           ;temp.c: 46: LATCbits.LATC6 = 1;
  2610  002D78  8C8B               	bsf	3979,6,c	;volatile
  2611                           
  2612                           ;temp.c: 47: _delay((unsigned long)((1)*(1000000/4000.0)));
  2613  002D7A  0E53               	movlw	83
  2614  002D7C                     u4917:
  2615  002D7C  2EE8               	decfsz	wreg,f,c
  2616  002D7E  D7FE               	bra	u4917
  2617  002D80  F000               	nop	
  2618  002D82  061B               	decf	writeChar@i,f,c
  2619  002D84  A0D8               	btfss	status,0,c
  2620  002D86  061C               	decf	writeChar@i+1,f,c
  2621  002D88  D7E1               	goto	l2484
  2622  002D8A                     u2360:
  2623                           
  2624                           ;temp.c: 49: }
  2625                           ;temp.c: 53: switchE();
  2626  002D8A  ECE9  F017         	call	_switchE	;wreg free
  2627  002D8E  0012               	return		;funcret
  2628  002D90                     __end_of_writeChar:
  2629                           	opt stack 0
  2630                           tblptru	equ	0xFF8
  2631                           tblptrh	equ	0xFF7
  2632                           tblptrl	equ	0xFF6
  2633                           tablat	equ	0xFF5
  2634                           intcon	equ	0xFF2
  2635                           intcon2	equ	0xFF1
  2636                           indf0	equ	0xFEF
  2637                           postinc0	equ	0xFEE
  2638                           fsr0h	equ	0xFEA
  2639                           fsr0l	equ	0xFE9
  2640                           wreg	equ	0xFE8
  2641                           status	equ	0xFD8
  2642                           
  2643 ;; *************** function _strlen *****************
  2644 ;; Defined at:
  2645 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\strlen.c"
  2646 ;; Parameters:    Size  Location     Type
  2647 ;;  s               2   22[COMRAM] PTR const unsigned char 
  2648 ;;		 -> STR_13(12), salinityMeasurement@str2(16), salinityMeasurement@str1(16), salinityMeasurement@str(16), 
  2649 ;;		 -> carbonMeasurement@str2(16), carbonMeasurement@str1(16), carbonMeasurement@str(16), temperatureMeasurementF@str2(
      +16), 
  2650 ;;		 -> temperatureMeasurementF@str1(16), temperatureMeasurementF@str(16), temperatureMeasurementC@str2(16), temperature
      +MeasurementC@str1(16), 
  2651 ;;		 -> temperatureMeasurementC@str(16), 
  2652 ;; Auto vars:     Size  Location     Type
  2653 ;;  cp              2   26[COMRAM] PTR const unsigned char 
  2654 ;;		 -> STR_13(12), salinityMeasurement@str2(16), salinityMeasurement@str1(16), salinityMeasurement@str(16), 
  2655 ;;		 -> carbonMeasurement@str2(16), carbonMeasurement@str1(16), carbonMeasurement@str(16), temperatureMeasurementF@str2(
      +16), 
  2656 ;;		 -> temperatureMeasurementF@str1(16), temperatureMeasurementF@str(16), temperatureMeasurementC@str2(16), temperature
      +MeasurementC@str1(16), 
  2657 ;;		 -> temperatureMeasurementC@str(16), 
  2658 ;; Return value:  Size  Location     Type
  2659 ;;                  2   22[COMRAM] unsigned int 
  2660 ;; Registers used:
  2661 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru
  2662 ;; Tracked objects:
  2663 ;;		On entry : 0/0
  2664 ;;		On exit  : 0/0
  2665 ;;		Unchanged: 0/0
  2666 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2667 ;;      Params:         2       0       0       0       0       0       0
  2668 ;;      Locals:         2       0       0       0       0       0       0
  2669 ;;      Temps:          2       0       0       0       0       0       0
  2670 ;;      Totals:         6       0       0       0       0       0       0
  2671 ;;Total ram usage:        6 bytes
  2672 ;; Hardware stack levels used:    1
  2673 ;; Hardware stack levels required when called:    3
  2674 ;; This function calls:
  2675 ;;		Nothing
  2676 ;; This function is called by:
  2677 ;;		_writeString
  2678 ;; This function uses a non-reentrant model
  2679 ;;
  2680                           
  2681                           	psect	text9
  2682  002D90                     __ptext9:
  2683                           	opt stack 0
  2684  002D90                     _strlen:
  2685                           	opt stack 26
  2686                           
  2687                           ;incstack = 0
  2688  002D90  C017  F01B         	movff	strlen@s,strlen@cp
  2689  002D94  C018  F01C         	movff	strlen@s+1,strlen@cp+1
  2690  002D98  D002               	goto	l904
  2691  002D9A  4A1B               	infsnz	strlen@cp,f,c
  2692  002D9C  2A1C               	incf	strlen@cp+1,f,c
  2693  002D9E                     l904:
  2694  002D9E  C01B  FFF6         	movff	strlen@cp,tblptrl
  2695  002DA2  C01C  FFF7         	movff	strlen@cp+1,tblptrh
  2696  002DA6  6AF8               	clrf	tblptru,c
  2697  002DA8  0E05               	movlw	(high __ramtop+-1)
  2698  002DAA  64F7               	cpfsgt	tblptrh,c
  2699  002DAC  D003               	bra	u2377
  2700  002DAE  0008               	tblrd		*
  2701  002DB0  50F5               	movf	tablat,w,c
  2702  002DB2  D005               	bra	u2370
  2703  002DB4                     u2377:
  2704  002DB4  CFF6 FFE9          	movff	tblptrl,fsr0l
  2705  002DB8  CFF7 FFEA          	movff	tblptrh,fsr0h
  2706  002DBC  50EF               	movf	indf0,w,c
  2707  002DBE                     u2370:
  2708  002DBE  0900               	iorlw	0
  2709  002DC0  A4D8               	btfss	status,2,c
  2710  002DC2  D7EB               	goto	l905
  2711  002DC4  C017  F019         	movff	strlen@s,??_strlen
  2712  002DC8  C018  F01A         	movff	strlen@s+1,??_strlen+1
  2713  002DCC  1E19               	comf	??_strlen,f,c
  2714  002DCE  1E1A               	comf	??_strlen+1,f,c
  2715  002DD0  4A19               	infsnz	??_strlen,f,c
  2716  002DD2  2A1A               	incf	??_strlen+1,f,c
  2717  002DD4  501B               	movf	strlen@cp,w,c
  2718  002DD6  2419               	addwf	??_strlen,w,c
  2719  002DD8  6E17               	movwf	?_strlen,c
  2720  002DDA  501C               	movf	strlen@cp+1,w,c
  2721  002DDC  201A               	addwfc	??_strlen+1,w,c
  2722  002DDE  6E18               	movwf	?_strlen+1,c
  2723  002DE0  0012               	return	
  2724  002DE2                     __end_of_strlen:
  2725                           	opt stack 0
  2726                           tblptru	equ	0xFF8
  2727                           tblptrh	equ	0xFF7
  2728                           tblptrl	equ	0xFF6
  2729                           tablat	equ	0xFF5
  2730                           intcon	equ	0xFF2
  2731                           intcon2	equ	0xFF1
  2732                           indf0	equ	0xFEF
  2733                           postinc0	equ	0xFEE
  2734                           fsr0h	equ	0xFEA
  2735                           fsr0l	equ	0xFE9
  2736                           wreg	equ	0xFE8
  2737                           status	equ	0xFD8
  2738                           
  2739 ;; *************** function _writeCMD *****************
  2740 ;; Defined at:
  2741 ;;		line 55 in file "temp.c"
  2742 ;; Parameters:    Size  Location     Type
  2743 ;;  cmd             1    wreg     unsigned char 
  2744 ;; Auto vars:     Size  Location     Type
  2745 ;;  cmd             1   25[COMRAM] unsigned char 
  2746 ;;  i               2   26[COMRAM] int 
  2747 ;; Return value:  Size  Location     Type
  2748 ;;                  1    wreg      void 
  2749 ;; Registers used:
  2750 ;;		wreg, status,2, status,0, cstack
  2751 ;; Tracked objects:
  2752 ;;		On entry : 0/0
  2753 ;;		On exit  : 0/0
  2754 ;;		Unchanged: 0/0
  2755 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2756 ;;      Params:         0       0       0       0       0       0       0
  2757 ;;      Locals:         3       0       0       0       0       0       0
  2758 ;;      Temps:          2       0       0       0       0       0       0
  2759 ;;      Totals:         5       0       0       0       0       0       0
  2760 ;;Total ram usage:        5 bytes
  2761 ;; Hardware stack levels used:    1
  2762 ;; Hardware stack levels required when called:    4
  2763 ;; This function calls:
  2764 ;;		_switchE
  2765 ;; This function is called by:
  2766 ;;		_initialize
  2767 ;;		_temperatureMeasurementC
  2768 ;;		_temperatureMeasurementF
  2769 ;;		_carbonMeasurement
  2770 ;;		_salinityMeasurement
  2771 ;;		_main
  2772 ;; This function uses a non-reentrant model
  2773 ;;
  2774                           
  2775                           	psect	text10
  2776  002DE2                     __ptext10:
  2777                           	opt stack 0
  2778  002DE2                     _writeCMD:
  2779                           	opt stack 26
  2780                           
  2781                           ;incstack = 0
  2782                           ;writeCMD@cmd stored from wreg
  2783  002DE2  6E1A               	movwf	writeCMD@cmd,c
  2784                           
  2785                           ;temp.c: 56: LATBbits.LATB3 = 0;
  2786  002DE4  968A               	bcf	3978,3,c	;volatile
  2787                           
  2788                           ;temp.c: 57: LATBbits.LATB4 = 0;
  2789  002DE6  988A               	bcf	3978,4,c	;volatile
  2790                           
  2791                           ;temp.c: 58: _delay((unsigned long)((5)*(1000000/4000000.0)));
  2792  002DE8  F000               	nop	
  2793                           
  2794                           ;temp.c: 59: for (int i = 7; i>=0 ; i--)
  2795  002DEA  0E00               	movlw	0
  2796  002DEC  6E1C               	movwf	writeCMD@i+1,c
  2797  002DEE  0E07               	movlw	7
  2798  002DF0  6E1B               	movwf	writeCMD@i,c
  2799  002DF2                     l2826:
  2800  002DF2  BE1C               	btfsc	writeCMD@i+1,7,c
  2801  002DF4  D019               	goto	u2860
  2802                           
  2803                           ;temp.c: 60: {
  2804                           ;temp.c: 61: LATCbits.LATC5 = (cmd >> i) & 1;
  2805  002DF6  C01B  F018         	movff	writeCMD@i,??_writeCMD
  2806  002DFA  C01A  F019         	movff	writeCMD@cmd,??_writeCMD+1
  2807  002DFE  2A18               	incf	??_writeCMD,f,c
  2808  002E00  D002               	goto	u2854
  2809  002E02                     u2855:
  2810  002E02  90D8               	bcf	status,0,c
  2811  002E04  3219               	rrcf	??_writeCMD+1,f,c
  2812  002E06                     u2854:
  2813  002E06  2E18               	decfsz	??_writeCMD,f,c
  2814  002E08  D7FC               	goto	u2855
  2815  002E0A  0E01               	movlw	1
  2816  002E0C  1619               	andwf	??_writeCMD+1,f,c
  2817  002E0E  3A19               	swapf	??_writeCMD+1,f,c
  2818  002E10  4619               	rlncf	??_writeCMD+1,f,c
  2819  002E12  508B               	movf	3979,w,c	;volatile
  2820  002E14  1819               	xorwf	??_writeCMD+1,w,c
  2821  002E16  0BDF               	andlw	-33
  2822  002E18  1819               	xorwf	??_writeCMD+1,w,c
  2823  002E1A  6E8B               	movwf	3979,c	;volatile
  2824                           
  2825                           ;temp.c: 62: LATCbits.LATC6 = 0;
  2826  002E1C  9C8B               	bcf	3979,6,c	;volatile
  2827                           
  2828                           ;temp.c: 63: LATCbits.LATC6 = 1;
  2829  002E1E  8C8B               	bsf	3979,6,c	;volatile
  2830  002E20  061B               	decf	writeCMD@i,f,c
  2831  002E22  A0D8               	btfss	status,0,c
  2832  002E24  061C               	decf	writeCMD@i+1,f,c
  2833  002E26  D7E5               	goto	l2826
  2834  002E28                     u2860:
  2835                           
  2836                           ;temp.c: 65: }
  2837                           ;temp.c: 66: switchE();
  2838  002E28  ECE9  F017         	call	_switchE	;wreg free
  2839                           
  2840                           ;temp.c: 67: _delay((unsigned long)((5)*(1000000/4000000.0)));
  2841  002E2C  F000               	nop	
  2842  002E2E  0012               	return		;funcret
  2843  002E30                     __end_of_writeCMD:
  2844                           	opt stack 0
  2845                           tblptru	equ	0xFF8
  2846                           tblptrh	equ	0xFF7
  2847                           tblptrl	equ	0xFF6
  2848                           tablat	equ	0xFF5
  2849                           intcon	equ	0xFF2
  2850                           intcon2	equ	0xFF1
  2851                           indf0	equ	0xFEF
  2852                           postinc0	equ	0xFEE
  2853                           fsr0h	equ	0xFEA
  2854                           fsr0l	equ	0xFE9
  2855                           wreg	equ	0xFE8
  2856                           status	equ	0xFD8
  2857                           
  2858 ;; *************** function _switchE *****************
  2859 ;; Defined at:
  2860 ;;		line 32 in file "temp.c"
  2861 ;; Parameters:    Size  Location     Type
  2862 ;;		None
  2863 ;; Auto vars:     Size  Location     Type
  2864 ;;		None
  2865 ;; Return value:  Size  Location     Type
  2866 ;;                  1    wreg      void 
  2867 ;; Registers used:
  2868 ;;		wreg
  2869 ;; Tracked objects:
  2870 ;;		On entry : 0/0
  2871 ;;		On exit  : 0/0
  2872 ;;		Unchanged: 0/0
  2873 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2874 ;;      Params:         0       0       0       0       0       0       0
  2875 ;;      Locals:         0       0       0       0       0       0       0
  2876 ;;      Temps:          1       0       0       0       0       0       0
  2877 ;;      Totals:         1       0       0       0       0       0       0
  2878 ;;Total ram usage:        1 bytes
  2879 ;; Hardware stack levels used:    1
  2880 ;; Hardware stack levels required when called:    3
  2881 ;; This function calls:
  2882 ;;		Nothing
  2883 ;; This function is called by:
  2884 ;;		_writeChar
  2885 ;;		_writeCMD
  2886 ;; This function uses a non-reentrant model
  2887 ;;
  2888                           
  2889                           	psect	text11
  2890  002FD2                     __ptext11:
  2891                           	opt stack 0
  2892  002FD2                     _switchE:
  2893                           	opt stack 25
  2894                           
  2895                           ;temp.c: 33: LATBbits.LATB5=1;
  2896                           
  2897                           ;incstack = 0
  2898  002FD2  8A8A               	bsf	3978,5,c	;volatile
  2899                           
  2900                           ;temp.c: 34: _delay((unsigned long)((10)*(1000000/4000.0)));
  2901  002FD4  0E04               	movlw	4
  2902  002FD6  6E17               	movwf	??_switchE& (0+255),c
  2903  002FD8  0E3E               	movlw	62
  2904  002FDA                     u4927:
  2905  002FDA  2EE8               	decfsz	wreg,f,c
  2906  002FDC  D7FE               	bra	u4927
  2907  002FDE  2E17               	decfsz	??_switchE& (0+255),f,c
  2908  002FE0  D7FC               	bra	u4927
  2909                           
  2910                           ;temp.c: 35: LATBbits.LATB5=0;
  2911  002FE2  9A8A               	bcf	3978,5,c	;volatile
  2912                           
  2913                           ;temp.c: 36: _delay((unsigned long)((10)*(1000000/4000.0)));
  2914  002FE4  0E04               	movlw	4
  2915  002FE6  6E17               	movwf	??_switchE& (0+255),c
  2916  002FE8  0E3E               	movlw	62
  2917  002FEA                     u4937:
  2918  002FEA  2EE8               	decfsz	wreg,f,c
  2919  002FEC  D7FE               	bra	u4937
  2920  002FEE  2E17               	decfsz	??_switchE& (0+255),f,c
  2921  002FF0  D7FC               	bra	u4937
  2922  002FF2  0012               	return		;funcret
  2923  002FF4                     __end_of_switchE:
  2924                           	opt stack 0
  2925                           tblptru	equ	0xFF8
  2926                           tblptrh	equ	0xFF7
  2927                           tblptrl	equ	0xFF6
  2928                           tablat	equ	0xFF5
  2929                           intcon	equ	0xFF2
  2930                           intcon2	equ	0xFF1
  2931                           indf0	equ	0xFEF
  2932                           postinc0	equ	0xFEE
  2933                           fsr0h	equ	0xFEA
  2934                           fsr0l	equ	0xFE9
  2935                           wreg	equ	0xFE8
  2936                           status	equ	0xFD8
  2937                           
  2938 ;; *************** function _strcpy *****************
  2939 ;; Defined at:
  2940 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\strcpy.c"
  2941 ;; Parameters:    Size  Location     Type
  2942 ;;  to              2   22[COMRAM] PTR unsigned char 
  2943 ;;		 -> salinityMeasurement@str2(16), salinityMeasurement@str(16), carbonMeasurement@str2(16), carbonMeasurement@str(16)
      +, 
  2944 ;;		 -> temperatureMeasurementF@str2(16), temperatureMeasurementF@str(16), temperatureMeasurementC@str2(16), temperature
      +MeasurementC@str(16), 
  2945 ;;  from            2   24[COMRAM] PTR const unsigned char 
  2946 ;;		 -> STR_12(14), STR_10(17), STR_9(14), STR_7(16), 
  2947 ;;		 -> STR_6(15), STR_4(17), STR_3(15), STR_1(17), 
  2948 ;; Auto vars:     Size  Location     Type
  2949 ;;  cp              2   26[COMRAM] PTR unsigned char 
  2950 ;;		 -> salinityMeasurement@str2(16), salinityMeasurement@str(16), carbonMeasurement@str2(16), carbonMeasurement@str(16)
      +, 
  2951 ;;		 -> temperatureMeasurementF@str2(16), temperatureMeasurementF@str(16), temperatureMeasurementC@str2(16), temperature
      +MeasurementC@str(16), 
  2952 ;; Return value:  Size  Location     Type
  2953 ;;                  2   22[COMRAM] PTR unsigned char 
  2954 ;; Registers used:
  2955 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  2956 ;; Tracked objects:
  2957 ;;		On entry : 0/0
  2958 ;;		On exit  : 0/0
  2959 ;;		Unchanged: 0/0
  2960 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2961 ;;      Params:         4       0       0       0       0       0       0
  2962 ;;      Locals:         2       0       0       0       0       0       0
  2963 ;;      Temps:          0       0       0       0       0       0       0
  2964 ;;      Totals:         6       0       0       0       0       0       0
  2965 ;;Total ram usage:        6 bytes
  2966 ;; Hardware stack levels used:    1
  2967 ;; Hardware stack levels required when called:    3
  2968 ;; This function calls:
  2969 ;;		Nothing
  2970 ;; This function is called by:
  2971 ;;		_temperatureMeasurementC
  2972 ;;		_temperatureMeasurementF
  2973 ;;		_carbonMeasurement
  2974 ;;		_salinityMeasurement
  2975 ;; This function uses a non-reentrant model
  2976 ;;
  2977                           
  2978                           	psect	text12
  2979  002F58                     __ptext12:
  2980                           	opt stack 0
  2981  002F58                     _strcpy:
  2982                           	opt stack 26
  2983                           
  2984                           ;incstack = 0
  2985  002F58  C017  F01B         	movff	strcpy@to,strcpy@cp
  2986  002F5C  C018  F01C         	movff	strcpy@to+1,strcpy@cp+1
  2987  002F60  D004               	goto	l898
  2988  002F62  4A1B               	infsnz	strcpy@cp,f,c
  2989  002F64  2A1C               	incf	strcpy@cp+1,f,c
  2990  002F66  4A19               	infsnz	strcpy@from,f,c
  2991  002F68  2A1A               	incf	strcpy@from+1,f,c
  2992  002F6A                     l898:
  2993  002F6A  C019  FFF6         	movff	strcpy@from,tblptrl
  2994  002F6E  C01A  FFF7         	movff	strcpy@from+1,tblptrh
  2995  002F72                     	if	0	;tblptru may be non-zero
  2996  002F72                     	endif
  2997  002F72                     	if	0	;tblptru may be non-zero
  2998  002F72                     	endif
  2999  002F72  C01B  FFD9         	movff	strcpy@cp,fsr2l
  3000  002F76  C01C  FFDA         	movff	strcpy@cp+1,fsr2h
  3001  002F7A  0008               	tblrd		*
  3002  002F7C  CFF5 FFDF          	movff	tablat,indf2
  3003  002F80  50DF               	movf	indf2,w,c
  3004  002F82  B4D8               	btfsc	status,2,c
  3005  002F84  0012               	return	
  3006  002F86  D7ED               	goto	l899
  3007  002F88                     __end_of_strcpy:
  3008                           	opt stack 0
  3009                           tblptru	equ	0xFF8
  3010                           tblptrh	equ	0xFF7
  3011                           tblptrl	equ	0xFF6
  3012                           tablat	equ	0xFF5
  3013                           intcon	equ	0xFF2
  3014                           intcon2	equ	0xFF1
  3015                           indf0	equ	0xFEF
  3016                           postinc0	equ	0xFEE
  3017                           fsr0h	equ	0xFEA
  3018                           fsr0l	equ	0xFE9
  3019                           wreg	equ	0xFE8
  3020                           indf2	equ	0xFDF
  3021                           fsr2h	equ	0xFDA
  3022                           fsr2l	equ	0xFD9
  3023                           status	equ	0xFD8
  3024                           
  3025 ;; *************** function _sprintf *****************
  3026 ;; Defined at:
  3027 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\doprnt.c"
  3028 ;; Parameters:    Size  Location     Type
  3029 ;;  sp              2   52[BANK0 ] PTR unsigned char 
  3030 ;;		 -> salinityMeasurement@str1(16), carbonMeasurement@str1(16), temperatureMeasurementF@str1(16), temperatureMeasureme
      +ntC@str1(16), 
  3031 ;;  f               2   54[BANK0 ] PTR const unsigned char 
  3032 ;;		 -> STR_11(6), STR_8(6), STR_5(3), STR_2(3), 
  3033 ;; Auto vars:     Size  Location     Type
  3034 ;;  val             4   74[BANK0 ] unsigned long 
  3035 ;;  tmpval          4   70[BANK0 ] struct .
  3036 ;;  fval            3   84[BANK0 ] struct .
  3037 ;;  cp              3    0        PTR const unsigned char 
  3038 ;;  prec            2   87[BANK0 ] int 
  3039 ;;  width           2   82[BANK0 ] int 
  3040 ;;  flag            2   80[BANK0 ] unsigned short 
  3041 ;;  exp             2   78[BANK0 ] int 
  3042 ;;  ap              2   68[BANK0 ] PTR void [1]
  3043 ;;		 -> ?_sprintf(2), 
  3044 ;;  len             2    0        unsigned int 
  3045 ;;  c               1   89[BANK0 ] char 
  3046 ;;  d               1    0        unsigned char 
  3047 ;; Return value:  Size  Location     Type
  3048 ;;                  2   52[BANK0 ] int 
  3049 ;; Registers used:
  3050 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3051 ;; Tracked objects:
  3052 ;;		On entry : 0/0
  3053 ;;		On exit  : 0/0
  3054 ;;		Unchanged: 0/0
  3055 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3056 ;;      Params:         0       7       0       0       0       0       0
  3057 ;;      Locals:         0      25       0       0       0       0       0
  3058 ;;      Temps:          0       6       0       0       0       0       0
  3059 ;;      Totals:         0      38       0       0       0       0       0
  3060 ;;Total ram usage:       38 bytes
  3061 ;; Hardware stack levels used:    1
  3062 ;; Hardware stack levels required when called:    6
  3063 ;; This function calls:
  3064 ;;		___awdiv
  3065 ;;		___ftadd
  3066 ;;		___ftge
  3067 ;;		___ftmul
  3068 ;;		___ftneg
  3069 ;;		___ftsub
  3070 ;;		___fttol
  3071 ;;		___lldiv
  3072 ;;		___llmod
  3073 ;;		___lltoft
  3074 ;;		___wmul
  3075 ;;		__div_to_l_
  3076 ;;		__tdiv_to_l_
  3077 ;;		_fround
  3078 ;;		_isdigit
  3079 ;;		_scale
  3080 ;; This function is called by:
  3081 ;;		_temperatureMeasurementC
  3082 ;;		_temperatureMeasurementF
  3083 ;;		_carbonMeasurement
  3084 ;;		_salinityMeasurement
  3085 ;; This function uses a non-reentrant model
  3086 ;;
  3087                           
  3088                           	psect	text13
  3089  0006FA                     __ptext13:
  3090                           	opt stack 0
  3091  0006FA                     _sprintf:
  3092                           	opt stack 23
  3093                           
  3094                           ;doprnt.c: 494: va_list ap;
  3095                           ;doprnt.c: 499: signed char c;
  3096                           ;doprnt.c: 501: int width;
  3097                           ;doprnt.c: 504: int prec;
  3098                           ;doprnt.c: 508: unsigned short flag;
  3099                           ;doprnt.c: 515: char d;
  3100                           ;doprnt.c: 516: double fval;
  3101                           ;doprnt.c: 517: int exp;
  3102                           ;doprnt.c: 523: union {
  3103                           ;doprnt.c: 524: unsigned long vd;
  3104                           ;doprnt.c: 525: double integ;
  3105                           ;doprnt.c: 526: } tmpval;
  3106                           ;doprnt.c: 528: unsigned long val;
  3107                           ;doprnt.c: 529: unsigned len;
  3108                           ;doprnt.c: 530: const char * cp;
  3109                           ;doprnt.c: 533: *ap = __va_start();
  3110                           
  3111                           ;incstack = 0
  3112  0006FA  0E98               	movlw	low (?_sprintf+4)
  3113  0006FC  0100               	movlb	0	; () banked
  3114  0006FE  6FA4               	movwf	sprintf@ap& (0+255),b
  3115  000700  0E00               	movlw	high (?_sprintf+4)
  3116  000702  0100               	movlb	0	; () banked
  3117  000704  6FA5               	movwf	(sprintf@ap+1)& (0+255),b
  3118                           
  3119                           ;doprnt.c: 536: while(c = *f++) {
  3120  000706  EF93  F009         	goto	u4720
  3121  00070A                     
  3122                           ; BSR set to: 0
  3123                           ;doprnt.c: 538: if(c != '%')
  3124                           
  3125                           ; BSR set to: 0
  3126  00070A  0E25               	movlw	37
  3127  00070C  0100               	movlb	0	; () banked
  3128  00070E  19B9               	xorwf	sprintf@c& (0+255),w,b
  3129  000710  B4D8               	btfsc	status,2,c
  3130  000712  D00B               	goto	l207
  3131                           
  3132                           ; BSR set to: 0
  3133                           ;doprnt.c: 540: {
  3134                           ;doprnt.c: 541: ((*sp++ = (c)));
  3135  000714  C094  FFD9         	movff	sprintf@sp,fsr2l
  3136  000718  C095  FFDA         	movff	sprintf@sp+1,fsr2h
  3137  00071C  C0B9  FFDF         	movff	sprintf@c,indf2
  3138                           
  3139                           ; BSR set to: 0
  3140  000720  0100               	movlb	0	; () banked
  3141  000722  4B94               	infsnz	sprintf@sp& (0+255),f,b
  3142  000724  2B95               	incf	(sprintf@sp+1)& (0+255),f,b
  3143                           
  3144                           ;doprnt.c: 542: continue;
  3145  000726  EF93  F009         	goto	u4720
  3146  00072A                     l207:
  3147                           
  3148                           ; BSR set to: 0
  3149                           ;doprnt.c: 543: }
  3150                           ;doprnt.c: 546: width = 0;
  3151                           
  3152                           ; BSR set to: 0
  3153  00072A  0E00               	movlw	0
  3154  00072C  0100               	movlb	0	; () banked
  3155  00072E  6FB3               	movwf	(sprintf@width+1)& (0+255),b
  3156  000730  0E00               	movlw	0
  3157  000732  6FB2               	movwf	sprintf@width& (0+255),b
  3158                           
  3159                           ;doprnt.c: 548: flag = 0;
  3160  000734  0E00               	movlw	0
  3161  000736  0100               	movlb	0	; () banked
  3162  000738  6FB1               	movwf	(sprintf@flag+1)& (0+255),b
  3163  00073A  0E00               	movlw	0
  3164  00073C  6FB0               	movwf	sprintf@flag& (0+255),b
  3165                           
  3166                           ; BSR set to: 0
  3167                           ;doprnt.c: 551: switch(*f) {
  3168                           
  3169                           ;doprnt.c: 550: for(;;) {
  3170  00073E  D005               	goto	l209
  3171  000740                     
  3172                           ;doprnt.c: 580: flag |= 0x04;
  3173                           
  3174                           ; BSR set to: 0
  3175  000740  0100               	movlb	0	; () banked
  3176  000742  85B0               	bsf	sprintf@flag& (0+255),2,b
  3177                           
  3178                           ;doprnt.c: 581: f++;
  3179  000744  0100               	movlb	0	; () banked
  3180  000746  4B96               	infsnz	sprintf@f& (0+255),f,b
  3181  000748  2B97               	incf	(sprintf@f+1)& (0+255),f,b
  3182  00074A                     l209:
  3183                           
  3184                           ; BSR set to: 0
  3185  00074A  C096  FFF6         	movff	sprintf@f,tblptrl
  3186  00074E  C097  FFF7         	movff	sprintf@f+1,tblptrh
  3187  000752                     	if	0	;tblptru may be non-zero
  3188  000752                     	endif
  3189  000752                     	if	0	;tblptru may be non-zero
  3190  000752                     	endif
  3191  000752  0008               	tblrd		*
  3192  000754  50F5               	movf	tablat,w,c
  3193                           
  3194                           ; Switch size 1, requested type "space"
  3195                           ; Number of cases is 1, Range of values is 48 to 48
  3196                           ; switch strategies available:
  3197                           ; Name         Instructions Cycles
  3198                           ; simple_byte            4     3 (average)
  3199                           ;	Chosen strategy is simple_byte
  3200  000756  0A30               	xorlw	48	; case 48
  3201  000758  B4D8               	btfsc	status,2,c
  3202  00075A  D7F2               	goto	l210
  3203                           
  3204                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  3205                           
  3206                           ;doprnt.c: 586: }
  3207                           
  3208                           ;doprnt.c: 585: break;
  3209  00075C  C096  FFF6         	movff	sprintf@f,tblptrl
  3210  000760  C097  FFF7         	movff	sprintf@f+1,tblptrh
  3211  000764                     	if	0	;tblptru may be non-zero
  3212  000764                     	endif
  3213  000764                     	if	0	;tblptru may be non-zero
  3214  000764                     	endif
  3215  000764  0008               	tblrd		*
  3216  000766  50F5               	movf	tablat,w,c
  3217  000768  ECFA  F017         	call	_isdigit
  3218  00076C  A0D8               	btfss	status,0,c
  3219  00076E  D03F               	goto	u4190
  3220                           
  3221                           ;doprnt.c: 598: width = 0;
  3222  000770  0E00               	movlw	0
  3223  000772  0100               	movlb	0	; () banked
  3224  000774  6FB3               	movwf	(sprintf@width+1)& (0+255),b
  3225  000776  0E00               	movlw	0
  3226  000778  6FB2               	movwf	sprintf@width& (0+255),b
  3227  00077A                     
  3228                           ;doprnt.c: 600: width *= 10;
  3229                           
  3230                           ; BSR set to: 0
  3231  00077A  C0B2  F025         	movff	sprintf@width,___wmul@multiplier
  3232  00077E  C0B3  F026         	movff	sprintf@width+1,___wmul@multiplier+1
  3233  000782  0E00               	movlw	0
  3234  000784  6E28               	movwf	___wmul@multiplicand+1,c
  3235  000786  0E0A               	movlw	10
  3236  000788  6E27               	movwf	___wmul@multiplicand,c
  3237  00078A  ECC4  F017         	call	___wmul	;wreg free
  3238  00078E  C025  F0B2         	movff	?___wmul,sprintf@width
  3239  000792  C026  F0B3         	movff	?___wmul+1,sprintf@width+1
  3240                           
  3241                           ;doprnt.c: 601: width += *f++ - '0';
  3242  000796  0ED0               	movlw	208
  3243  000798  0100               	movlb	0	; () banked
  3244  00079A  6F9B               	movwf	??_sprintf& (0+255),b
  3245  00079C  0EFF               	movlw	255
  3246  00079E  0100               	movlb	0	; () banked
  3247  0007A0  6F9C               	movwf	(??_sprintf+1)& (0+255),b
  3248  0007A2  C096  FFF6         	movff	sprintf@f,tblptrl
  3249  0007A6  C097  FFF7         	movff	sprintf@f+1,tblptrh
  3250  0007AA                     	if	0	;tblptru may be non-zero
  3251  0007AA                     	endif
  3252  0007AA                     	if	0	;tblptru may be non-zero
  3253  0007AA                     	endif
  3254  0007AA  0008               	tblrd		*
  3255  0007AC  50F5               	movf	tablat,w,c
  3256  0007AE  0100               	movlb	0	; () banked
  3257  0007B0  6F9D               	movwf	(??_sprintf+2)& (0+255),b
  3258  0007B2  6B9E               	clrf	(??_sprintf+3)& (0+255),b
  3259  0007B4  0100               	movlb	0	; () banked
  3260  0007B6  519B               	movf	??_sprintf& (0+255),w,b
  3261  0007B8  0100               	movlb	0	; () banked
  3262  0007BA  279D               	addwf	(??_sprintf+2)& (0+255),f,b
  3263  0007BC  0100               	movlb	0	; () banked
  3264  0007BE  519C               	movf	(??_sprintf+1)& (0+255),w,b
  3265  0007C0  0100               	movlb	0	; () banked
  3266  0007C2  239E               	addwfc	(??_sprintf+3)& (0+255),f,b
  3267  0007C4  0100               	movlb	0	; () banked
  3268  0007C6  519D               	movf	(??_sprintf+2)& (0+255),w,b
  3269  0007C8  0100               	movlb	0	; () banked
  3270  0007CA  27B2               	addwf	sprintf@width& (0+255),f,b
  3271  0007CC  0100               	movlb	0	; () banked
  3272  0007CE  519E               	movf	(??_sprintf+3)& (0+255),w,b
  3273  0007D0  0100               	movlb	0	; () banked
  3274  0007D2  23B3               	addwfc	(sprintf@width+1)& (0+255),f,b
  3275                           
  3276                           ; BSR set to: 0
  3277  0007D4  0100               	movlb	0	; () banked
  3278  0007D6  4B96               	infsnz	sprintf@f& (0+255),f,b
  3279  0007D8  2B97               	incf	(sprintf@f+1)& (0+255),f,b
  3280                           
  3281                           ; BSR set to: 0
  3282                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  3283  0007DA  C096  FFF6         	movff	sprintf@f,tblptrl
  3284  0007DE  C097  FFF7         	movff	sprintf@f+1,tblptrh
  3285  0007E2                     	if	0	;tblptru may be non-zero
  3286  0007E2                     	endif
  3287  0007E2                     	if	0	;tblptru may be non-zero
  3288  0007E2                     	endif
  3289  0007E2  0008               	tblrd		*
  3290  0007E4  50F5               	movf	tablat,w,c
  3291  0007E6  ECFA  F017         	call	_isdigit
  3292  0007EA  B0D8               	btfsc	status,0,c
  3293  0007EC  D7C6               	goto	l215
  3294  0007EE                     u4190:
  3295                           
  3296                           ;doprnt.c: 608: }
  3297                           ;doprnt.c: 611: if(*f == '.') {
  3298  0007EE  C096  FFF6         	movff	sprintf@f,tblptrl
  3299  0007F2  C097  FFF7         	movff	sprintf@f+1,tblptrh
  3300  0007F6                     	if	0	;tblptru may be non-zero
  3301  0007F6                     	endif
  3302  0007F6                     	if	0	;tblptru may be non-zero
  3303  0007F6                     	endif
  3304  0007F6  0008               	tblrd		*
  3305  0007F8  50F5               	movf	tablat,w,c
  3306  0007FA  0A2E               	xorlw	46
  3307  0007FC  A4D8               	btfss	status,2,c
  3308  0007FE  D034               	goto	l217
  3309                           
  3310                           ;doprnt.c: 612: flag |= 0x4000;
  3311  000800  0100               	movlb	0	; () banked
  3312  000802  8DB1               	bsf	(sprintf@flag+1)& (0+255),6,b
  3313                           
  3314                           ;doprnt.c: 613: f++;
  3315  000804  0100               	movlb	0	; () banked
  3316  000806  4B96               	infsnz	sprintf@f& (0+255),f,b
  3317  000808  2B97               	incf	(sprintf@f+1)& (0+255),f,b
  3318                           
  3319                           ; BSR set to: 0
  3320                           ;doprnt.c: 620: {
  3321                           ;doprnt.c: 621: prec = 0;
  3322  00080A  0E00               	movlw	0
  3323  00080C  0100               	movlb	0	; () banked
  3324  00080E  6FB8               	movwf	(sprintf@prec+1)& (0+255),b
  3325  000810  0E00               	movlw	0
  3326  000812  6FB7               	movwf	sprintf@prec& (0+255),b
  3327                           
  3328                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  3329  000814  D01E               	goto	l218
  3330  000816                     
  3331                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  3332                           
  3333                           ; BSR set to: 0
  3334  000816  C0B7  F025         	movff	sprintf@prec,___wmul@multiplier
  3335  00081A  C0B8  F026         	movff	sprintf@prec+1,___wmul@multiplier+1
  3336  00081E  0E00               	movlw	0
  3337  000820  6E28               	movwf	___wmul@multiplicand+1,c
  3338  000822  0E0A               	movlw	10
  3339  000824  6E27               	movwf	___wmul@multiplicand,c
  3340  000826  ECC4  F017         	call	___wmul	;wreg free
  3341  00082A  C096  FFF6         	movff	sprintf@f,tblptrl
  3342  00082E  C097  FFF7         	movff	sprintf@f+1,tblptrh
  3343  000832                     	if	0	;tblptru may be non-zero
  3344  000832                     	endif
  3345  000832                     	if	0	;tblptru may be non-zero
  3346  000832                     	endif
  3347  000832  0008               	tblrd		*
  3348  000834  50F5               	movf	tablat,w,c
  3349  000836  2625               	addwf	?___wmul,f,c
  3350  000838  0E00               	movlw	0
  3351  00083A  2226               	addwfc	?___wmul+1,f,c
  3352  00083C  0ED0               	movlw	208
  3353  00083E  2425               	addwf	?___wmul,w,c
  3354  000840  0100               	movlb	0	; () banked
  3355  000842  6FB7               	movwf	sprintf@prec& (0+255),b
  3356  000844  0EFF               	movlw	255
  3357  000846  2026               	addwfc	?___wmul+1,w,c
  3358  000848  0100               	movlb	0	; () banked
  3359  00084A  6FB8               	movwf	(sprintf@prec+1)& (0+255),b
  3360                           
  3361                           ; BSR set to: 0
  3362  00084C  0100               	movlb	0	; () banked
  3363  00084E  4B96               	infsnz	sprintf@f& (0+255),f,b
  3364  000850  2B97               	incf	(sprintf@f+1)& (0+255),f,b
  3365  000852                     l218:
  3366                           
  3367                           ; BSR set to: 0
  3368                           
  3369                           ; BSR set to: 0
  3370  000852  C096  FFF6         	movff	sprintf@f,tblptrl
  3371  000856  C097  FFF7         	movff	sprintf@f+1,tblptrh
  3372  00085A                     	if	0	;tblptru may be non-zero
  3373  00085A                     	endif
  3374  00085A                     	if	0	;tblptru may be non-zero
  3375  00085A                     	endif
  3376  00085A  0008               	tblrd		*
  3377  00085C  50F5               	movf	tablat,w,c
  3378  00085E  ECFA  F017         	call	_isdigit
  3379  000862  A0D8               	btfss	status,0,c
  3380  000864  D00C               	goto	l222
  3381  000866  D7D7               	goto	l219
  3382  000868                     l217:
  3383                           
  3384                           ;doprnt.c: 626: prec = 0;
  3385  000868  0E00               	movlw	0
  3386  00086A  0100               	movlb	0	; () banked
  3387  00086C  6FB8               	movwf	(sprintf@prec+1)& (0+255),b
  3388  00086E  0E00               	movlw	0
  3389  000870  6FB7               	movwf	sprintf@prec& (0+255),b
  3390                           
  3391                           ; BSR set to: 0
  3392                           ;doprnt.c: 628: flag |= 0x1000;
  3393  000872  0100               	movlb	0	; () banked
  3394  000874  89B1               	bsf	(sprintf@flag+1)& (0+255),4,b
  3395                           
  3396                           ; BSR set to: 0
  3397                           ;doprnt.c: 630: }
  3398                           ;doprnt.c: 635: switch(c = *f++) {
  3399  000876  D003               	goto	l222
  3400  000878                     
  3401                           ; BSR set to: 0
  3402                           ;doprnt.c: 663: flag |= 0x400;
  3403                           
  3404                           ; BSR set to: 0
  3405  000878  0100               	movlb	0	; () banked
  3406  00087A  85B1               	bsf	(sprintf@flag+1)& (0+255),2,b
  3407                           
  3408                           ; BSR set to: 0
  3409                           ;doprnt.c: 698: case 'i':
  3410                           ;doprnt.c: 699: break;
  3411                           
  3412                           ; BSR set to: 0
  3413                           
  3414                           ;doprnt.c: 697: case 'd':
  3415                           
  3416                           ;doprnt.c: 664: break;
  3417  00087C  D01A               	goto	l226
  3418  00087E                     l222:
  3419                           
  3420                           ; BSR set to: 0
  3421  00087E  C096  FFF6         	movff	sprintf@f,tblptrl
  3422  000882  C097  FFF7         	movff	sprintf@f+1,tblptrh
  3423  000886  0100               	movlb	0	; () banked
  3424  000888  4B96               	infsnz	sprintf@f& (0+255),f,b
  3425  00088A  2B97               	incf	(sprintf@f+1)& (0+255),f,b
  3426  00088C                     	if	0	;tblptru may be non-zero
  3427  00088C                     	endif
  3428  00088C                     	if	0	;tblptru may be non-zero
  3429  00088C                     	endif
  3430  00088C  0008               	tblrd		*
  3431  00088E  CFF5 F0B9          	movff	tablat,sprintf@c
  3432  000892  0100               	movlb	0	; () banked
  3433  000894  51B9               	movf	sprintf@c& (0+255),w,b
  3434                           
  3435                           ; Switch size 1, requested type "space"
  3436                           ; Number of cases is 4, Range of values is 0 to 105
  3437                           ; switch strategies available:
  3438                           ; Name         Instructions Cycles
  3439                           ; simple_byte           13     7 (average)
  3440                           ;	Chosen strategy is simple_byte
  3441  000896  0A00               	xorlw	0	; case 0
  3442  000898  B4D8               	btfsc	status,2,c
  3443  00089A  EFA2  F009         	goto	u4730
  3444  00089E  0A64               	xorlw	100	; case 100
  3445  0008A0  B4D8               	btfsc	status,2,c
  3446  0008A2  D007               	goto	l226
  3447  0008A4  0A02               	xorlw	2	; case 102
  3448  0008A6  B4D8               	btfsc	status,2,c
  3449  0008A8  D7E7               	goto	l225
  3450  0008AA  0A0F               	xorlw	15	; case 105
  3451  0008AC  A4D8               	btfss	status,2,c
  3452  0008AE  EF93  F009         	goto	u4720
  3453  0008B2                     l226:
  3454                           
  3455                           ; BSR set to: 0
  3456                           ;doprnt.c: 825: if(flag & (0x700)) {
  3457                           
  3458                           ; BSR set to: 0
  3459  0008B2  0E07               	movlw	7
  3460  0008B4  0100               	movlb	0	; () banked
  3461  0008B6  15B1               	andwf	(sprintf@flag+1)& (0+255),w,b
  3462  0008B8  B4D8               	btfsc	status,2,c
  3463  0008BA  D39F               	goto	l230
  3464                           
  3465                           ; BSR set to: 0
  3466                           ;doprnt.c: 827: if(flag & 0x1000)
  3467  0008BC  0100               	movlb	0	; () banked
  3468  0008BE  A9B1               	btfss	(sprintf@flag+1)& (0+255),4,b
  3469  0008C0  D005               	goto	l231
  3470                           
  3471                           ; BSR set to: 0
  3472                           ;doprnt.c: 829: prec = 6;
  3473  0008C2  0E00               	movlw	0
  3474  0008C4  0100               	movlb	0	; () banked
  3475  0008C6  6FB8               	movwf	(sprintf@prec+1)& (0+255),b
  3476  0008C8  0E06               	movlw	6
  3477  0008CA  6FB7               	movwf	sprintf@prec& (0+255),b
  3478  0008CC                     l231:
  3479                           
  3480                           ; BSR set to: 0
  3481                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  3482                           
  3483                           ; BSR set to: 0
  3484  0008CC  C0A4  FFD9         	movff	sprintf@ap,fsr2l
  3485  0008D0  C0A5  FFDA         	movff	sprintf@ap+1,fsr2h
  3486  0008D4  CFDE F0B4          	movff	postinc2,sprintf@fval
  3487  0008D8  CFDE F0B5          	movff	postinc2,sprintf@fval+1
  3488  0008DC  CFDD F0B6          	movff	postdec2,sprintf@fval+2
  3489                           
  3490                           ; BSR set to: 0
  3491  0008E0  0E03               	movlw	3
  3492  0008E2  0100               	movlb	0	; () banked
  3493  0008E4  27A4               	addwf	sprintf@ap& (0+255),f,b
  3494  0008E6  0E00               	movlw	0
  3495  0008E8  23A5               	addwfc	(sprintf@ap+1)& (0+255),f,b
  3496                           
  3497                           ; BSR set to: 0
  3498                           ;doprnt.c: 831: if(fval < 0.0) {
  3499  0008EA  0100               	movlb	0	; () banked
  3500  0008EC  AFB6               	btfss	(sprintf@fval+2)& (0+255),7,b
  3501  0008EE  D011               	goto	l232
  3502                           
  3503                           ; BSR set to: 0
  3504                           ;doprnt.c: 832: fval = -fval;
  3505  0008F0  C0B4  F017         	movff	sprintf@fval,___ftneg@f1
  3506  0008F4  C0B5  F018         	movff	sprintf@fval+1,___ftneg@f1+1
  3507  0008F8  C0B6  F019         	movff	sprintf@fval+2,___ftneg@f1+2
  3508  0008FC  ECD7  F017         	call	___ftneg	;wreg free
  3509  000900  C017  F0B4         	movff	?___ftneg,sprintf@fval
  3510  000904  C018  F0B5         	movff	?___ftneg+1,sprintf@fval+1
  3511  000908  C019  F0B6         	movff	?___ftneg+2,sprintf@fval+2
  3512                           
  3513                           ;doprnt.c: 833: flag |= 0x03;
  3514  00090C  0E03               	movlw	3
  3515  00090E  0100               	movlb	0	; () banked
  3516  000910  13B0               	iorwf	sprintf@flag& (0+255),f,b
  3517  000912                     l232:
  3518                           
  3519                           ; BSR set to: 0
  3520                           ;doprnt.c: 834: }
  3521                           ;doprnt.c: 835: exp = 0;
  3522                           
  3523                           ; BSR set to: 0
  3524  000912  0E00               	movlw	0
  3525  000914  0100               	movlb	0	; () banked
  3526  000916  6FAF               	movwf	(sprintf@exp+1)& (0+255),b
  3527  000918  0E00               	movlw	0
  3528  00091A  6FAE               	movwf	sprintf@exp& (0+255),b
  3529                           
  3530                           ; BSR set to: 0
  3531                           ;doprnt.c: 836: if( fval!=0) {
  3532  00091C  0100               	movlb	0	; () banked
  3533  00091E  51B4               	movf	sprintf@fval& (0+255),w,b
  3534  000920  0100               	movlb	0	; () banked
  3535  000922  11B5               	iorwf	(sprintf@fval+1)& (0+255),w,b
  3536  000924  0100               	movlb	0	; () banked
  3537  000926  11B6               	iorwf	(sprintf@fval+2)& (0+255),w,b
  3538  000928  B4D8               	btfsc	status,2,c
  3539  00092A  D091               	goto	l237
  3540                           
  3541                           ; BSR set to: 0
  3542                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  3543  00092C  0E82               	movlw	130
  3544  00092E  0100               	movlb	0	; () banked
  3545  000930  6F9B               	movwf	??_sprintf& (0+255),b
  3546  000932  0EFF               	movlw	255
  3547  000934  0100               	movlb	0	; () banked
  3548  000936  6F9C               	movwf	(??_sprintf+1)& (0+255),b
  3549  000938  C0B4  F09D         	movff	sprintf@fval,??_sprintf+2
  3550  00093C  C0B5  F09E         	movff	sprintf@fval+1,??_sprintf+3
  3551  000940  C0B6  F09F         	movff	sprintf@fval+2,??_sprintf+4
  3552  000944  C0B7  F0A0         	movff	sprintf@fval+3,??_sprintf+5
  3553  000948  0E10               	movlw	16
  3554  00094A  D006               	goto	u4260
  3555  00094C                     u4265:
  3556  00094C  0100               	movlb	0	; () banked
  3557  00094E  90D8               	bcf	status,0,c
  3558  000950  33A0               	rrcf	(??_sprintf+5)& (0+255),f,b
  3559  000952  339F               	rrcf	(??_sprintf+4)& (0+255),f,b
  3560  000954  339E               	rrcf	(??_sprintf+3)& (0+255),f,b
  3561  000956  339D               	rrcf	(??_sprintf+2)& (0+255),f,b
  3562  000958                     u4260:
  3563  000958  2EE8               	decfsz	wreg,f,c
  3564  00095A  D7F8               	goto	u4265
  3565  00095C  0100               	movlb	0	; () banked
  3566  00095E  519D               	movf	(??_sprintf+2)& (0+255),w,b
  3567  000960  0100               	movlb	0	; () banked
  3568  000962  259B               	addwf	??_sprintf& (0+255),w,b
  3569  000964  0100               	movlb	0	; () banked
  3570  000966  6FAE               	movwf	sprintf@exp& (0+255),b
  3571  000968  0E00               	movlw	0
  3572  00096A  0100               	movlb	0	; () banked
  3573  00096C  219C               	addwfc	(??_sprintf+1)& (0+255),w,b
  3574  00096E  0100               	movlb	0	; () banked
  3575  000970  6FAF               	movwf	(sprintf@exp+1)& (0+255),b
  3576                           
  3577                           ; BSR set to: 0
  3578                           ;doprnt.c: 838: exp--;
  3579  000972  0100               	movlb	0	; () banked
  3580  000974  07AE               	decf	sprintf@exp& (0+255),f,b
  3581  000976  A0D8               	btfss	status,0,c
  3582  000978  07AF               	decf	(sprintf@exp+1)& (0+255),f,b
  3583                           
  3584                           ; BSR set to: 0
  3585                           ;doprnt.c: 839: exp *= 3;
  3586  00097A  C0AE  F025         	movff	sprintf@exp,___wmul@multiplier
  3587  00097E  C0AF  F026         	movff	sprintf@exp+1,___wmul@multiplier+1
  3588  000982  0E00               	movlw	0
  3589  000984  6E28               	movwf	___wmul@multiplicand+1,c
  3590  000986  0E03               	movlw	3
  3591  000988  6E27               	movwf	___wmul@multiplicand,c
  3592  00098A  ECC4  F017         	call	___wmul	;wreg free
  3593  00098E  C025  F0AE         	movff	?___wmul,sprintf@exp
  3594  000992  C026  F0AF         	movff	?___wmul+1,sprintf@exp+1
  3595                           
  3596                           ;doprnt.c: 840: exp /= 10;
  3597  000996  C0AE  F01D         	movff	sprintf@exp,___awdiv@dividend
  3598  00099A  C0AF  F01E         	movff	sprintf@exp+1,___awdiv@dividend+1
  3599  00099E  0E00               	movlw	0
  3600  0009A0  6E20               	movwf	___awdiv@divisor+1,c
  3601  0009A2  0E0A               	movlw	10
  3602  0009A4  6E1F               	movwf	___awdiv@divisor,c
  3603  0009A6  EC57  F015         	call	___awdiv	;wreg free
  3604  0009AA  C01D  F0AE         	movff	?___awdiv,sprintf@exp
  3605  0009AE  C01E  F0AF         	movff	?___awdiv+1,sprintf@exp+1
  3606                           
  3607                           ;doprnt.c: 841: if(exp < 0)
  3608  0009B2  0100               	movlb	0	; () banked
  3609  0009B4  AFAF               	btfss	(sprintf@exp+1)& (0+255),7,b
  3610  0009B6  D004               	goto	l234
  3611                           
  3612                           ; BSR set to: 0
  3613                           ;doprnt.c: 842: exp--;
  3614  0009B8  0100               	movlb	0	; () banked
  3615  0009BA  07AE               	decf	sprintf@exp& (0+255),f,b
  3616  0009BC  A0D8               	btfss	status,0,c
  3617  0009BE  07AF               	decf	(sprintf@exp+1)& (0+255),f,b
  3618  0009C0                     l234:
  3619                           
  3620                           ; BSR set to: 0
  3621                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  3622                           
  3623                           ; BSR set to: 0
  3624  0009C0  0100               	movlb	0	; () banked
  3625  0009C2  51AE               	movf	sprintf@exp& (0+255),w,b
  3626  0009C4  0800               	sublw	0
  3627  0009C6  ECA9  F009         	call	_scale
  3628  0009CA  C07E  F0A6         	movff	?_scale,sprintf@tmpval
  3629  0009CE  C07F  F0A7         	movff	?_scale+1,sprintf@tmpval+1
  3630  0009D2  C080  F0A8         	movff	?_scale+2,sprintf@tmpval+2
  3631                           
  3632                           ;doprnt.c: 847: tmpval.integ *= fval;
  3633  0009D6  C0A6  F06F         	movff	sprintf@tmpval,___ftmul@f1
  3634  0009DA  C0A7  F070         	movff	sprintf@tmpval+1,___ftmul@f1+1
  3635  0009DE  C0A8  F071         	movff	sprintf@tmpval+2,___ftmul@f1+2
  3636  0009E2  C0B4  F072         	movff	sprintf@fval,___ftmul@f2
  3637  0009E6  C0B5  F073         	movff	sprintf@fval+1,___ftmul@f2+1
  3638  0009EA  C0B6  F074         	movff	sprintf@fval+2,___ftmul@f2+2
  3639  0009EE  EC23  F010         	call	___ftmul	;wreg free
  3640  0009F2  C06F  F0A6         	movff	?___ftmul,sprintf@tmpval
  3641  0009F6  C070  F0A7         	movff	?___ftmul+1,sprintf@tmpval+1
  3642  0009FA  C071  F0A8         	movff	?___ftmul+2,sprintf@tmpval+2
  3643                           
  3644                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  3645  0009FE  C0A6  F017         	movff	sprintf@tmpval,___ftge@ff1
  3646  000A02  C0A7  F018         	movff	sprintf@tmpval+1,___ftge@ff1+1
  3647  000A06  C0A8  F019         	movff	sprintf@tmpval+2,___ftge@ff1+2
  3648  000A0A  0E00               	movlw	0
  3649  000A0C  6E1A               	movwf	___ftge@ff2,c
  3650  000A0E  0E80               	movlw	128
  3651  000A10  6E1B               	movwf	___ftge@ff2+1,c
  3652  000A12  0E3F               	movlw	63
  3653  000A14  6E1C               	movwf	___ftge@ff2+2,c
  3654  000A16  ECCB  F014         	call	___ftge	;wreg free
  3655  000A1A  B0D8               	btfsc	status,0,c
  3656  000A1C  D005               	goto	l235
  3657                           
  3658                           ;doprnt.c: 849: exp--;
  3659  000A1E  0100               	movlb	0	; () banked
  3660  000A20  07AE               	decf	sprintf@exp& (0+255),f,b
  3661  000A22  A0D8               	btfss	status,0,c
  3662  000A24  07AF               	decf	(sprintf@exp+1)& (0+255),f,b
  3663  000A26  D013               	goto	l237
  3664  000A28                     l235:
  3665                           
  3666                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  3667                           
  3668                           ; BSR set to: 0
  3669  000A28  C0A6  F017         	movff	sprintf@tmpval,___ftge@ff1
  3670  000A2C  C0A7  F018         	movff	sprintf@tmpval+1,___ftge@ff1+1
  3671  000A30  C0A8  F019         	movff	sprintf@tmpval+2,___ftge@ff1+2
  3672  000A34  0E00               	movlw	0
  3673  000A36  6E1A               	movwf	___ftge@ff2,c
  3674  000A38  0E20               	movlw	32
  3675  000A3A  6E1B               	movwf	___ftge@ff2+1,c
  3676  000A3C  0E41               	movlw	65
  3677  000A3E  6E1C               	movwf	___ftge@ff2+2,c
  3678  000A40  ECCB  F014         	call	___ftge	;wreg free
  3679  000A44  A0D8               	btfss	status,0,c
  3680  000A46  D003               	goto	l237
  3681                           
  3682                           ;doprnt.c: 851: exp++;
  3683  000A48  0100               	movlb	0	; () banked
  3684  000A4A  4BAE               	infsnz	sprintf@exp& (0+255),f,b
  3685  000A4C  2BAF               	incf	(sprintf@exp+1)& (0+255),f,b
  3686  000A4E                     l237:
  3687                           
  3688                           ;doprnt.c: 852: }
  3689                           ;doprnt.c: 1112: if(prec <= 12)
  3690                           
  3691                           ; BSR set to: 0
  3692                           
  3693                           ; BSR set to: 0
  3694                           
  3695                           ; BSR set to: 0
  3696  000A4E  0100               	movlb	0	; () banked
  3697  000A50  BFB8               	btfsc	(sprintf@prec+1)& (0+255),7,b
  3698  000A52  D008               	goto	u4300
  3699  000A54  0100               	movlb	0	; () banked
  3700  000A56  51B8               	movf	(sprintf@prec+1)& (0+255),w,b
  3701  000A58  E11D               	bnz	l3798
  3702  000A5A  0E0D               	movlw	13
  3703  000A5C  0100               	movlb	0	; () banked
  3704  000A5E  5DB7               	subwf	sprintf@prec& (0+255),w,b
  3705  000A60  B0D8               	btfsc	status,0,c
  3706  000A62  D018               	goto	l238
  3707  000A64                     u4300:
  3708                           
  3709                           ; BSR set to: 0
  3710                           ;doprnt.c: 1113: fval += fround(prec);
  3711  000A64  C0B4  F02B         	movff	sprintf@fval,___ftadd@f1
  3712  000A68  C0B5  F02C         	movff	sprintf@fval+1,___ftadd@f1+1
  3713  000A6C  C0B6  F02D         	movff	sprintf@fval+2,___ftadd@f1+2
  3714  000A70  0100               	movlb	0	; () banked
  3715  000A72  51B7               	movf	sprintf@prec& (0+255),w,b
  3716  000A74  ECC0  F00B         	call	_fround
  3717  000A78  C07E  F02E         	movff	?_fround,___ftadd@f2
  3718  000A7C  C07F  F02F         	movff	?_fround+1,___ftadd@f2+1
  3719  000A80  C080  F030         	movff	?_fround+2,___ftadd@f2+2
  3720  000A84  ECF6  F00C         	call	___ftadd	;wreg free
  3721  000A88  C02B  F0B4         	movff	?___ftadd,sprintf@fval
  3722  000A8C  C02C  F0B5         	movff	?___ftadd+1,sprintf@fval+1
  3723  000A90  C02D  F0B6         	movff	?___ftadd+2,sprintf@fval+2
  3724  000A94                     l238:
  3725  000A94                     l3798:
  3726                           
  3727                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  3728  000A94  0100               	movlb	0	; () banked
  3729  000A96  BFAF               	btfsc	(sprintf@exp+1)& (0+255),7,b
  3730  000A98  D008               	goto	u4310
  3731  000A9A  0100               	movlb	0	; () banked
  3732  000A9C  51AF               	movf	(sprintf@exp+1)& (0+255),w,b
  3733  000A9E  E12A               	bnz	l3806
  3734  000AA0  0E0A               	movlw	10
  3735  000AA2  0100               	movlb	0	; () banked
  3736  000AA4  5DAE               	subwf	sprintf@exp& (0+255),w,b
  3737  000AA6  B0D8               	btfsc	status,0,c
  3738  000AA8  D025               	goto	u4340
  3739  000AAA                     u4310:
  3740                           
  3741                           ; BSR set to: 0
  3742  000AAA  0100               	movlb	0	; () banked
  3743  000AAC  51B4               	movf	sprintf@fval& (0+255),w,b
  3744  000AAE  0100               	movlb	0	; () banked
  3745  000AB0  11B5               	iorwf	(sprintf@fval+1)& (0+255),w,b
  3746  000AB2  0100               	movlb	0	; () banked
  3747  000AB4  11B6               	iorwf	(sprintf@fval+2)& (0+255),w,b
  3748  000AB6  B4D8               	btfsc	status,2,c
  3749  000AB8  D05F               	goto	l239
  3750                           
  3751                           ; BSR set to: 0
  3752  000ABA  C0B4  F085         	movff	sprintf@fval,___fttol@f1
  3753  000ABE  C0B5  F086         	movff	sprintf@fval+1,___fttol@f1+1
  3754  000AC2  C0B6  F087         	movff	sprintf@fval+2,___fttol@f1+2
  3755  000AC6  EC78  F011         	call	___fttol	;wreg free
  3756  000ACA  0100               	movlb	0	; () banked
  3757  000ACC  5185               	movf	?___fttol& (0+255),w,b
  3758  000ACE  0100               	movlb	0	; () banked
  3759  000AD0  1186               	iorwf	(?___fttol+1)& (0+255),w,b
  3760  000AD2  0100               	movlb	0	; () banked
  3761  000AD4  1187               	iorwf	(?___fttol+2)& (0+255),w,b
  3762  000AD6  0100               	movlb	0	; () banked
  3763  000AD8  1188               	iorwf	(?___fttol+3)& (0+255),w,b
  3764  000ADA  A4D8               	btfss	status,2,c
  3765  000ADC  D04D               	goto	l239
  3766                           
  3767                           ; BSR set to: 0
  3768  000ADE  0100               	movlb	0	; () banked
  3769  000AE0  BFAF               	btfsc	(sprintf@exp+1)& (0+255),7,b
  3770  000AE2  D04A               	goto	l239
  3771  000AE4  0100               	movlb	0	; () banked
  3772  000AE6  51AF               	movf	(sprintf@exp+1)& (0+255),w,b
  3773  000AE8  E105               	bnz	l3806
  3774  000AEA  0E02               	movlw	2
  3775  000AEC  0100               	movlb	0	; () banked
  3776  000AEE  5DAE               	subwf	sprintf@exp& (0+255),w,b
  3777  000AF0  A0D8               	btfss	status,0,c
  3778  000AF2  D042               	goto	l239
  3779  000AF4                     u4340:
  3780  000AF4                     l3806:
  3781                           
  3782                           ; BSR set to: 0
  3783                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  3784  000AF4  C0A6  F017         	movff	sprintf@tmpval,___ftge@ff1
  3785  000AF8  C0A7  F018         	movff	sprintf@tmpval+1,___ftge@ff1+1
  3786  000AFC  C0A8  F019         	movff	sprintf@tmpval+2,___ftge@ff1+2
  3787  000B00  0E70               	movlw	112
  3788  000B02  6E1A               	movwf	___ftge@ff2,c
  3789  000B04  0E89               	movlw	137
  3790  000B06  6E1B               	movwf	___ftge@ff2+1,c
  3791  000B08  0E40               	movlw	64
  3792  000B0A  6E1C               	movwf	___ftge@ff2+2,c
  3793  000B0C  ECCB  F014         	call	___ftge	;wreg free
  3794  000B10  B0D8               	btfsc	status,0,c
  3795  000B12  D003               	goto	l242
  3796                           
  3797                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  3798  000B14  0100               	movlb	0	; () banked
  3799  000B16  0EF7               	movlw	247
  3800  000B18  D002               	goto	L1
  3801  000B1A                     l242:
  3802                           
  3803                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  3804                           
  3805                           ; BSR set to: 0
  3806  000B1A  0100               	movlb	0	; () banked
  3807  000B1C  0EF8               	movlw	248
  3808  000B1E                     L1:
  3809  000B1E  27AE               	addwf	sprintf@exp& (0+255),f,b
  3810  000B20  0EFF               	movlw	255
  3811  000B22  23AF               	addwfc	(sprintf@exp+1)& (0+255),f,b
  3812                           
  3813                           ; BSR set to: 0
  3814                           ;doprnt.c: 1124: }
  3815                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  3816                           
  3817                           ; BSR set to: 0
  3818  000B24  0100               	movlb	0	; () banked
  3819  000B26  51AE               	movf	sprintf@exp& (0+255),w,b
  3820  000B28  ECA9  F009         	call	_scale
  3821  000B2C  C07E  F0A6         	movff	?_scale,sprintf@tmpval
  3822  000B30  C07F  F0A7         	movff	?_scale+1,sprintf@tmpval+1
  3823  000B34  C080  F0A8         	movff	?_scale+2,sprintf@tmpval+2
  3824                           
  3825                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  3826  000B38  C0B4  F017         	movff	sprintf@fval,__tdiv_to_l_@f1
  3827  000B3C  C0B5  F018         	movff	sprintf@fval+1,__tdiv_to_l_@f1+1
  3828  000B40  C0B6  F019         	movff	sprintf@fval+2,__tdiv_to_l_@f1+2
  3829  000B44  C0A6  F01A         	movff	sprintf@tmpval,__tdiv_to_l_@f2
  3830  000B48  C0A7  F01B         	movff	sprintf@tmpval+1,__tdiv_to_l_@f2+1
  3831  000B4C  C0A8  F01C         	movff	sprintf@tmpval+2,__tdiv_to_l_@f2+2
  3832  000B50  EC1A  F012         	call	__tdiv_to_l_	;wreg free
  3833  000B54  C017  F0AA         	movff	?__tdiv_to_l_,sprintf@val
  3834  000B58  C018  F0AB         	movff	?__tdiv_to_l_+1,sprintf@val+1
  3835  000B5C  C019  F0AC         	movff	?__tdiv_to_l_+2,sprintf@val+2
  3836  000B60  C01A  F0AD         	movff	?__tdiv_to_l_+3,sprintf@val+3
  3837                           
  3838                           ;doprnt.c: 1129: fval = 0.0;
  3839  000B64  0E00               	movlw	0
  3840  000B66  0100               	movlb	0	; () banked
  3841  000B68  6FB4               	movwf	sprintf@fval& (0+255),b
  3842  000B6A  0E00               	movlw	0
  3843  000B6C  0100               	movlb	0	; () banked
  3844  000B6E  6FB5               	movwf	(sprintf@fval+1)& (0+255),b
  3845  000B70  0E00               	movlw	0
  3846  000B72  0100               	movlb	0	; () banked
  3847  000B74  6FB6               	movwf	(sprintf@fval+2)& (0+255),b
  3848                           
  3849                           ;doprnt.c: 1130: } else {
  3850  000B76  D033               	goto	l248
  3851  000B78                     l239:
  3852                           
  3853                           ; BSR set to: 0
  3854                           ;doprnt.c: 1131: val = (unsigned long)fval;
  3855                           
  3856                           ; BSR set to: 0
  3857  000B78  C0B4  F085         	movff	sprintf@fval,___fttol@f1
  3858  000B7C  C0B5  F086         	movff	sprintf@fval+1,___fttol@f1+1
  3859  000B80  C0B6  F087         	movff	sprintf@fval+2,___fttol@f1+2
  3860  000B84  EC78  F011         	call	___fttol	;wreg free
  3861  000B88  C085  F0AA         	movff	?___fttol,sprintf@val
  3862  000B8C  C086  F0AB         	movff	?___fttol+1,sprintf@val+1
  3863  000B90  C087  F0AC         	movff	?___fttol+2,sprintf@val+2
  3864  000B94  C088  F0AD         	movff	?___fttol+3,sprintf@val+3
  3865                           
  3866                           ;doprnt.c: 1132: fval -= (double)val;
  3867  000B98  C0B4  F060         	movff	sprintf@fval,___ftsub@f1
  3868  000B9C  C0B5  F061         	movff	sprintf@fval+1,___ftsub@f1+1
  3869  000BA0  C0B6  F062         	movff	sprintf@fval+2,___ftsub@f1+2
  3870  000BA4  C0AA  F01F         	movff	sprintf@val,___lltoft@c
  3871  000BA8  C0AB  F020         	movff	sprintf@val+1,___lltoft@c+1
  3872  000BAC  C0AC  F021         	movff	sprintf@val+2,___lltoft@c+2
  3873  000BB0  C0AD  F022         	movff	sprintf@val+3,___lltoft@c+3
  3874  000BB4  EC45  F016         	call	___lltoft	;wreg free
  3875  000BB8  C01F  F063         	movff	?___lltoft,___ftsub@f2
  3876  000BBC  C020  F064         	movff	?___lltoft+1,___ftsub@f2+1
  3877  000BC0  C021  F065         	movff	?___lltoft+2,___ftsub@f2+2
  3878  000BC4  EC18  F017         	call	___ftsub	;wreg free
  3879  000BC8  C060  F0B4         	movff	?___ftsub,sprintf@fval
  3880  000BCC  C061  F0B5         	movff	?___ftsub+1,sprintf@fval+1
  3881  000BD0  C062  F0B6         	movff	?___ftsub+2,sprintf@fval+2
  3882                           
  3883                           ;doprnt.c: 1133: exp = 0;
  3884  000BD4  0E00               	movlw	0
  3885  000BD6  0100               	movlb	0	; () banked
  3886  000BD8  6FAF               	movwf	(sprintf@exp+1)& (0+255),b
  3887  000BDA  0E00               	movlw	0
  3888  000BDC  6FAE               	movwf	sprintf@exp& (0+255),b
  3889  000BDE                     l248:
  3890                           
  3891                           ; BSR set to: 0
  3892                           ;doprnt.c: 1134: }
  3893                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  3894                           
  3895                           ; BSR set to: 0
  3896  000BDE  0E01               	movlw	1
  3897  000BE0  0100               	movlb	0	; () banked
  3898  000BE2  6FB9               	movwf	sprintf@c& (0+255),b
  3899  000BE4                     l3826:
  3900                           
  3901                           ; BSR set to: 0
  3902  000BE4  0E0A               	movlw	10
  3903  000BE6  0100               	movlb	0	; () banked
  3904  000BE8  19B9               	xorwf	sprintf@c& (0+255),w,b
  3905  000BEA  B4D8               	btfsc	status,2,c
  3906  000BEC  D01E               	goto	u4380
  3907                           
  3908                           ; BSR set to: 0
  3909                           ;doprnt.c: 1137: if(val < dpowers[c])
  3910                           
  3911                           ; BSR set to: 0
  3912                           
  3913                           ; BSR set to: 0
  3914  000BEE  0100               	movlb	0	; () banked
  3915  000BF0  51B9               	movf	sprintf@c& (0+255),w,b
  3916  000BF2  0D04               	mullw	4
  3917  000BF4  0E01               	movlw	low _dpowers
  3918  000BF6  24F3               	addwf	prodl,w,c
  3919  000BF8  6EF6               	movwf	tblptrl,c
  3920  000BFA  0E06               	movlw	high _dpowers
  3921  000BFC  20F4               	addwfc	prodh,w,c
  3922  000BFE  6EF7               	movwf	tblptrh,c
  3923  000C00                     	if	0	;There are less than 3 active tblptr bytes
  3924  000C00                     	endif
  3925  000C00  0009               	tblrd		*+
  3926  000C02  50F5               	movf	tablat,w,c
  3927  000C04  0100               	movlb	0	; () banked
  3928  000C06  5DAA               	subwf	sprintf@val& (0+255),w,b
  3929  000C08  0009               	tblrd		*+
  3930  000C0A  50F5               	movf	tablat,w,c
  3931  000C0C  0100               	movlb	0	; () banked
  3932  000C0E  59AB               	subwfb	(sprintf@val+1)& (0+255),w,b
  3933  000C10  0009               	tblrd		*+
  3934  000C12  50F5               	movf	tablat,w,c
  3935  000C14  0100               	movlb	0	; () banked
  3936  000C16  59AC               	subwfb	(sprintf@val+2)& (0+255),w,b
  3937  000C18  0009               	tblrd		*+
  3938  000C1A  50F5               	movf	tablat,w,c
  3939  000C1C  0100               	movlb	0	; () banked
  3940  000C1E  59AD               	subwfb	(sprintf@val+3)& (0+255),w,b
  3941  000C20  A0D8               	btfss	status,0,c
  3942  000C22  D003               	goto	u4380
  3943                           
  3944                           ; BSR set to: 0
  3945                           
  3946                           ; BSR set to: 0
  3947                           
  3948                           ; BSR set to: 0
  3949                           ;doprnt.c: 1138: break;
  3950  000C24  0100               	movlb	0	; () banked
  3951  000C26  2BB9               	incf	sprintf@c& (0+255),f,b
  3952  000C28  D7DD               	goto	l3826
  3953  000C2A                     u4380:
  3954                           
  3955                           ; BSR set to: 0
  3956                           ;doprnt.c: 1142: width -= prec + c + exp;
  3957                           
  3958                           ; BSR set to: 0
  3959  000C2A  C0B9  F09B         	movff	sprintf@c,??_sprintf
  3960  000C2E  0100               	movlb	0	; () banked
  3961  000C30  6B9C               	clrf	(??_sprintf+1)& (0+255),b
  3962  000C32  BF9B               	btfsc	??_sprintf& (0+255),7,b
  3963  000C34  079C               	decf	(??_sprintf+1)& (0+255),f,b
  3964  000C36  0100               	movlb	0	; () banked
  3965  000C38  51B7               	movf	sprintf@prec& (0+255),w,b
  3966  000C3A  0100               	movlb	0	; () banked
  3967  000C3C  279B               	addwf	??_sprintf& (0+255),f,b
  3968  000C3E  0100               	movlb	0	; () banked
  3969  000C40  51B8               	movf	(sprintf@prec+1)& (0+255),w,b
  3970  000C42  0100               	movlb	0	; () banked
  3971  000C44  239C               	addwfc	(??_sprintf+1)& (0+255),f,b
  3972  000C46  0100               	movlb	0	; () banked
  3973  000C48  51AE               	movf	sprintf@exp& (0+255),w,b
  3974  000C4A  0100               	movlb	0	; () banked
  3975  000C4C  279B               	addwf	??_sprintf& (0+255),f,b
  3976  000C4E  0100               	movlb	0	; () banked
  3977  000C50  51AF               	movf	(sprintf@exp+1)& (0+255),w,b
  3978  000C52  0100               	movlb	0	; () banked
  3979  000C54  239C               	addwfc	(??_sprintf+1)& (0+255),f,b
  3980  000C56  0100               	movlb	0	; () banked
  3981  000C58  519B               	movf	??_sprintf& (0+255),w,b
  3982  000C5A  0100               	movlb	0	; () banked
  3983  000C5C  5FB2               	subwf	sprintf@width& (0+255),f,b
  3984  000C5E  0100               	movlb	0	; () banked
  3985  000C60  519C               	movf	(??_sprintf+1)& (0+255),w,b
  3986  000C62  0100               	movlb	0	; () banked
  3987  000C64  5BB3               	subwfb	(sprintf@width+1)& (0+255),f,b
  3988                           
  3989                           ;doprnt.c: 1143: if(
  3990                           ;doprnt.c: 1147: prec)
  3991  000C66  0100               	movlb	0	; () banked
  3992  000C68  51B7               	movf	sprintf@prec& (0+255),w,b
  3993  000C6A  0100               	movlb	0	; () banked
  3994  000C6C  11B8               	iorwf	(sprintf@prec+1)& (0+255),w,b
  3995  000C6E  B4D8               	btfsc	status,2,c
  3996  000C70  D004               	goto	l252
  3997                           
  3998                           ; BSR set to: 0
  3999                           ;doprnt.c: 1148: width--;
  4000  000C72  0100               	movlb	0	; () banked
  4001  000C74  07B2               	decf	sprintf@width& (0+255),f,b
  4002  000C76  A0D8               	btfss	status,0,c
  4003  000C78  07B3               	decf	(sprintf@width+1)& (0+255),f,b
  4004  000C7A                     l252:
  4005                           
  4006                           ; BSR set to: 0
  4007                           ;doprnt.c: 1149: if(flag & 0x03)
  4008                           
  4009                           ; BSR set to: 0
  4010  000C7A  0E03               	movlw	3
  4011  000C7C  0100               	movlb	0	; () banked
  4012  000C7E  15B0               	andwf	sprintf@flag& (0+255),w,b
  4013  000C80  0100               	movlb	0	; () banked
  4014  000C82  6F9B               	movwf	??_sprintf& (0+255),b
  4015  000C84  0E00               	movlw	0
  4016  000C86  0100               	movlb	0	; () banked
  4017  000C88  15B1               	andwf	(sprintf@flag+1)& (0+255),w,b
  4018  000C8A  0100               	movlb	0	; () banked
  4019  000C8C  6F9C               	movwf	(??_sprintf+1)& (0+255),b
  4020  000C8E  0100               	movlb	0	; () banked
  4021  000C90  519B               	movf	??_sprintf& (0+255),w,b
  4022  000C92  0100               	movlb	0	; () banked
  4023  000C94  119C               	iorwf	(??_sprintf+1)& (0+255),w,b
  4024  000C96  B4D8               	btfsc	status,2,c
  4025  000C98  D004               	goto	l253
  4026                           
  4027                           ; BSR set to: 0
  4028                           ;doprnt.c: 1150: width--;
  4029  000C9A  0100               	movlb	0	; () banked
  4030  000C9C  07B2               	decf	sprintf@width& (0+255),f,b
  4031  000C9E  A0D8               	btfss	status,0,c
  4032  000CA0  07B3               	decf	(sprintf@width+1)& (0+255),f,b
  4033  000CA2                     l253:
  4034                           
  4035                           ; BSR set to: 0
  4036                           ;doprnt.c: 1153: if(flag & 0x04) {
  4037                           
  4038                           ; BSR set to: 0
  4039  000CA2  0100               	movlb	0	; () banked
  4040  000CA4  A5B0               	btfss	sprintf@flag& (0+255),2,b
  4041  000CA6  D03F               	goto	l260
  4042                           
  4043                           ; BSR set to: 0
  4044                           ;doprnt.c: 1157: if(flag & 0x03)
  4045  000CA8  0E03               	movlw	3
  4046  000CAA  0100               	movlb	0	; () banked
  4047  000CAC  15B0               	andwf	sprintf@flag& (0+255),w,b
  4048  000CAE  0100               	movlb	0	; () banked
  4049  000CB0  6F9B               	movwf	??_sprintf& (0+255),b
  4050  000CB2  0E00               	movlw	0
  4051  000CB4  0100               	movlb	0	; () banked
  4052  000CB6  15B1               	andwf	(sprintf@flag+1)& (0+255),w,b
  4053  000CB8  0100               	movlb	0	; () banked
  4054  000CBA  6F9C               	movwf	(??_sprintf+1)& (0+255),b
  4055  000CBC  0100               	movlb	0	; () banked
  4056  000CBE  519B               	movf	??_sprintf& (0+255),w,b
  4057  000CC0  0100               	movlb	0	; () banked
  4058  000CC2  119C               	iorwf	(??_sprintf+1)& (0+255),w,b
  4059  000CC4  B4D8               	btfsc	status,2,c
  4060  000CC6  D017               	goto	l256
  4061                           
  4062                           ; BSR set to: 0
  4063                           ;doprnt.c: 1159: ((*sp++ = ('-')));
  4064  000CC8  C094  FFD9         	movff	sprintf@sp,fsr2l
  4065  000CCC  C095  FFDA         	movff	sprintf@sp+1,fsr2h
  4066  000CD0  0E2D               	movlw	45
  4067  000CD2  6EDF               	movwf	indf2,c
  4068                           
  4069                           ; BSR set to: 0
  4070  000CD4  0100               	movlb	0	; () banked
  4071  000CD6  4B94               	infsnz	sprintf@sp& (0+255),f,b
  4072  000CD8  2B95               	incf	(sprintf@sp+1)& (0+255),f,b
  4073                           
  4074                           ; BSR set to: 0
  4075                           ;doprnt.c: 1168: while(width > 0) {
  4076  000CDA  D00D               	goto	l256
  4077  000CDC                     l3854:
  4078                           
  4079                           ; BSR set to: 0
  4080                           ;doprnt.c: 1169: ((*sp++ = ('0')));
  4081  000CDC  C094  FFD9         	movff	sprintf@sp,fsr2l
  4082  000CE0  C095  FFDA         	movff	sprintf@sp+1,fsr2h
  4083  000CE4  0E30               	movlw	48
  4084  000CE6  6EDF               	movwf	indf2,c
  4085                           
  4086                           ; BSR set to: 0
  4087  000CE8  0100               	movlb	0	; () banked
  4088  000CEA  4B94               	infsnz	sprintf@sp& (0+255),f,b
  4089  000CEC  2B95               	incf	(sprintf@sp+1)& (0+255),f,b
  4090                           
  4091                           ; BSR set to: 0
  4092                           ;doprnt.c: 1170: width--;
  4093  000CEE  0100               	movlb	0	; () banked
  4094  000CF0  07B2               	decf	sprintf@width& (0+255),f,b
  4095  000CF2  A0D8               	btfss	status,0,c
  4096  000CF4  07B3               	decf	(sprintf@width+1)& (0+255),f,b
  4097  000CF6                     l256:
  4098                           
  4099                           ; BSR set to: 0
  4100                           
  4101                           ; BSR set to: 0
  4102  000CF6  0100               	movlb	0	; () banked
  4103  000CF8  BFB3               	btfsc	(sprintf@width+1)& (0+255),7,b
  4104  000CFA  D081               	goto	l264
  4105  000CFC  0100               	movlb	0	; () banked
  4106  000CFE  51B3               	movf	(sprintf@width+1)& (0+255),w,b
  4107  000D00  E1ED               	bnz	l3854
  4108  000D02  0100               	movlb	0	; () banked
  4109  000D04  05B2               	decf	sprintf@width& (0+255),w,b
  4110  000D06  A0D8               	btfss	status,0,c
  4111  000D08  D07A               	goto	l264
  4112  000D0A  D7E8               	goto	l257
  4113  000D0C                     l3862:
  4114                           
  4115                           ; BSR set to: 0
  4116                           ;doprnt.c: 1181: ((*sp++ = (' ')));
  4117  000D0C  C094  FFD9         	movff	sprintf@sp,fsr2l
  4118  000D10  C095  FFDA         	movff	sprintf@sp+1,fsr2h
  4119  000D14  0E20               	movlw	32
  4120  000D16  6EDF               	movwf	indf2,c
  4121                           
  4122                           ; BSR set to: 0
  4123  000D18  0100               	movlb	0	; () banked
  4124  000D1A  4B94               	infsnz	sprintf@sp& (0+255),f,b
  4125  000D1C  2B95               	incf	(sprintf@sp+1)& (0+255),f,b
  4126                           
  4127                           ; BSR set to: 0
  4128                           ;doprnt.c: 1182: width--;
  4129  000D1E  0100               	movlb	0	; () banked
  4130  000D20  07B2               	decf	sprintf@width& (0+255),f,b
  4131  000D22  A0D8               	btfss	status,0,c
  4132  000D24  07B3               	decf	(sprintf@width+1)& (0+255),f,b
  4133  000D26                     l260:
  4134                           
  4135                           ; BSR set to: 0
  4136                           
  4137                           ; BSR set to: 0
  4138  000D26  0100               	movlb	0	; () banked
  4139  000D28  BFB3               	btfsc	(sprintf@width+1)& (0+255),7,b
  4140  000D2A  D007               	goto	u4440
  4141  000D2C  0100               	movlb	0	; () banked
  4142  000D2E  51B3               	movf	(sprintf@width+1)& (0+255),w,b
  4143  000D30  E1ED               	bnz	l3862
  4144  000D32  0100               	movlb	0	; () banked
  4145  000D34  05B2               	decf	sprintf@width& (0+255),w,b
  4146  000D36  B0D8               	btfsc	status,0,c
  4147  000D38  D7E9               	goto	l261
  4148  000D3A                     u4440:
  4149                           
  4150                           ; BSR set to: 0
  4151                           ;doprnt.c: 1183: }
  4152                           ;doprnt.c: 1188: if(flag & 0x03)
  4153                           
  4154                           ; BSR set to: 0
  4155  000D3A  0E03               	movlw	3
  4156  000D3C  0100               	movlb	0	; () banked
  4157  000D3E  15B0               	andwf	sprintf@flag& (0+255),w,b
  4158  000D40  0100               	movlb	0	; () banked
  4159  000D42  6F9B               	movwf	??_sprintf& (0+255),b
  4160  000D44  0E00               	movlw	0
  4161  000D46  0100               	movlb	0	; () banked
  4162  000D48  15B1               	andwf	(sprintf@flag+1)& (0+255),w,b
  4163  000D4A  0100               	movlb	0	; () banked
  4164  000D4C  6F9C               	movwf	(??_sprintf+1)& (0+255),b
  4165  000D4E  0100               	movlb	0	; () banked
  4166  000D50  519B               	movf	??_sprintf& (0+255),w,b
  4167  000D52  0100               	movlb	0	; () banked
  4168  000D54  119C               	iorwf	(??_sprintf+1)& (0+255),w,b
  4169  000D56  B4D8               	btfsc	status,2,c
  4170  000D58  D052               	goto	l264
  4171                           
  4172                           ; BSR set to: 0
  4173                           ;doprnt.c: 1190: ((*sp++ = ('-')));
  4174  000D5A  C094  FFD9         	movff	sprintf@sp,fsr2l
  4175  000D5E  C095  FFDA         	movff	sprintf@sp+1,fsr2h
  4176  000D62  0E2D               	movlw	45
  4177  000D64  D048               	goto	L2
  4178  000D66                     
  4179                           ; BSR set to: 0
  4180                           ;doprnt.c: 1200: {
  4181                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  4182                           
  4183                           ; BSR set to: 0
  4184  000D66  C0AA  F017         	movff	sprintf@val,___lldiv@dividend
  4185  000D6A  C0AB  F018         	movff	sprintf@val+1,___lldiv@dividend+1
  4186  000D6E  C0AC  F019         	movff	sprintf@val+2,___lldiv@dividend+2
  4187  000D72  C0AD  F01A         	movff	sprintf@val+3,___lldiv@dividend+3
  4188  000D76  0100               	movlb	0	; () banked
  4189  000D78  51B9               	movf	sprintf@c& (0+255),w,b
  4190  000D7A  0D04               	mullw	4
  4191  000D7C  0E01               	movlw	low _dpowers
  4192  000D7E  24F3               	addwf	prodl,w,c
  4193  000D80  6EF6               	movwf	tblptrl,c
  4194  000D82  0E06               	movlw	high _dpowers
  4195  000D84  20F4               	addwfc	prodh,w,c
  4196  000D86  6EF7               	movwf	tblptrh,c
  4197  000D88                     	if	0	;There are less than 3 active tblptr bytes
  4198  000D88                     	endif
  4199  000D88  0009               	tblrd		*+
  4200  000D8A  CFF5 F01B          	movff	tablat,___lldiv@divisor
  4201  000D8E  0009               	tblrd		*+
  4202  000D90  CFF5 F01C          	movff	tablat,___lldiv@divisor+1
  4203  000D94  0009               	tblrd		*+
  4204  000D96  CFF5 F01D          	movff	tablat,___lldiv@divisor+2
  4205  000D9A  000A               	tblrd		*-
  4206  000D9C  CFF5 F01E          	movff	tablat,___lldiv@divisor+3
  4207  000DA0  EC99  F015         	call	___lldiv	;wreg free
  4208  000DA4  C017  F0A6         	movff	?___lldiv,sprintf@tmpval
  4209  000DA8  C018  F0A7         	movff	?___lldiv+1,sprintf@tmpval+1
  4210  000DAC  C019  F0A8         	movff	?___lldiv+2,sprintf@tmpval+2
  4211  000DB0  C01A  F0A9         	movff	?___lldiv+3,sprintf@tmpval+3
  4212                           
  4213                           ;doprnt.c: 1202: tmpval.vd %= 10;
  4214  000DB4  C0A6  F024         	movff	sprintf@tmpval,___llmod@dividend
  4215  000DB8  C0A7  F025         	movff	sprintf@tmpval+1,___llmod@dividend+1
  4216  000DBC  C0A8  F026         	movff	sprintf@tmpval+2,___llmod@dividend+2
  4217  000DC0  C0A9  F027         	movff	sprintf@tmpval+3,___llmod@dividend+3
  4218  000DC4  0E0A               	movlw	10
  4219  000DC6  6E28               	movwf	___llmod@divisor,c
  4220  000DC8  0E00               	movlw	0
  4221  000DCA  6E29               	movwf	___llmod@divisor+1,c
  4222  000DCC  0E00               	movlw	0
  4223  000DCE  6E2A               	movwf	___llmod@divisor+2,c
  4224  000DD0  0E00               	movlw	0
  4225  000DD2  6E2B               	movwf	___llmod@divisor+3,c
  4226  000DD4  EC12  F016         	call	___llmod	;wreg free
  4227  000DD8  C024  F0A6         	movff	?___llmod,sprintf@tmpval
  4228  000DDC  C025  F0A7         	movff	?___llmod+1,sprintf@tmpval+1
  4229  000DE0  C026  F0A8         	movff	?___llmod+2,sprintf@tmpval+2
  4230  000DE4  C027  F0A9         	movff	?___llmod+3,sprintf@tmpval+3
  4231                           
  4232                           ;doprnt.c: 1203: ((*sp++ = ('0' + tmpval.vd)));
  4233  000DE8  0100               	movlb	0	; () banked
  4234  000DEA  51A6               	movf	sprintf@tmpval& (0+255),w,b
  4235  000DEC  0F30               	addlw	48
  4236  000DEE  C094  FFD9         	movff	sprintf@sp,fsr2l
  4237  000DF2  C095  FFDA         	movff	sprintf@sp+1,fsr2h
  4238  000DF6                     L2:
  4239  000DF6  6EDF               	movwf	indf2,c
  4240                           
  4241                           ; BSR set to: 0
  4242  000DF8  0100               	movlb	0	; () banked
  4243  000DFA  4B94               	infsnz	sprintf@sp& (0+255),f,b
  4244  000DFC  2B95               	incf	(sprintf@sp+1)& (0+255),f,b
  4245  000DFE                     l264:
  4246                           
  4247                           ; BSR set to: 0
  4248                           
  4249                           ; BSR set to: 0
  4250  000DFE  0100               	movlb	0	; () banked
  4251  000E00  07B9               	decf	sprintf@c& (0+255),f,b
  4252  000E02  0100               	movlb	0	; () banked
  4253  000E04  29B9               	incf	sprintf@c& (0+255),w,b
  4254  000E06  B4D8               	btfsc	status,2,c
  4255  000E08  D00E               	goto	l267
  4256  000E0A  D7AD               	goto	l265
  4257  000E0C                     l3886:
  4258                           
  4259                           ; BSR set to: 0
  4260                           ;doprnt.c: 1208: ((*sp++ = ('0')));
  4261  000E0C  C094  FFD9         	movff	sprintf@sp,fsr2l
  4262  000E10  C095  FFDA         	movff	sprintf@sp+1,fsr2h
  4263  000E14  0E30               	movlw	48
  4264  000E16  6EDF               	movwf	indf2,c
  4265                           
  4266                           ; BSR set to: 0
  4267  000E18  0100               	movlb	0	; () banked
  4268  000E1A  4B94               	infsnz	sprintf@sp& (0+255),f,b
  4269  000E1C  2B95               	incf	(sprintf@sp+1)& (0+255),f,b
  4270                           
  4271                           ; BSR set to: 0
  4272                           ;doprnt.c: 1209: exp--;
  4273  000E1E  0100               	movlb	0	; () banked
  4274  000E20  07AE               	decf	sprintf@exp& (0+255),f,b
  4275  000E22  A0D8               	btfss	status,0,c
  4276  000E24  07AF               	decf	(sprintf@exp+1)& (0+255),f,b
  4277  000E26                     l267:
  4278                           
  4279                           ; BSR set to: 0
  4280                           
  4281                           ; BSR set to: 0
  4282  000E26  0100               	movlb	0	; () banked
  4283  000E28  BFAF               	btfsc	(sprintf@exp+1)& (0+255),7,b
  4284  000E2A  D007               	goto	u4470
  4285  000E2C  0100               	movlb	0	; () banked
  4286  000E2E  51AF               	movf	(sprintf@exp+1)& (0+255),w,b
  4287  000E30  E1ED               	bnz	l3886
  4288  000E32  0100               	movlb	0	; () banked
  4289  000E34  05AE               	decf	sprintf@exp& (0+255),w,b
  4290  000E36  B0D8               	btfsc	status,0,c
  4291  000E38  D7E9               	goto	l268
  4292  000E3A                     u4470:
  4293                           
  4294                           ; BSR set to: 0
  4295                           ;doprnt.c: 1210: }
  4296                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  4297                           
  4298                           ; BSR set to: 0
  4299  000E3A  0100               	movlb	0	; () banked
  4300  000E3C  BFB8               	btfsc	(sprintf@prec+1)& (0+255),7,b
  4301  000E3E  D00C               	goto	l270
  4302  000E40  0100               	movlb	0	; () banked
  4303  000E42  51B8               	movf	(sprintf@prec+1)& (0+255),w,b
  4304  000E44  E105               	bnz	u4480
  4305  000E46  0E09               	movlw	9
  4306  000E48  0100               	movlb	0	; () banked
  4307  000E4A  5DB7               	subwf	sprintf@prec& (0+255),w,b
  4308  000E4C  A0D8               	btfss	status,0,c
  4309  000E4E  D004               	goto	l270
  4310  000E50                     u4480:
  4311                           
  4312                           ; BSR set to: 0
  4313                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  4314  000E50  0E08               	movlw	8
  4315  000E52  0100               	movlb	0	; () banked
  4316  000E54  6FB9               	movwf	sprintf@c& (0+255),b
  4317  000E56  D002               	goto	l271
  4318  000E58                     l270:
  4319                           
  4320                           ; BSR set to: 0
  4321                           ;doprnt.c: 1213: else
  4322                           ;doprnt.c: 1214: c = prec;
  4323  000E58  C0B7  F0B9         	movff	sprintf@prec,sprintf@c
  4324  000E5C                     l271:
  4325                           
  4326                           ; BSR set to: 0
  4327                           ;doprnt.c: 1215: prec -= c;
  4328                           
  4329                           ; BSR set to: 0
  4330  000E5C  0100               	movlb	0	; () banked
  4331  000E5E  51B9               	movf	sprintf@c& (0+255),w,b
  4332  000E60  0100               	movlb	0	; () banked
  4333  000E62  5FB7               	subwf	sprintf@prec& (0+255),f,b
  4334  000E64  0E00               	movlw	0
  4335  000E66  0100               	movlb	0	; () banked
  4336  000E68  BFB9               	btfsc	sprintf@c& (0+255),7,b
  4337  000E6A  0EFF               	movlw	255
  4338  000E6C  0100               	movlb	0	; () banked
  4339  000E6E  5BB8               	subwfb	(sprintf@prec+1)& (0+255),f,b
  4340                           
  4341                           ; BSR set to: 0
  4342                           ;doprnt.c: 1219: if(c)
  4343  000E70  0100               	movlb	0	; () banked
  4344  000E72  51B9               	movf	sprintf@c& (0+255),w,b
  4345  000E74  0100               	movlb	0	; () banked
  4346  000E76  B4D8               	btfsc	status,2,c
  4347  000E78  D009               	goto	l272
  4348                           
  4349                           ; BSR set to: 0
  4350                           ;doprnt.c: 1221: ((*sp++ = ('.')));
  4351  000E7A  C094  FFD9         	movff	sprintf@sp,fsr2l
  4352  000E7E  C095  FFDA         	movff	sprintf@sp+1,fsr2h
  4353  000E82  0E2E               	movlw	46
  4354  000E84  6EDF               	movwf	indf2,c
  4355                           
  4356                           ; BSR set to: 0
  4357  000E86  0100               	movlb	0	; () banked
  4358  000E88  4B94               	infsnz	sprintf@sp& (0+255),f,b
  4359  000E8A  2B95               	incf	(sprintf@sp+1)& (0+255),f,b
  4360  000E8C                     l272:
  4361                           
  4362                           ; BSR set to: 0
  4363                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  4364                           
  4365                           ; BSR set to: 0
  4366  000E8C  0100               	movlb	0	; () banked
  4367  000E8E  51B9               	movf	sprintf@c& (0+255),w,b
  4368  000E90  ECA9  F009         	call	_scale
  4369  000E94  C07E  F0A1         	movff	?_scale,_sprintf$1527
  4370  000E98  C07F  F0A2         	movff	?_scale+1,_sprintf$1527+1
  4371  000E9C  C080  F0A3         	movff	?_scale+2,_sprintf$1527+2
  4372                           
  4373                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  4374  000EA0  C0B4  F072         	movff	sprintf@fval,___ftmul@f2
  4375  000EA4  C0B5  F073         	movff	sprintf@fval+1,___ftmul@f2+1
  4376  000EA8  C0B6  F074         	movff	sprintf@fval+2,___ftmul@f2+2
  4377  000EAC  C0A1  F06F         	movff	_sprintf$1527,___ftmul@f1
  4378  000EB0  C0A2  F070         	movff	_sprintf$1527+1,___ftmul@f1+1
  4379  000EB4  C0A3  F071         	movff	_sprintf$1527+2,___ftmul@f1+2
  4380  000EB8  EC23  F010         	call	___ftmul	;wreg free
  4381  000EBC  C06F  F085         	movff	?___ftmul,___fttol@f1
  4382  000EC0  C070  F086         	movff	?___ftmul+1,___fttol@f1+1
  4383  000EC4  C071  F087         	movff	?___ftmul+2,___fttol@f1+2
  4384  000EC8  EC78  F011         	call	___fttol	;wreg free
  4385  000ECC  C085  F0AA         	movff	?___fttol,sprintf@val
  4386  000ED0  C086  F0AB         	movff	?___fttol+1,sprintf@val+1
  4387  000ED4  C087  F0AC         	movff	?___fttol+2,sprintf@val+2
  4388  000ED8  C088  F0AD         	movff	?___fttol+3,sprintf@val+3
  4389                           
  4390                           ;doprnt.c: 1228: while(c--) {
  4391  000EDC  D073               	goto	l273
  4392  000EDE                     
  4393                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  4394  000EDE  C0AA  F017         	movff	sprintf@val,___lldiv@dividend
  4395  000EE2  C0AB  F018         	movff	sprintf@val+1,___lldiv@dividend+1
  4396  000EE6  C0AC  F019         	movff	sprintf@val+2,___lldiv@dividend+2
  4397  000EEA  C0AD  F01A         	movff	sprintf@val+3,___lldiv@dividend+3
  4398  000EEE  0100               	movlb	0	; () banked
  4399  000EF0  51B9               	movf	sprintf@c& (0+255),w,b
  4400  000EF2  0D04               	mullw	4
  4401  000EF4  0E01               	movlw	low _dpowers
  4402  000EF6  24F3               	addwf	prodl,w,c
  4403  000EF8  6EF6               	movwf	tblptrl,c
  4404  000EFA  0E06               	movlw	high _dpowers
  4405  000EFC  20F4               	addwfc	prodh,w,c
  4406  000EFE  6EF7               	movwf	tblptrh,c
  4407  000F00                     	if	0	;There are less than 3 active tblptr bytes
  4408  000F00                     	endif
  4409  000F00  0009               	tblrd		*+
  4410  000F02  CFF5 F01B          	movff	tablat,___lldiv@divisor
  4411  000F06  0009               	tblrd		*+
  4412  000F08  CFF5 F01C          	movff	tablat,___lldiv@divisor+1
  4413  000F0C  0009               	tblrd		*+
  4414  000F0E  CFF5 F01D          	movff	tablat,___lldiv@divisor+2
  4415  000F12  000A               	tblrd		*-
  4416  000F14  CFF5 F01E          	movff	tablat,___lldiv@divisor+3
  4417  000F18  EC99  F015         	call	___lldiv	;wreg free
  4418  000F1C  C017  F0A6         	movff	?___lldiv,sprintf@tmpval
  4419  000F20  C018  F0A7         	movff	?___lldiv+1,sprintf@tmpval+1
  4420  000F24  C019  F0A8         	movff	?___lldiv+2,sprintf@tmpval+2
  4421  000F28  C01A  F0A9         	movff	?___lldiv+3,sprintf@tmpval+3
  4422                           
  4423                           ;doprnt.c: 1230: tmpval.vd %= 10;
  4424  000F2C  C0A6  F024         	movff	sprintf@tmpval,___llmod@dividend
  4425  000F30  C0A7  F025         	movff	sprintf@tmpval+1,___llmod@dividend+1
  4426  000F34  C0A8  F026         	movff	sprintf@tmpval+2,___llmod@dividend+2
  4427  000F38  C0A9  F027         	movff	sprintf@tmpval+3,___llmod@dividend+3
  4428  000F3C  0E0A               	movlw	10
  4429  000F3E  6E28               	movwf	___llmod@divisor,c
  4430  000F40  0E00               	movlw	0
  4431  000F42  6E29               	movwf	___llmod@divisor+1,c
  4432  000F44  0E00               	movlw	0
  4433  000F46  6E2A               	movwf	___llmod@divisor+2,c
  4434  000F48  0E00               	movlw	0
  4435  000F4A  6E2B               	movwf	___llmod@divisor+3,c
  4436  000F4C  EC12  F016         	call	___llmod	;wreg free
  4437  000F50  C024  F0A6         	movff	?___llmod,sprintf@tmpval
  4438  000F54  C025  F0A7         	movff	?___llmod+1,sprintf@tmpval+1
  4439  000F58  C026  F0A8         	movff	?___llmod+2,sprintf@tmpval+2
  4440  000F5C  C027  F0A9         	movff	?___llmod+3,sprintf@tmpval+3
  4441                           
  4442                           ;doprnt.c: 1231: ((*sp++ = ('0' + tmpval.vd)));
  4443  000F60  0100               	movlb	0	; () banked
  4444  000F62  51A6               	movf	sprintf@tmpval& (0+255),w,b
  4445  000F64  0F30               	addlw	48
  4446  000F66  C094  FFD9         	movff	sprintf@sp,fsr2l
  4447  000F6A  C095  FFDA         	movff	sprintf@sp+1,fsr2h
  4448  000F6E  6EDF               	movwf	indf2,c
  4449                           
  4450                           ; BSR set to: 0
  4451  000F70  0100               	movlb	0	; () banked
  4452  000F72  4B94               	infsnz	sprintf@sp& (0+255),f,b
  4453  000F74  2B95               	incf	(sprintf@sp+1)& (0+255),f,b
  4454                           
  4455                           ; BSR set to: 0
  4456                           ;doprnt.c: 1232: val %= dpowers[c];
  4457  000F76  C0AA  F024         	movff	sprintf@val,___llmod@dividend
  4458  000F7A  C0AB  F025         	movff	sprintf@val+1,___llmod@dividend+1
  4459  000F7E  C0AC  F026         	movff	sprintf@val+2,___llmod@dividend+2
  4460  000F82  C0AD  F027         	movff	sprintf@val+3,___llmod@dividend+3
  4461  000F86  0100               	movlb	0	; () banked
  4462  000F88  51B9               	movf	sprintf@c& (0+255),w,b
  4463  000F8A  0D04               	mullw	4
  4464  000F8C  0E01               	movlw	low _dpowers
  4465  000F8E  24F3               	addwf	prodl,w,c
  4466  000F90  6EF6               	movwf	tblptrl,c
  4467  000F92  0E06               	movlw	high _dpowers
  4468  000F94  20F4               	addwfc	prodh,w,c
  4469  000F96  6EF7               	movwf	tblptrh,c
  4470  000F98                     	if	0	;There are less than 3 active tblptr bytes
  4471  000F98                     	endif
  4472  000F98  0009               	tblrd		*+
  4473  000F9A  CFF5 F028          	movff	tablat,___llmod@divisor
  4474  000F9E  0009               	tblrd		*+
  4475  000FA0  CFF5 F029          	movff	tablat,___llmod@divisor+1
  4476  000FA4  0009               	tblrd		*+
  4477  000FA6  CFF5 F02A          	movff	tablat,___llmod@divisor+2
  4478  000FAA  000A               	tblrd		*-
  4479  000FAC  CFF5 F02B          	movff	tablat,___llmod@divisor+3
  4480  000FB0  EC12  F016         	call	___llmod	;wreg free
  4481  000FB4  C024  F0AA         	movff	?___llmod,sprintf@val
  4482  000FB8  C025  F0AB         	movff	?___llmod+1,sprintf@val+1
  4483  000FBC  C026  F0AC         	movff	?___llmod+2,sprintf@val+2
  4484  000FC0  C027  F0AD         	movff	?___llmod+3,sprintf@val+3
  4485  000FC4                     l273:
  4486  000FC4  0100               	movlb	0	; () banked
  4487  000FC6  07B9               	decf	sprintf@c& (0+255),f,b
  4488  000FC8  0100               	movlb	0	; () banked
  4489  000FCA  29B9               	incf	sprintf@c& (0+255),w,b
  4490  000FCC  B4D8               	btfsc	status,2,c
  4491  000FCE  D00E               	goto	l276
  4492  000FD0  D786               	goto	l274
  4493  000FD2                     
  4494                           ; BSR set to: 0
  4495                           ;doprnt.c: 1236: ((*sp++ = ('0')));
  4496                           
  4497                           ; BSR set to: 0
  4498  000FD2  C094  FFD9         	movff	sprintf@sp,fsr2l
  4499  000FD6  C095  FFDA         	movff	sprintf@sp+1,fsr2h
  4500  000FDA  0E30               	movlw	48
  4501  000FDC  6EDF               	movwf	indf2,c
  4502                           
  4503                           ; BSR set to: 0
  4504  000FDE  0100               	movlb	0	; () banked
  4505  000FE0  4B94               	infsnz	sprintf@sp& (0+255),f,b
  4506  000FE2  2B95               	incf	(sprintf@sp+1)& (0+255),f,b
  4507                           
  4508                           ; BSR set to: 0
  4509                           ;doprnt.c: 1237: prec--;
  4510  000FE4  0100               	movlb	0	; () banked
  4511  000FE6  07B7               	decf	sprintf@prec& (0+255),f,b
  4512  000FE8  A0D8               	btfss	status,0,c
  4513  000FEA  07B8               	decf	(sprintf@prec+1)& (0+255),f,b
  4514  000FEC                     l276:
  4515                           
  4516                           ; BSR set to: 0
  4517                           
  4518                           ; BSR set to: 0
  4519  000FEC  0100               	movlb	0	; () banked
  4520  000FEE  51B7               	movf	sprintf@prec& (0+255),w,b
  4521  000FF0  0100               	movlb	0	; () banked
  4522  000FF2  11B8               	iorwf	(sprintf@prec+1)& (0+255),w,b
  4523  000FF4  B4D8               	btfsc	status,2,c
  4524  000FF6  D197               	goto	u4720
  4525  000FF8  D7EC               	goto	l277
  4526  000FFA                     l230:
  4527                           
  4528                           ; BSR set to: 0
  4529                           ;doprnt.c: 1246: }
  4530                           ;doprnt.c: 1253: {
  4531                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  4532                           
  4533                           ; BSR set to: 0
  4534  000FFA  C0A4  FFD9         	movff	sprintf@ap,fsr2l
  4535  000FFE  C0A5  FFDA         	movff	sprintf@ap+1,fsr2h
  4536  001002  CFDE F0AA          	movff	postinc2,sprintf@val
  4537  001006  CFDD F0AB          	movff	postdec2,sprintf@val+1
  4538  00100A  0100               	movlb	0	; () banked
  4539  00100C  0E00               	movlw	0
  4540  00100E  BFAB               	btfsc	(sprintf@val+1)& (0+255),7,b
  4541  001010  0EFF               	movlw	-1
  4542  001012  6FAC               	movwf	(sprintf@val+2)& (0+255),b
  4543  001014  6FAD               	movwf	(sprintf@val+3)& (0+255),b
  4544                           
  4545                           ; BSR set to: 0
  4546  001016  0E02               	movlw	2
  4547  001018  0100               	movlb	0	; () banked
  4548  00101A  27A4               	addwf	sprintf@ap& (0+255),f,b
  4549  00101C  0E00               	movlw	0
  4550  00101E  23A5               	addwfc	(sprintf@ap+1)& (0+255),f,b
  4551                           
  4552                           ; BSR set to: 0
  4553                           ;doprnt.c: 1261: if((long)val < 0) {
  4554  001020  0100               	movlb	0	; () banked
  4555  001022  AFAD               	btfss	(sprintf@val+3)& (0+255),7,b
  4556  001024  D00C               	goto	l279
  4557                           
  4558                           ; BSR set to: 0
  4559                           ;doprnt.c: 1262: flag |= 0x03;
  4560  001026  0E03               	movlw	3
  4561  001028  0100               	movlb	0	; () banked
  4562  00102A  13B0               	iorwf	sprintf@flag& (0+255),f,b
  4563                           
  4564                           ; BSR set to: 0
  4565                           ;doprnt.c: 1263: val = -val;
  4566  00102C  0100               	movlb	0	; () banked
  4567  00102E  1FAD               	comf	(sprintf@val+3)& (0+255),f,b
  4568  001030  1FAC               	comf	(sprintf@val+2)& (0+255),f,b
  4569  001032  1FAB               	comf	(sprintf@val+1)& (0+255),f,b
  4570  001034  6DAA               	negf	sprintf@val& (0+255),b
  4571  001036  0E00               	movlw	0
  4572  001038  23AB               	addwfc	(sprintf@val+1)& (0+255),f,b
  4573  00103A  23AC               	addwfc	(sprintf@val+2)& (0+255),f,b
  4574  00103C  23AD               	addwfc	(sprintf@val+3)& (0+255),f,b
  4575  00103E                     l279:
  4576                           
  4577                           ; BSR set to: 0
  4578                           ;doprnt.c: 1264: }
  4579                           ;doprnt.c: 1266: }
  4580                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  4581                           
  4582                           ; BSR set to: 0
  4583  00103E  0100               	movlb	0	; () banked
  4584  001040  51B7               	movf	sprintf@prec& (0+255),w,b
  4585  001042  0100               	movlb	0	; () banked
  4586  001044  11B8               	iorwf	(sprintf@prec+1)& (0+255),w,b
  4587  001046  A4D8               	btfss	status,2,c
  4588  001048  D00D               	goto	l280
  4589                           
  4590                           ; BSR set to: 0
  4591  00104A  0100               	movlb	0	; () banked
  4592  00104C  51AA               	movf	sprintf@val& (0+255),w,b
  4593  00104E  0100               	movlb	0	; () banked
  4594  001050  11AB               	iorwf	(sprintf@val+1)& (0+255),w,b
  4595  001052  0100               	movlb	0	; () banked
  4596  001054  11AC               	iorwf	(sprintf@val+2)& (0+255),w,b
  4597  001056  0100               	movlb	0	; () banked
  4598  001058  11AD               	iorwf	(sprintf@val+3)& (0+255),w,b
  4599  00105A  A4D8               	btfss	status,2,c
  4600  00105C  D003               	goto	l280
  4601                           
  4602                           ; BSR set to: 0
  4603                           ;doprnt.c: 1291: prec++;
  4604  00105E  0100               	movlb	0	; () banked
  4605  001060  4BB7               	infsnz	sprintf@prec& (0+255),f,b
  4606  001062  2BB8               	incf	(sprintf@prec+1)& (0+255),f,b
  4607  001064                     l280:
  4608                           
  4609                           ; BSR set to: 0
  4610                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  4611                           
  4612                           ; BSR set to: 0
  4613  001064  0E01               	movlw	1
  4614  001066  0100               	movlb	0	; () banked
  4615  001068  6FB9               	movwf	sprintf@c& (0+255),b
  4616  00106A                     l3948:
  4617                           
  4618                           ; BSR set to: 0
  4619  00106A  0E0A               	movlw	10
  4620  00106C  0100               	movlb	0	; () banked
  4621  00106E  19B9               	xorwf	sprintf@c& (0+255),w,b
  4622  001070  B4D8               	btfsc	status,2,c
  4623  001072  D01E               	goto	u4570
  4624                           
  4625                           ; BSR set to: 0
  4626                           ;doprnt.c: 1306: if(val < dpowers[c])
  4627                           
  4628                           ; BSR set to: 0
  4629                           
  4630                           ; BSR set to: 0
  4631  001074  0100               	movlb	0	; () banked
  4632  001076  51B9               	movf	sprintf@c& (0+255),w,b
  4633  001078  0D04               	mullw	4
  4634  00107A  0E01               	movlw	low _dpowers
  4635  00107C  24F3               	addwf	prodl,w,c
  4636  00107E  6EF6               	movwf	tblptrl,c
  4637  001080  0E06               	movlw	high _dpowers
  4638  001082  20F4               	addwfc	prodh,w,c
  4639  001084  6EF7               	movwf	tblptrh,c
  4640  001086                     	if	0	;There are less than 3 active tblptr bytes
  4641  001086                     	endif
  4642  001086  0009               	tblrd		*+
  4643  001088  50F5               	movf	tablat,w,c
  4644  00108A  0100               	movlb	0	; () banked
  4645  00108C  5DAA               	subwf	sprintf@val& (0+255),w,b
  4646  00108E  0009               	tblrd		*+
  4647  001090  50F5               	movf	tablat,w,c
  4648  001092  0100               	movlb	0	; () banked
  4649  001094  59AB               	subwfb	(sprintf@val+1)& (0+255),w,b
  4650  001096  0009               	tblrd		*+
  4651  001098  50F5               	movf	tablat,w,c
  4652  00109A  0100               	movlb	0	; () banked
  4653  00109C  59AC               	subwfb	(sprintf@val+2)& (0+255),w,b
  4654  00109E  0009               	tblrd		*+
  4655  0010A0  50F5               	movf	tablat,w,c
  4656  0010A2  0100               	movlb	0	; () banked
  4657  0010A4  59AD               	subwfb	(sprintf@val+3)& (0+255),w,b
  4658  0010A6  A0D8               	btfss	status,0,c
  4659  0010A8  D003               	goto	u4570
  4660                           
  4661                           ; BSR set to: 0
  4662                           
  4663                           ; BSR set to: 0
  4664                           
  4665                           ; BSR set to: 0
  4666                           ;doprnt.c: 1307: break;
  4667  0010AA  0100               	movlb	0	; () banked
  4668  0010AC  2BB9               	incf	sprintf@c& (0+255),f,b
  4669  0010AE  D7DD               	goto	l3948
  4670  0010B0                     u4570:
  4671                           
  4672                           ; BSR set to: 0
  4673                           ;doprnt.c: 1339: if(c < prec)
  4674                           
  4675                           ; BSR set to: 0
  4676  0010B0  0E80               	movlw	128
  4677  0010B2  0100               	movlb	0	; () banked
  4678  0010B4  BFB9               	btfsc	sprintf@c& (0+255),7,b
  4679  0010B6  0E7F               	movlw	127
  4680  0010B8  0100               	movlb	0	; () banked
  4681  0010BA  6F9B               	movwf	??_sprintf& (0+255),b
  4682  0010BC  0100               	movlb	0	; () banked
  4683  0010BE  51B7               	movf	sprintf@prec& (0+255),w,b
  4684  0010C0  0100               	movlb	0	; () banked
  4685  0010C2  5DB9               	subwf	sprintf@c& (0+255),w,b
  4686  0010C4  0100               	movlb	0	; () banked
  4687  0010C6  51B8               	movf	(sprintf@prec+1)& (0+255),w,b
  4688  0010C8  0A80               	xorlw	128
  4689  0010CA  0100               	movlb	0	; () banked
  4690  0010CC  599B               	subwfb	??_sprintf& (0+255),w,b
  4691  0010CE  B0D8               	btfsc	status,0,c
  4692  0010D0  D003               	goto	l284
  4693                           
  4694                           ; BSR set to: 0
  4695                           ;doprnt.c: 1340: c = prec;
  4696  0010D2  C0B7  F0B9         	movff	sprintf@prec,sprintf@c
  4697  0010D6  D018               	goto	l286
  4698  0010D8                     l284:
  4699                           
  4700                           ; BSR set to: 0
  4701                           ;doprnt.c: 1341: else if(prec < c)
  4702                           
  4703                           ; BSR set to: 0
  4704  0010D8  0100               	movlb	0	; () banked
  4705  0010DA  51B8               	movf	(sprintf@prec+1)& (0+255),w,b
  4706  0010DC  0A80               	xorlw	128
  4707  0010DE  0100               	movlb	0	; () banked
  4708  0010E0  6F9B               	movwf	??_sprintf& (0+255),b
  4709  0010E2  0100               	movlb	0	; () banked
  4710  0010E4  51B9               	movf	sprintf@c& (0+255),w,b
  4711  0010E6  0100               	movlb	0	; () banked
  4712  0010E8  5DB7               	subwf	sprintf@prec& (0+255),w,b
  4713  0010EA  0E80               	movlw	128
  4714  0010EC  0100               	movlb	0	; () banked
  4715  0010EE  BFB9               	btfsc	sprintf@c& (0+255),7,b
  4716  0010F0  0E7F               	movlw	127
  4717  0010F2  0100               	movlb	0	; () banked
  4718  0010F4  599B               	subwfb	??_sprintf& (0+255),w,b
  4719  0010F6  B0D8               	btfsc	status,0,c
  4720  0010F8  D007               	goto	l286
  4721                           
  4722                           ; BSR set to: 0
  4723                           ;doprnt.c: 1342: prec = c;
  4724  0010FA  0100               	movlb	0	; () banked
  4725  0010FC  51B9               	movf	sprintf@c& (0+255),w,b
  4726  0010FE  0100               	movlb	0	; () banked
  4727  001100  6FB7               	movwf	sprintf@prec& (0+255),b
  4728  001102  6BB8               	clrf	(sprintf@prec+1)& (0+255),b
  4729  001104  BFB7               	btfsc	sprintf@prec& (0+255),7,b
  4730  001106  07B8               	decf	(sprintf@prec+1)& (0+255),f,b
  4731  001108                     l286:
  4732                           
  4733                           ; BSR set to: 0
  4734                           ;doprnt.c: 1345: if(width && flag & 0x03)
  4735                           
  4736                           ; BSR set to: 0
  4737                           
  4738                           ; BSR set to: 0
  4739  001108  0100               	movlb	0	; () banked
  4740  00110A  51B2               	movf	sprintf@width& (0+255),w,b
  4741  00110C  0100               	movlb	0	; () banked
  4742  00110E  11B3               	iorwf	(sprintf@width+1)& (0+255),w,b
  4743  001110  B4D8               	btfsc	status,2,c
  4744  001112  D014               	goto	l287
  4745                           
  4746                           ; BSR set to: 0
  4747  001114  0E03               	movlw	3
  4748  001116  0100               	movlb	0	; () banked
  4749  001118  15B0               	andwf	sprintf@flag& (0+255),w,b
  4750  00111A  0100               	movlb	0	; () banked
  4751  00111C  6F9B               	movwf	??_sprintf& (0+255),b
  4752  00111E  0E00               	movlw	0
  4753  001120  0100               	movlb	0	; () banked
  4754  001122  15B1               	andwf	(sprintf@flag+1)& (0+255),w,b
  4755  001124  0100               	movlb	0	; () banked
  4756  001126  6F9C               	movwf	(??_sprintf+1)& (0+255),b
  4757  001128  0100               	movlb	0	; () banked
  4758  00112A  519B               	movf	??_sprintf& (0+255),w,b
  4759  00112C  0100               	movlb	0	; () banked
  4760  00112E  119C               	iorwf	(??_sprintf+1)& (0+255),w,b
  4761  001130  B4D8               	btfsc	status,2,c
  4762  001132  D004               	goto	l287
  4763                           
  4764                           ; BSR set to: 0
  4765                           ;doprnt.c: 1346: width--;
  4766  001134  0100               	movlb	0	; () banked
  4767  001136  07B2               	decf	sprintf@width& (0+255),f,b
  4768  001138  A0D8               	btfss	status,0,c
  4769  00113A  07B3               	decf	(sprintf@width+1)& (0+255),f,b
  4770  00113C                     l287:
  4771                           
  4772                           ; BSR set to: 0
  4773                           ;doprnt.c: 1348: if(flag & 0x4000) {
  4774                           
  4775                           ; BSR set to: 0
  4776  00113C  0100               	movlb	0	; () banked
  4777  00113E  ADB1               	btfss	(sprintf@flag+1)& (0+255),6,b
  4778  001140  D01E               	goto	l290
  4779                           
  4780                           ; BSR set to: 0
  4781                           ;doprnt.c: 1349: if(width > prec)
  4782  001142  0100               	movlb	0	; () banked
  4783  001144  51B2               	movf	sprintf@width& (0+255),w,b
  4784  001146  0100               	movlb	0	; () banked
  4785  001148  5DB7               	subwf	sprintf@prec& (0+255),w,b
  4786  00114A  0100               	movlb	0	; () banked
  4787  00114C  51B8               	movf	(sprintf@prec+1)& (0+255),w,b
  4788  00114E  0A80               	xorlw	128
  4789  001150  0100               	movlb	0	; () banked
  4790  001152  6F9B               	movwf	??_sprintf& (0+255),b
  4791  001154  0100               	movlb	0	; () banked
  4792  001156  51B3               	movf	(sprintf@width+1)& (0+255),w,b
  4793  001158  0A80               	xorlw	128
  4794  00115A  0100               	movlb	0	; () banked
  4795  00115C  599B               	subwfb	??_sprintf& (0+255),w,b
  4796  00115E  B0D8               	btfsc	status,0,c
  4797  001160  D009               	goto	l289
  4798                           
  4799                           ; BSR set to: 0
  4800                           ;doprnt.c: 1350: width -= prec;
  4801  001162  0100               	movlb	0	; () banked
  4802  001164  51B7               	movf	sprintf@prec& (0+255),w,b
  4803  001166  0100               	movlb	0	; () banked
  4804  001168  5FB2               	subwf	sprintf@width& (0+255),f,b
  4805  00116A  0100               	movlb	0	; () banked
  4806  00116C  51B8               	movf	(sprintf@prec+1)& (0+255),w,b
  4807  00116E  0100               	movlb	0	; () banked
  4808  001170  5BB3               	subwfb	(sprintf@width+1)& (0+255),f,b
  4809  001172  D005               	goto	l290
  4810  001174                     l289:
  4811                           
  4812                           ; BSR set to: 0
  4813                           ;doprnt.c: 1351: else
  4814                           ;doprnt.c: 1352: width = 0;
  4815                           
  4816                           ; BSR set to: 0
  4817  001174  0E00               	movlw	0
  4818  001176  0100               	movlb	0	; () banked
  4819  001178  6FB3               	movwf	(sprintf@width+1)& (0+255),b
  4820  00117A  0E00               	movlw	0
  4821  00117C  6FB2               	movwf	sprintf@width& (0+255),b
  4822  00117E                     l290:
  4823                           
  4824                           ; BSR set to: 0
  4825                           ;doprnt.c: 1353: }
  4826                           ;doprnt.c: 1381: if(width > c)
  4827                           
  4828                           ; BSR set to: 0
  4829                           
  4830                           ; BSR set to: 0
  4831  00117E  0E80               	movlw	128
  4832  001180  0100               	movlb	0	; () banked
  4833  001182  BFB9               	btfsc	sprintf@c& (0+255),7,b
  4834  001184  0E7F               	movlw	127
  4835  001186  0100               	movlb	0	; () banked
  4836  001188  6F9B               	movwf	??_sprintf& (0+255),b
  4837  00118A  0100               	movlb	0	; () banked
  4838  00118C  51B2               	movf	sprintf@width& (0+255),w,b
  4839  00118E  0100               	movlb	0	; () banked
  4840  001190  5DB9               	subwf	sprintf@c& (0+255),w,b
  4841  001192  0100               	movlb	0	; () banked
  4842  001194  51B3               	movf	(sprintf@width+1)& (0+255),w,b
  4843  001196  0A80               	xorlw	128
  4844  001198  0100               	movlb	0	; () banked
  4845  00119A  599B               	subwfb	??_sprintf& (0+255),w,b
  4846  00119C  B0D8               	btfsc	status,0,c
  4847  00119E  D00B               	goto	l291
  4848                           
  4849                           ; BSR set to: 0
  4850                           ;doprnt.c: 1382: width -= c;
  4851  0011A0  0100               	movlb	0	; () banked
  4852  0011A2  51B9               	movf	sprintf@c& (0+255),w,b
  4853  0011A4  0100               	movlb	0	; () banked
  4854  0011A6  5FB2               	subwf	sprintf@width& (0+255),f,b
  4855  0011A8  0E00               	movlw	0
  4856  0011AA  0100               	movlb	0	; () banked
  4857  0011AC  BFB9               	btfsc	sprintf@c& (0+255),7,b
  4858  0011AE  0EFF               	movlw	255
  4859  0011B0  0100               	movlb	0	; () banked
  4860  0011B2  5BB3               	subwfb	(sprintf@width+1)& (0+255),f,b
  4861  0011B4  D005               	goto	l292
  4862  0011B6                     l291:
  4863                           
  4864                           ; BSR set to: 0
  4865                           ;doprnt.c: 1383: else
  4866                           ;doprnt.c: 1384: width = 0;
  4867                           
  4868                           ; BSR set to: 0
  4869  0011B6  0E00               	movlw	0
  4870  0011B8  0100               	movlb	0	; () banked
  4871  0011BA  6FB3               	movwf	(sprintf@width+1)& (0+255),b
  4872  0011BC  0E00               	movlw	0
  4873  0011BE  6FB2               	movwf	sprintf@width& (0+255),b
  4874  0011C0                     l292:
  4875                           
  4876                           ; BSR set to: 0
  4877                           ;doprnt.c: 1387: if(flag & 0x04) {
  4878                           
  4879                           ; BSR set to: 0
  4880  0011C0  0100               	movlb	0	; () banked
  4881  0011C2  A5B0               	btfss	sprintf@flag& (0+255),2,b
  4882  0011C4  D02D               	goto	l293
  4883                           
  4884                           ; BSR set to: 0
  4885                           ;doprnt.c: 1392: if(flag & 0x03)
  4886  0011C6  0E03               	movlw	3
  4887  0011C8  0100               	movlb	0	; () banked
  4888  0011CA  15B0               	andwf	sprintf@flag& (0+255),w,b
  4889  0011CC  0100               	movlb	0	; () banked
  4890  0011CE  6F9B               	movwf	??_sprintf& (0+255),b
  4891  0011D0  0E00               	movlw	0
  4892  0011D2  0100               	movlb	0	; () banked
  4893  0011D4  15B1               	andwf	(sprintf@flag+1)& (0+255),w,b
  4894  0011D6  0100               	movlb	0	; () banked
  4895  0011D8  6F9C               	movwf	(??_sprintf+1)& (0+255),b
  4896  0011DA  0100               	movlb	0	; () banked
  4897  0011DC  519B               	movf	??_sprintf& (0+255),w,b
  4898  0011DE  0100               	movlb	0	; () banked
  4899  0011E0  119C               	iorwf	(??_sprintf+1)& (0+255),w,b
  4900  0011E2  B4D8               	btfsc	status,2,c
  4901  0011E4  D009               	goto	l294
  4902                           
  4903                           ; BSR set to: 0
  4904                           ;doprnt.c: 1393: ((*sp++ = ('-')));
  4905  0011E6  C094  FFD9         	movff	sprintf@sp,fsr2l
  4906  0011EA  C095  FFDA         	movff	sprintf@sp+1,fsr2h
  4907  0011EE  0E2D               	movlw	45
  4908  0011F0  6EDF               	movwf	indf2,c
  4909                           
  4910                           ; BSR set to: 0
  4911  0011F2  0100               	movlb	0	; () banked
  4912  0011F4  4B94               	infsnz	sprintf@sp& (0+255),f,b
  4913  0011F6  2B95               	incf	(sprintf@sp+1)& (0+255),f,b
  4914  0011F8                     l294:
  4915                           
  4916                           ; BSR set to: 0
  4917                           ;doprnt.c: 1415: if(width)
  4918                           
  4919                           ; BSR set to: 0
  4920  0011F8  0100               	movlb	0	; () banked
  4921  0011FA  51B2               	movf	sprintf@width& (0+255),w,b
  4922  0011FC  0100               	movlb	0	; () banked
  4923  0011FE  11B3               	iorwf	(sprintf@width+1)& (0+255),w,b
  4924  001200  B4D8               	btfsc	status,2,c
  4925  001202  D086               	goto	l303
  4926                           
  4927                           ; BSR set to: 0
  4928                           ;doprnt.c: 1417: ((*sp++ = ('0')));
  4929                           
  4930                           ; BSR set to: 0
  4931                           
  4932                           ;doprnt.c: 1416: do
  4933  001204  C094  FFD9         	movff	sprintf@sp,fsr2l
  4934  001208  C095  FFDA         	movff	sprintf@sp+1,fsr2h
  4935  00120C  0E30               	movlw	48
  4936  00120E  6EDF               	movwf	indf2,c
  4937                           
  4938                           ; BSR set to: 0
  4939  001210  0100               	movlb	0	; () banked
  4940  001212  4B94               	infsnz	sprintf@sp& (0+255),f,b
  4941  001214  2B95               	incf	(sprintf@sp+1)& (0+255),f,b
  4942                           
  4943                           ; BSR set to: 0
  4944                           ;doprnt.c: 1418: while(--width);
  4945  001216  0100               	movlb	0	; () banked
  4946  001218  07B2               	decf	sprintf@width& (0+255),f,b
  4947  00121A  A0D8               	btfss	status,0,c
  4948  00121C  07B3               	decf	(sprintf@width+1)& (0+255),f,b
  4949  00121E  D7EC               	goto	l294
  4950  001220                     l293:
  4951                           
  4952                           ; BSR set to: 0
  4953                           ;doprnt.c: 1422: {
  4954                           ;doprnt.c: 1424: if(width
  4955                           ;doprnt.c: 1428: )
  4956                           
  4957                           ; BSR set to: 0
  4958  001220  0100               	movlb	0	; () banked
  4959  001222  51B2               	movf	sprintf@width& (0+255),w,b
  4960  001224  0100               	movlb	0	; () banked
  4961  001226  11B3               	iorwf	(sprintf@width+1)& (0+255),w,b
  4962  001228  B4D8               	btfsc	status,2,c
  4963  00122A  D013               	goto	u4700
  4964  00122C                     u4690:
  4965                           
  4966                           ; BSR set to: 0
  4967                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  4968                           
  4969                           ; BSR set to: 0
  4970                           
  4971                           ;doprnt.c: 1429: do
  4972  00122C  C094  FFD9         	movff	sprintf@sp,fsr2l
  4973  001230  C095  FFDA         	movff	sprintf@sp+1,fsr2h
  4974  001234  0E20               	movlw	32
  4975  001236  6EDF               	movwf	indf2,c
  4976                           
  4977                           ; BSR set to: 0
  4978  001238  0100               	movlb	0	; () banked
  4979  00123A  4B94               	infsnz	sprintf@sp& (0+255),f,b
  4980  00123C  2B95               	incf	(sprintf@sp+1)& (0+255),f,b
  4981                           
  4982                           ; BSR set to: 0
  4983                           ;doprnt.c: 1431: while(--width);
  4984  00123E  0100               	movlb	0	; () banked
  4985  001240  07B2               	decf	sprintf@width& (0+255),f,b
  4986  001242  A0D8               	btfss	status,0,c
  4987  001244  07B3               	decf	(sprintf@width+1)& (0+255),f,b
  4988  001246  0100               	movlb	0	; () banked
  4989  001248  51B2               	movf	sprintf@width& (0+255),w,b
  4990  00124A  0100               	movlb	0	; () banked
  4991  00124C  11B3               	iorwf	(sprintf@width+1)& (0+255),w,b
  4992  00124E  A4D8               	btfss	status,2,c
  4993  001250  D7ED               	goto	u4690
  4994  001252                     u4700:
  4995                           
  4996                           ; BSR set to: 0
  4997                           ;doprnt.c: 1438: if(flag & 0x03)
  4998                           
  4999                           ; BSR set to: 0
  5000                           
  5001                           ; BSR set to: 0
  5002  001252  0E03               	movlw	3
  5003  001254  0100               	movlb	0	; () banked
  5004  001256  15B0               	andwf	sprintf@flag& (0+255),w,b
  5005  001258  0100               	movlb	0	; () banked
  5006  00125A  6F9B               	movwf	??_sprintf& (0+255),b
  5007  00125C  0E00               	movlw	0
  5008  00125E  0100               	movlb	0	; () banked
  5009  001260  15B1               	andwf	(sprintf@flag+1)& (0+255),w,b
  5010  001262  0100               	movlb	0	; () banked
  5011  001264  6F9C               	movwf	(??_sprintf+1)& (0+255),b
  5012  001266  0100               	movlb	0	; () banked
  5013  001268  519B               	movf	??_sprintf& (0+255),w,b
  5014  00126A  0100               	movlb	0	; () banked
  5015  00126C  119C               	iorwf	(??_sprintf+1)& (0+255),w,b
  5016  00126E  B4D8               	btfsc	status,2,c
  5017  001270  D04F               	goto	l303
  5018                           
  5019                           ; BSR set to: 0
  5020                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  5021  001272  C094  FFD9         	movff	sprintf@sp,fsr2l
  5022  001276  C095  FFDA         	movff	sprintf@sp+1,fsr2h
  5023  00127A  0E2D               	movlw	45
  5024  00127C  6EDF               	movwf	indf2,c
  5025  00127E  D045               	goto	l4022
  5026  001280                     l4018:
  5027                           
  5028                           ; BSR set to: 0
  5029                           ;doprnt.c: 1478: {
  5030                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  5031  001280  C0B7  F09B         	movff	sprintf@prec,??_sprintf
  5032  001284  C0B8  F09C         	movff	sprintf@prec+1,??_sprintf+1
  5033  001288  0100               	movlb	0	; () banked
  5034  00128A  90D8               	bcf	status,0,c
  5035  00128C  379B               	rlcf	??_sprintf& (0+255),f,b
  5036  00128E  379C               	rlcf	(??_sprintf+1)& (0+255),f,b
  5037  001290  0100               	movlb	0	; () banked
  5038  001292  90D8               	bcf	status,0,c
  5039  001294  379B               	rlcf	??_sprintf& (0+255),f,b
  5040  001296  379C               	rlcf	(??_sprintf+1)& (0+255),f,b
  5041  001298  0E01               	movlw	low _dpowers
  5042  00129A  0100               	movlb	0	; () banked
  5043  00129C  259B               	addwf	??_sprintf& (0+255),w,b
  5044  00129E  6EF6               	movwf	tblptrl,c
  5045  0012A0  0E06               	movlw	high _dpowers
  5046  0012A2  219C               	addwfc	(??_sprintf+1)& (0+255),w,b
  5047  0012A4  6EF7               	movwf	tblptrh,c
  5048  0012A6                     	if	0	;There are less than 3 active tblptr bytes
  5049  0012A6                     	endif
  5050  0012A6  0009               	tblrd		*+
  5051  0012A8  CFF5 F01B          	movff	tablat,___lldiv@divisor
  5052  0012AC  0009               	tblrd		*+
  5053  0012AE  CFF5 F01C          	movff	tablat,___lldiv@divisor+1
  5054  0012B2  0009               	tblrd		*+
  5055  0012B4  CFF5 F01D          	movff	tablat,___lldiv@divisor+2
  5056  0012B8  000A               	tblrd		*-
  5057  0012BA  CFF5 F01E          	movff	tablat,___lldiv@divisor+3
  5058  0012BE  C0AA  F017         	movff	sprintf@val,___lldiv@dividend
  5059  0012C2  C0AB  F018         	movff	sprintf@val+1,___lldiv@dividend+1
  5060  0012C6  C0AC  F019         	movff	sprintf@val+2,___lldiv@dividend+2
  5061  0012CA  C0AD  F01A         	movff	sprintf@val+3,___lldiv@dividend+3
  5062  0012CE  EC99  F015         	call	___lldiv	;wreg free
  5063  0012D2  C017  F024         	movff	?___lldiv,___llmod@dividend
  5064  0012D6  C018  F025         	movff	?___lldiv+1,___llmod@dividend+1
  5065  0012DA  C019  F026         	movff	?___lldiv+2,___llmod@dividend+2
  5066  0012DE  C01A  F027         	movff	?___lldiv+3,___llmod@dividend+3
  5067  0012E2  0E0A               	movlw	10
  5068  0012E4  6E28               	movwf	___llmod@divisor,c
  5069  0012E6  0E00               	movlw	0
  5070  0012E8  6E29               	movwf	___llmod@divisor+1,c
  5071  0012EA  0E00               	movlw	0
  5072  0012EC  6E2A               	movwf	___llmod@divisor+2,c
  5073  0012EE  0E00               	movlw	0
  5074  0012F0  6E2B               	movwf	___llmod@divisor+3,c
  5075  0012F2  EC12  F016         	call	___llmod	;wreg free
  5076  0012F6  5024               	movf	?___llmod,w,c
  5077  0012F8  0F30               	addlw	48
  5078  0012FA  0100               	movlb	0	; () banked
  5079  0012FC  6FB9               	movwf	sprintf@c& (0+255),b
  5080                           
  5081                           ; BSR set to: 0
  5082                           ;doprnt.c: 1523: }
  5083                           ;doprnt.c: 1524: ((*sp++ = (c)));
  5084  0012FE  C094  FFD9         	movff	sprintf@sp,fsr2l
  5085  001302  C095  FFDA         	movff	sprintf@sp+1,fsr2h
  5086  001306  C0B9  FFDF         	movff	sprintf@c,indf2
  5087  00130A                     l4022:
  5088                           
  5089                           ; BSR set to: 0
  5090  00130A  0100               	movlb	0	; () banked
  5091  00130C  4B94               	infsnz	sprintf@sp& (0+255),f,b
  5092  00130E  2B95               	incf	(sprintf@sp+1)& (0+255),f,b
  5093  001310                     l303:
  5094                           
  5095                           ; BSR set to: 0
  5096                           
  5097                           ; BSR set to: 0
  5098  001310  0100               	movlb	0	; () banked
  5099  001312  07B7               	decf	sprintf@prec& (0+255),f,b
  5100  001314  A0D8               	btfss	status,0,c
  5101  001316  07B8               	decf	(sprintf@prec+1)& (0+255),f,b
  5102  001318  0100               	movlb	0	; () banked
  5103  00131A  29B7               	incf	sprintf@prec& (0+255),w,b
  5104  00131C  E1B1               	bnz	l4018
  5105  00131E  0100               	movlb	0	; () banked
  5106  001320  29B8               	incf	(sprintf@prec+1)& (0+255),w,b
  5107  001322  A4D8               	btfss	status,2,c
  5108  001324  D7AD               	goto	l304
  5109  001326                     u4720:
  5110                           
  5111                           ; BSR set to: 0
  5112                           
  5113                           ; BSR set to: 0
  5114                           
  5115                           ; BSR set to: 0
  5116  001326  C096  FFF6         	movff	sprintf@f,tblptrl
  5117  00132A  C097  FFF7         	movff	sprintf@f+1,tblptrh
  5118  00132E  0100               	movlb	0	; () banked
  5119  001330  4B96               	infsnz	sprintf@f& (0+255),f,b
  5120  001332  2B97               	incf	(sprintf@f+1)& (0+255),f,b
  5121  001334                     	if	0	;tblptru may be non-zero
  5122  001334                     	endif
  5123  001334                     	if	0	;tblptru may be non-zero
  5124  001334                     	endif
  5125  001334  0008               	tblrd		*
  5126  001336  CFF5 F0B9          	movff	tablat,sprintf@c
  5127  00133A  0100               	movlb	0	; () banked
  5128  00133C  51B9               	movf	sprintf@c& (0+255),w,b
  5129  00133E  A4D8               	btfss	status,2,c
  5130  001340  EF85  F003         	goto	l206
  5131  001344                     u4730:
  5132                           
  5133                           ; BSR set to: 0
  5134                           ;doprnt.c: 1538: *sp = 0;
  5135                           
  5136                           ; BSR set to: 0
  5137                           
  5138                           ;doprnt.c: 1525: }
  5139                           ;doprnt.c: 1533: }
  5140                           ;doprnt.c: 1535: alldone:
  5141                           
  5142                           ; BSR set to: 0
  5143  001344  C094  FFD9         	movff	sprintf@sp,fsr2l
  5144  001348  C095  FFDA         	movff	sprintf@sp+1,fsr2h
  5145  00134C  0E00               	movlw	0
  5146  00134E  6EDF               	movwf	indf2,c
  5147  001350  0012               	return	
  5148  001352                     __end_of_sprintf:
  5149                           	opt stack 0
  5150                           tblptru	equ	0xFF8
  5151                           tblptrh	equ	0xFF7
  5152                           tblptrl	equ	0xFF6
  5153                           tablat	equ	0xFF5
  5154                           prodh	equ	0xFF4
  5155                           prodl	equ	0xFF3
  5156                           intcon	equ	0xFF2
  5157                           intcon2	equ	0xFF1
  5158                           indf0	equ	0xFEF
  5159                           postinc0	equ	0xFEE
  5160                           fsr0h	equ	0xFEA
  5161                           fsr0l	equ	0xFE9
  5162                           wreg	equ	0xFE8
  5163                           indf2	equ	0xFDF
  5164                           postinc2	equ	0xFDE
  5165                           postdec2	equ	0xFDD
  5166                           fsr2h	equ	0xFDA
  5167                           fsr2l	equ	0xFD9
  5168                           status	equ	0xFD8
  5169                           
  5170 ;; *************** function _scale *****************
  5171 ;; Defined at:
  5172 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\doprnt.c"
  5173 ;; Parameters:    Size  Location     Type
  5174 ;;  scl             1    wreg     char 
  5175 ;; Auto vars:     Size  Location     Type
  5176 ;;  scl             1   36[BANK0 ] char 
  5177 ;; Return value:  Size  Location     Type
  5178 ;;                  3   30[BANK0 ] char 
  5179 ;; Registers used:
  5180 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5181 ;; Tracked objects:
  5182 ;;		On entry : 0/0
  5183 ;;		On exit  : 0/0
  5184 ;;		Unchanged: 0/0
  5185 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5186 ;;      Params:         0       3       0       0       0       0       0
  5187 ;;      Locals:         0       4       0       0       0       0       0
  5188 ;;      Temps:          0       0       0       0       0       0       0
  5189 ;;      Totals:         0       7       0       0       0       0       0
  5190 ;;Total ram usage:        7 bytes
  5191 ;; Hardware stack levels used:    1
  5192 ;; Hardware stack levels required when called:    5
  5193 ;; This function calls:
  5194 ;;		___awdiv
  5195 ;;		___awmod
  5196 ;;		___ftmul
  5197 ;;		___wmul
  5198 ;; This function is called by:
  5199 ;;		_sprintf
  5200 ;; This function uses a non-reentrant model
  5201 ;;
  5202                           
  5203                           	psect	text14
  5204  001352                     __ptext14:
  5205                           	opt stack 0
  5206  001352                     _scale:
  5207                           	opt stack 23
  5208                           
  5209                           ; BSR set to: 0
  5210                           ;incstack = 0
  5211                           ;scale@scl stored from wreg
  5212  001352  0100               	movlb	0	; () banked
  5213  001354  6F84               	movwf	scale@scl& (0+255),b
  5214                           
  5215                           ;doprnt.c: 428: if(scl < 0) {
  5216  001356  0100               	movlb	0	; () banked
  5217  001358  AF84               	btfss	scale@scl& (0+255),7,b
  5218  00135A  D10A               	goto	l195
  5219                           
  5220                           ; BSR set to: 0
  5221                           ;doprnt.c: 429: scl = -scl;
  5222  00135C  0100               	movlb	0	; () banked
  5223  00135E  6D84               	negf	scale@scl& (0+255),b
  5224                           
  5225                           ;doprnt.c: 430: if(scl>=110)
  5226  001360  0100               	movlb	0	; () banked
  5227  001362  5184               	movf	scale@scl& (0+255),w,b
  5228  001364  0A80               	xorlw	128
  5229  001366  0F12               	addlw	-238
  5230  001368  A0D8               	btfss	status,0,c
  5231  00136A  D094               	goto	l196
  5232                           
  5233                           ; BSR set to: 0
  5234                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  5235  00136C  0E00               	movlw	0
  5236  00136E  6E28               	movwf	___wmul@multiplicand+1,c
  5237  001370  0E03               	movlw	3
  5238  001372  6E27               	movwf	___wmul@multiplicand,c
  5239  001374  0E00               	movlw	0
  5240  001376  6E20               	movwf	___awdiv@divisor+1,c
  5241  001378  0E0A               	movlw	10
  5242  00137A  6E1F               	movwf	___awdiv@divisor,c
  5243  00137C  0E00               	movlw	0
  5244  00137E  6E1A               	movwf	___awmod@divisor+1,c
  5245  001380  0E64               	movlw	100
  5246  001382  6E19               	movwf	___awmod@divisor,c
  5247  001384  0100               	movlb	0	; () banked
  5248  001386  5184               	movf	scale@scl& (0+255),w,b
  5249  001388  6E17               	movwf	___awmod@dividend,c
  5250  00138A  6A18               	clrf	___awmod@dividend+1,c
  5251  00138C  BE17               	btfsc	___awmod@dividend,7,c
  5252  00138E  0618               	decf	___awmod@dividend+1,f,c
  5253  001390  ECDA  F015         	call	___awmod	;wreg free
  5254  001394  C017  F01D         	movff	?___awmod,___awdiv@dividend
  5255  001398  C018  F01E         	movff	?___awmod+1,___awdiv@dividend+1
  5256  00139C  EC57  F015         	call	___awdiv	;wreg free
  5257  0013A0  0E09               	movlw	9
  5258  0013A2  241D               	addwf	?___awdiv,w,c
  5259  0013A4  6E25               	movwf	___wmul@multiplier,c
  5260  0013A6  0E00               	movlw	0
  5261  0013A8  201E               	addwfc	?___awdiv+1,w,c
  5262  0013AA  6E26               	movwf	___wmul@multiplier+1,c
  5263  0013AC  ECC4  F017         	call	___wmul	;wreg free
  5264  0013B0  0E50               	movlw	low __npowers_
  5265  0013B2  2425               	addwf	?___wmul,w,c
  5266  0013B4  6EF6               	movwf	tblptrl,c
  5267  0013B6  0E06               	movlw	high __npowers_
  5268  0013B8  2026               	addwfc	?___wmul+1,w,c
  5269  0013BA  6EF7               	movwf	tblptrh,c
  5270  0013BC                     	if	0	;There are less than 3 active tblptr bytes
  5271  0013BC                     	endif
  5272  0013BC  0009               	tblrd		*+
  5273  0013BE  CFF5 F072          	movff	tablat,___ftmul@f2
  5274  0013C2  0009               	tblrd		*+
  5275  0013C4  CFF5 F073          	movff	tablat,___ftmul@f2+1
  5276  0013C8  000A               	tblrd		*-
  5277  0013CA  CFF5 F074          	movff	tablat,___ftmul@f2+2
  5278  0013CE  0E00               	movlw	0
  5279  0013D0  6E20               	movwf	___awdiv@divisor+1,c
  5280  0013D2  0E64               	movlw	100
  5281  0013D4  6E1F               	movwf	___awdiv@divisor,c
  5282  0013D6  0100               	movlb	0	; () banked
  5283  0013D8  5184               	movf	scale@scl& (0+255),w,b
  5284  0013DA  6E1D               	movwf	___awdiv@dividend,c
  5285  0013DC  6A1E               	clrf	___awdiv@dividend+1,c
  5286  0013DE  BE1D               	btfsc	___awdiv@dividend,7,c
  5287  0013E0  061E               	decf	___awdiv@dividend+1,f,c
  5288  0013E2  EC57  F015         	call	___awdiv	;wreg free
  5289  0013E6  0E12               	movlw	18
  5290  0013E8  241D               	addwf	?___awdiv,w,c
  5291  0013EA  6E25               	movwf	___wmul@multiplier,c
  5292  0013EC  0E00               	movlw	0
  5293  0013EE  201E               	addwfc	?___awdiv+1,w,c
  5294  0013F0  6E26               	movwf	___wmul@multiplier+1,c
  5295  0013F2  0E00               	movlw	0
  5296  0013F4  6E28               	movwf	___wmul@multiplicand+1,c
  5297  0013F6  0E03               	movlw	3
  5298  0013F8  6E27               	movwf	___wmul@multiplicand,c
  5299  0013FA  ECC4  F017         	call	___wmul	;wreg free
  5300  0013FE  0E50               	movlw	low __npowers_
  5301  001400  2425               	addwf	?___wmul,w,c
  5302  001402  6EF6               	movwf	tblptrl,c
  5303  001404  0E06               	movlw	high __npowers_
  5304  001406  2026               	addwfc	?___wmul+1,w,c
  5305  001408  6EF7               	movwf	tblptrh,c
  5306  00140A                     	if	0	;There are less than 3 active tblptr bytes
  5307  00140A                     	endif
  5308  00140A  0009               	tblrd		*+
  5309  00140C  CFF5 F06F          	movff	tablat,___ftmul@f1
  5310  001410  0009               	tblrd		*+
  5311  001412  CFF5 F070          	movff	tablat,___ftmul@f1+1
  5312  001416  000A               	tblrd		*-
  5313  001418  CFF5 F071          	movff	tablat,___ftmul@f1+2
  5314  00141C  EC23  F010         	call	___ftmul	;wreg free
  5315  001420  C06F  F081         	movff	?___ftmul,_scale$1526
  5316  001424  C070  F082         	movff	?___ftmul+1,_scale$1526+1
  5317  001428  C071  F083         	movff	?___ftmul+2,_scale$1526+2
  5318                           
  5319                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  5320  00142C  C081  F06F         	movff	_scale$1526,___ftmul@f1
  5321  001430  C082  F070         	movff	_scale$1526+1,___ftmul@f1+1
  5322  001434  C083  F071         	movff	_scale$1526+2,___ftmul@f1+2
  5323  001438  0E00               	movlw	0
  5324  00143A  6E28               	movwf	___wmul@multiplicand+1,c
  5325  00143C  0E03               	movlw	3
  5326  00143E  6E27               	movwf	___wmul@multiplicand,c
  5327  001440  0E00               	movlw	0
  5328  001442  6E1A               	movwf	___awmod@divisor+1,c
  5329  001444  0E0A               	movlw	10
  5330  001446  6E19               	movwf	___awmod@divisor,c
  5331  001448  0100               	movlb	0	; () banked
  5332  00144A  5184               	movf	scale@scl& (0+255),w,b
  5333  00144C  6E17               	movwf	___awmod@dividend,c
  5334  00144E  6A18               	clrf	___awmod@dividend+1,c
  5335  001450  BE17               	btfsc	___awmod@dividend,7,c
  5336  001452  0618               	decf	___awmod@dividend+1,f,c
  5337  001454  ECDA  F015         	call	___awmod	;wreg free
  5338  001458  C017  F025         	movff	?___awmod,___wmul@multiplier
  5339  00145C  C018  F026         	movff	?___awmod+1,___wmul@multiplier+1
  5340  001460  ECC4  F017         	call	___wmul	;wreg free
  5341  001464  0E50               	movlw	low __npowers_
  5342  001466  2425               	addwf	?___wmul,w,c
  5343  001468  6EF6               	movwf	tblptrl,c
  5344  00146A  0E06               	movlw	high __npowers_
  5345  00146C  2026               	addwfc	?___wmul+1,w,c
  5346  00146E  6EF7               	movwf	tblptrh,c
  5347  001470                     	if	0	;There are less than 3 active tblptr bytes
  5348  001470                     	endif
  5349  001470  0009               	tblrd		*+
  5350  001472  CFF5 F072          	movff	tablat,___ftmul@f2
  5351  001476  0009               	tblrd		*+
  5352  001478  CFF5 F073          	movff	tablat,___ftmul@f2+1
  5353  00147C  000A               	tblrd		*-
  5354  00147E  CFF5 F074          	movff	tablat,___ftmul@f2+2
  5355  001482  EC23  F010         	call	___ftmul	;wreg free
  5356  001486  C06F  F07E         	movff	?___ftmul,?_scale
  5357  00148A  C070  F07F         	movff	?___ftmul+1,?_scale+1
  5358  00148E  C071  F080         	movff	?___ftmul+2,?_scale+2
  5359  001492  0012               	return	
  5360  001494                     l196:
  5361                           
  5362                           ;doprnt.c: 432: else if(scl > 10)
  5363  001494  0100               	movlb	0	; () banked
  5364  001496  5184               	movf	scale@scl& (0+255),w,b
  5365  001498  0A80               	xorlw	128
  5366  00149A  0F75               	addlw	-139
  5367  00149C  A0D8               	btfss	status,0,c
  5368  00149E  D055               	goto	l199
  5369                           
  5370                           ; BSR set to: 0
  5371                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  5372  0014A0  0E00               	movlw	0
  5373  0014A2  6E20               	movwf	___awdiv@divisor+1,c
  5374  0014A4  0E0A               	movlw	10
  5375  0014A6  6E1F               	movwf	___awdiv@divisor,c
  5376  0014A8  0100               	movlb	0	; () banked
  5377  0014AA  5184               	movf	scale@scl& (0+255),w,b
  5378  0014AC  6E1D               	movwf	___awdiv@dividend,c
  5379  0014AE  6A1E               	clrf	___awdiv@dividend+1,c
  5380  0014B0  BE1D               	btfsc	___awdiv@dividend,7,c
  5381  0014B2  061E               	decf	___awdiv@dividend+1,f,c
  5382  0014B4  EC57  F015         	call	___awdiv	;wreg free
  5383  0014B8  0E09               	movlw	9
  5384  0014BA  241D               	addwf	?___awdiv,w,c
  5385  0014BC  6E25               	movwf	___wmul@multiplier,c
  5386  0014BE  0E00               	movlw	0
  5387  0014C0  201E               	addwfc	?___awdiv+1,w,c
  5388  0014C2  6E26               	movwf	___wmul@multiplier+1,c
  5389  0014C4  0E00               	movlw	0
  5390  0014C6  6E28               	movwf	___wmul@multiplicand+1,c
  5391  0014C8  0E03               	movlw	3
  5392  0014CA  6E27               	movwf	___wmul@multiplicand,c
  5393  0014CC  ECC4  F017         	call	___wmul	;wreg free
  5394  0014D0  0E50               	movlw	low __npowers_
  5395  0014D2  2425               	addwf	?___wmul,w,c
  5396  0014D4  6EF6               	movwf	tblptrl,c
  5397  0014D6  0E06               	movlw	high __npowers_
  5398  0014D8  2026               	addwfc	?___wmul+1,w,c
  5399  0014DA  6EF7               	movwf	tblptrh,c
  5400  0014DC                     	if	0	;There are less than 3 active tblptr bytes
  5401  0014DC                     	endif
  5402  0014DC  0009               	tblrd		*+
  5403  0014DE  CFF5 F06F          	movff	tablat,___ftmul@f1
  5404  0014E2  0009               	tblrd		*+
  5405  0014E4  CFF5 F070          	movff	tablat,___ftmul@f1+1
  5406  0014E8  000A               	tblrd		*-
  5407  0014EA  CFF5 F071          	movff	tablat,___ftmul@f1+2
  5408  0014EE  0E00               	movlw	0
  5409  0014F0  6E28               	movwf	___wmul@multiplicand+1,c
  5410  0014F2  0E03               	movlw	3
  5411  0014F4  6E27               	movwf	___wmul@multiplicand,c
  5412  0014F6  0E00               	movlw	0
  5413  0014F8  6E1A               	movwf	___awmod@divisor+1,c
  5414  0014FA  0E0A               	movlw	10
  5415  0014FC  6E19               	movwf	___awmod@divisor,c
  5416  0014FE  0100               	movlb	0	; () banked
  5417  001500  5184               	movf	scale@scl& (0+255),w,b
  5418  001502  6E17               	movwf	___awmod@dividend,c
  5419  001504  6A18               	clrf	___awmod@dividend+1,c
  5420  001506  BE17               	btfsc	___awmod@dividend,7,c
  5421  001508  0618               	decf	___awmod@dividend+1,f,c
  5422  00150A  ECDA  F015         	call	___awmod	;wreg free
  5423  00150E  C017  F025         	movff	?___awmod,___wmul@multiplier
  5424  001512  C018  F026         	movff	?___awmod+1,___wmul@multiplier+1
  5425  001516  ECC4  F017         	call	___wmul	;wreg free
  5426  00151A  0E50               	movlw	low __npowers_
  5427  00151C  2425               	addwf	?___wmul,w,c
  5428  00151E  6EF6               	movwf	tblptrl,c
  5429  001520  0E06               	movlw	high __npowers_
  5430  001522  2026               	addwfc	?___wmul+1,w,c
  5431  001524  6EF7               	movwf	tblptrh,c
  5432  001526                     	if	0	;There are less than 3 active tblptr bytes
  5433  001526                     	endif
  5434  001526  0009               	tblrd		*+
  5435  001528  CFF5 F072          	movff	tablat,___ftmul@f2
  5436  00152C  0009               	tblrd		*+
  5437  00152E  CFF5 F073          	movff	tablat,___ftmul@f2+1
  5438  001532  000A               	tblrd		*-
  5439  001534  CFF5 F074          	movff	tablat,___ftmul@f2+2
  5440  001538  EC23  F010         	call	___ftmul	;wreg free
  5441  00153C  C06F  F07E         	movff	?___ftmul,?_scale
  5442  001540  C070  F07F         	movff	?___ftmul+1,?_scale+1
  5443  001544  C071  F080         	movff	?___ftmul+2,?_scale+2
  5444  001548  0012               	return	
  5445  00154A                     l199:
  5446                           
  5447                           ;doprnt.c: 434: return _npowers_[scl];
  5448  00154A  0100               	movlb	0	; () banked
  5449  00154C  5184               	movf	scale@scl& (0+255),w,b
  5450  00154E  0D03               	mullw	3
  5451  001550  0E50               	movlw	low __npowers_
  5452  001552  24F3               	addwf	prodl,w,c
  5453  001554  6EF6               	movwf	tblptrl,c
  5454  001556  0E06               	movlw	high __npowers_
  5455  001558  20F4               	addwfc	prodh,w,c
  5456  00155A  6EF7               	movwf	tblptrh,c
  5457  00155C                     	if	0	;There are less than 3 active tblptr bytes
  5458  00155C                     	endif
  5459  00155C  0009               	tblrd		*+
  5460  00155E  CFF5 F07E          	movff	tablat,?_scale
  5461  001562  0009               	tblrd		*+
  5462  001564  CFF5 F07F          	movff	tablat,?_scale+1
  5463  001568  000A               	tblrd		*-
  5464  00156A  CFF5 F080          	movff	tablat,?_scale+2
  5465                           
  5466                           ; BSR set to: 0
  5467  00156E  0012               	return	
  5468  001570                     l195:
  5469                           
  5470                           ; BSR set to: 0
  5471                           ;doprnt.c: 435: }
  5472                           ;doprnt.c: 436: if(scl>=110)
  5473                           
  5474                           ; BSR set to: 0
  5475  001570  0100               	movlb	0	; () banked
  5476  001572  5184               	movf	scale@scl& (0+255),w,b
  5477  001574  0A80               	xorlw	128
  5478  001576  0F12               	addlw	-238
  5479  001578  A0D8               	btfss	status,0,c
  5480  00157A  D094               	goto	l200
  5481                           
  5482                           ; BSR set to: 0
  5483                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  5484  00157C  0E00               	movlw	0
  5485  00157E  6E28               	movwf	___wmul@multiplicand+1,c
  5486  001580  0E03               	movlw	3
  5487  001582  6E27               	movwf	___wmul@multiplicand,c
  5488  001584  0E00               	movlw	0
  5489  001586  6E20               	movwf	___awdiv@divisor+1,c
  5490  001588  0E0A               	movlw	10
  5491  00158A  6E1F               	movwf	___awdiv@divisor,c
  5492  00158C  0E00               	movlw	0
  5493  00158E  6E1A               	movwf	___awmod@divisor+1,c
  5494  001590  0E64               	movlw	100
  5495  001592  6E19               	movwf	___awmod@divisor,c
  5496  001594  0100               	movlb	0	; () banked
  5497  001596  5184               	movf	scale@scl& (0+255),w,b
  5498  001598  6E17               	movwf	___awmod@dividend,c
  5499  00159A  6A18               	clrf	___awmod@dividend+1,c
  5500  00159C  BE17               	btfsc	___awmod@dividend,7,c
  5501  00159E  0618               	decf	___awmod@dividend+1,f,c
  5502  0015A0  ECDA  F015         	call	___awmod	;wreg free
  5503  0015A4  C017  F01D         	movff	?___awmod,___awdiv@dividend
  5504  0015A8  C018  F01E         	movff	?___awmod+1,___awdiv@dividend+1
  5505  0015AC  EC57  F015         	call	___awdiv	;wreg free
  5506  0015B0  0E09               	movlw	9
  5507  0015B2  241D               	addwf	?___awdiv,w,c
  5508  0015B4  6E25               	movwf	___wmul@multiplier,c
  5509  0015B6  0E00               	movlw	0
  5510  0015B8  201E               	addwfc	?___awdiv+1,w,c
  5511  0015BA  6E26               	movwf	___wmul@multiplier+1,c
  5512  0015BC  ECC4  F017         	call	___wmul	;wreg free
  5513  0015C0  0E29               	movlw	low __powers_
  5514  0015C2  2425               	addwf	?___wmul,w,c
  5515  0015C4  6EF6               	movwf	tblptrl,c
  5516  0015C6  0E06               	movlw	high __powers_
  5517  0015C8  2026               	addwfc	?___wmul+1,w,c
  5518  0015CA  6EF7               	movwf	tblptrh,c
  5519  0015CC                     	if	0	;There are less than 3 active tblptr bytes
  5520  0015CC                     	endif
  5521  0015CC  0009               	tblrd		*+
  5522  0015CE  CFF5 F072          	movff	tablat,___ftmul@f2
  5523  0015D2  0009               	tblrd		*+
  5524  0015D4  CFF5 F073          	movff	tablat,___ftmul@f2+1
  5525  0015D8  000A               	tblrd		*-
  5526  0015DA  CFF5 F074          	movff	tablat,___ftmul@f2+2
  5527  0015DE  0E00               	movlw	0
  5528  0015E0  6E20               	movwf	___awdiv@divisor+1,c
  5529  0015E2  0E64               	movlw	100
  5530  0015E4  6E1F               	movwf	___awdiv@divisor,c
  5531  0015E6  0100               	movlb	0	; () banked
  5532  0015E8  5184               	movf	scale@scl& (0+255),w,b
  5533  0015EA  6E1D               	movwf	___awdiv@dividend,c
  5534  0015EC  6A1E               	clrf	___awdiv@dividend+1,c
  5535  0015EE  BE1D               	btfsc	___awdiv@dividend,7,c
  5536  0015F0  061E               	decf	___awdiv@dividend+1,f,c
  5537  0015F2  EC57  F015         	call	___awdiv	;wreg free
  5538  0015F6  0E12               	movlw	18
  5539  0015F8  241D               	addwf	?___awdiv,w,c
  5540  0015FA  6E25               	movwf	___wmul@multiplier,c
  5541  0015FC  0E00               	movlw	0
  5542  0015FE  201E               	addwfc	?___awdiv+1,w,c
  5543  001600  6E26               	movwf	___wmul@multiplier+1,c
  5544  001602  0E00               	movlw	0
  5545  001604  6E28               	movwf	___wmul@multiplicand+1,c
  5546  001606  0E03               	movlw	3
  5547  001608  6E27               	movwf	___wmul@multiplicand,c
  5548  00160A  ECC4  F017         	call	___wmul	;wreg free
  5549  00160E  0E29               	movlw	low __powers_
  5550  001610  2425               	addwf	?___wmul,w,c
  5551  001612  6EF6               	movwf	tblptrl,c
  5552  001614  0E06               	movlw	high __powers_
  5553  001616  2026               	addwfc	?___wmul+1,w,c
  5554  001618  6EF7               	movwf	tblptrh,c
  5555  00161A                     	if	0	;There are less than 3 active tblptr bytes
  5556  00161A                     	endif
  5557  00161A  0009               	tblrd		*+
  5558  00161C  CFF5 F06F          	movff	tablat,___ftmul@f1
  5559  001620  0009               	tblrd		*+
  5560  001622  CFF5 F070          	movff	tablat,___ftmul@f1+1
  5561  001626  000A               	tblrd		*-
  5562  001628  CFF5 F071          	movff	tablat,___ftmul@f1+2
  5563  00162C  EC23  F010         	call	___ftmul	;wreg free
  5564  001630  C06F  F081         	movff	?___ftmul,_scale$1526
  5565  001634  C070  F082         	movff	?___ftmul+1,_scale$1526+1
  5566  001638  C071  F083         	movff	?___ftmul+2,_scale$1526+2
  5567                           
  5568                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  5569  00163C  C081  F06F         	movff	_scale$1526,___ftmul@f1
  5570  001640  C082  F070         	movff	_scale$1526+1,___ftmul@f1+1
  5571  001644  C083  F071         	movff	_scale$1526+2,___ftmul@f1+2
  5572  001648  0E00               	movlw	0
  5573  00164A  6E28               	movwf	___wmul@multiplicand+1,c
  5574  00164C  0E03               	movlw	3
  5575  00164E  6E27               	movwf	___wmul@multiplicand,c
  5576  001650  0E00               	movlw	0
  5577  001652  6E1A               	movwf	___awmod@divisor+1,c
  5578  001654  0E0A               	movlw	10
  5579  001656  6E19               	movwf	___awmod@divisor,c
  5580  001658  0100               	movlb	0	; () banked
  5581  00165A  5184               	movf	scale@scl& (0+255),w,b
  5582  00165C  6E17               	movwf	___awmod@dividend,c
  5583  00165E  6A18               	clrf	___awmod@dividend+1,c
  5584  001660  BE17               	btfsc	___awmod@dividend,7,c
  5585  001662  0618               	decf	___awmod@dividend+1,f,c
  5586  001664  ECDA  F015         	call	___awmod	;wreg free
  5587  001668  C017  F025         	movff	?___awmod,___wmul@multiplier
  5588  00166C  C018  F026         	movff	?___awmod+1,___wmul@multiplier+1
  5589  001670  ECC4  F017         	call	___wmul	;wreg free
  5590  001674  0E29               	movlw	low __powers_
  5591  001676  2425               	addwf	?___wmul,w,c
  5592  001678  6EF6               	movwf	tblptrl,c
  5593  00167A  0E06               	movlw	high __powers_
  5594  00167C  2026               	addwfc	?___wmul+1,w,c
  5595  00167E  6EF7               	movwf	tblptrh,c
  5596  001680                     	if	0	;There are less than 3 active tblptr bytes
  5597  001680                     	endif
  5598  001680  0009               	tblrd		*+
  5599  001682  CFF5 F072          	movff	tablat,___ftmul@f2
  5600  001686  0009               	tblrd		*+
  5601  001688  CFF5 F073          	movff	tablat,___ftmul@f2+1
  5602  00168C  000A               	tblrd		*-
  5603  00168E  CFF5 F074          	movff	tablat,___ftmul@f2+2
  5604  001692  EC23  F010         	call	___ftmul	;wreg free
  5605  001696  C06F  F07E         	movff	?___ftmul,?_scale
  5606  00169A  C070  F07F         	movff	?___ftmul+1,?_scale+1
  5607  00169E  C071  F080         	movff	?___ftmul+2,?_scale+2
  5608  0016A2  0012               	return	
  5609  0016A4                     l200:
  5610                           
  5611                           ;doprnt.c: 438: else if(scl > 10)
  5612  0016A4  0100               	movlb	0	; () banked
  5613  0016A6  5184               	movf	scale@scl& (0+255),w,b
  5614  0016A8  0A80               	xorlw	128
  5615  0016AA  0F75               	addlw	-139
  5616  0016AC  A0D8               	btfss	status,0,c
  5617  0016AE  D055               	goto	l202
  5618                           
  5619                           ; BSR set to: 0
  5620                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  5621  0016B0  0E00               	movlw	0
  5622  0016B2  6E20               	movwf	___awdiv@divisor+1,c
  5623  0016B4  0E0A               	movlw	10
  5624  0016B6  6E1F               	movwf	___awdiv@divisor,c
  5625  0016B8  0100               	movlb	0	; () banked
  5626  0016BA  5184               	movf	scale@scl& (0+255),w,b
  5627  0016BC  6E1D               	movwf	___awdiv@dividend,c
  5628  0016BE  6A1E               	clrf	___awdiv@dividend+1,c
  5629  0016C0  BE1D               	btfsc	___awdiv@dividend,7,c
  5630  0016C2  061E               	decf	___awdiv@dividend+1,f,c
  5631  0016C4  EC57  F015         	call	___awdiv	;wreg free
  5632  0016C8  0E09               	movlw	9
  5633  0016CA  241D               	addwf	?___awdiv,w,c
  5634  0016CC  6E25               	movwf	___wmul@multiplier,c
  5635  0016CE  0E00               	movlw	0
  5636  0016D0  201E               	addwfc	?___awdiv+1,w,c
  5637  0016D2  6E26               	movwf	___wmul@multiplier+1,c
  5638  0016D4  0E00               	movlw	0
  5639  0016D6  6E28               	movwf	___wmul@multiplicand+1,c
  5640  0016D8  0E03               	movlw	3
  5641  0016DA  6E27               	movwf	___wmul@multiplicand,c
  5642  0016DC  ECC4  F017         	call	___wmul	;wreg free
  5643  0016E0  0E29               	movlw	low __powers_
  5644  0016E2  2425               	addwf	?___wmul,w,c
  5645  0016E4  6EF6               	movwf	tblptrl,c
  5646  0016E6  0E06               	movlw	high __powers_
  5647  0016E8  2026               	addwfc	?___wmul+1,w,c
  5648  0016EA  6EF7               	movwf	tblptrh,c
  5649  0016EC                     	if	0	;There are less than 3 active tblptr bytes
  5650  0016EC                     	endif
  5651  0016EC  0009               	tblrd		*+
  5652  0016EE  CFF5 F06F          	movff	tablat,___ftmul@f1
  5653  0016F2  0009               	tblrd		*+
  5654  0016F4  CFF5 F070          	movff	tablat,___ftmul@f1+1
  5655  0016F8  000A               	tblrd		*-
  5656  0016FA  CFF5 F071          	movff	tablat,___ftmul@f1+2
  5657  0016FE  0E00               	movlw	0
  5658  001700  6E28               	movwf	___wmul@multiplicand+1,c
  5659  001702  0E03               	movlw	3
  5660  001704  6E27               	movwf	___wmul@multiplicand,c
  5661  001706  0E00               	movlw	0
  5662  001708  6E1A               	movwf	___awmod@divisor+1,c
  5663  00170A  0E0A               	movlw	10
  5664  00170C  6E19               	movwf	___awmod@divisor,c
  5665  00170E  0100               	movlb	0	; () banked
  5666  001710  5184               	movf	scale@scl& (0+255),w,b
  5667  001712  6E17               	movwf	___awmod@dividend,c
  5668  001714  6A18               	clrf	___awmod@dividend+1,c
  5669  001716  BE17               	btfsc	___awmod@dividend,7,c
  5670  001718  0618               	decf	___awmod@dividend+1,f,c
  5671  00171A  ECDA  F015         	call	___awmod	;wreg free
  5672  00171E  C017  F025         	movff	?___awmod,___wmul@multiplier
  5673  001722  C018  F026         	movff	?___awmod+1,___wmul@multiplier+1
  5674  001726  ECC4  F017         	call	___wmul	;wreg free
  5675  00172A  0E29               	movlw	low __powers_
  5676  00172C  2425               	addwf	?___wmul,w,c
  5677  00172E  6EF6               	movwf	tblptrl,c
  5678  001730  0E06               	movlw	high __powers_
  5679  001732  2026               	addwfc	?___wmul+1,w,c
  5680  001734  6EF7               	movwf	tblptrh,c
  5681  001736                     	if	0	;There are less than 3 active tblptr bytes
  5682  001736                     	endif
  5683  001736  0009               	tblrd		*+
  5684  001738  CFF5 F072          	movff	tablat,___ftmul@f2
  5685  00173C  0009               	tblrd		*+
  5686  00173E  CFF5 F073          	movff	tablat,___ftmul@f2+1
  5687  001742  000A               	tblrd		*-
  5688  001744  CFF5 F074          	movff	tablat,___ftmul@f2+2
  5689  001748  EC23  F010         	call	___ftmul	;wreg free
  5690  00174C  C06F  F07E         	movff	?___ftmul,?_scale
  5691  001750  C070  F07F         	movff	?___ftmul+1,?_scale+1
  5692  001754  C071  F080         	movff	?___ftmul+2,?_scale+2
  5693  001758  0012               	return	
  5694  00175A                     l202:
  5695                           
  5696                           ;doprnt.c: 440: return _powers_[scl];
  5697  00175A  0100               	movlb	0	; () banked
  5698  00175C  5184               	movf	scale@scl& (0+255),w,b
  5699  00175E  0D03               	mullw	3
  5700  001760  0E29               	movlw	low __powers_
  5701  001762  24F3               	addwf	prodl,w,c
  5702  001764  6EF6               	movwf	tblptrl,c
  5703  001766  0E06               	movlw	high __powers_
  5704  001768  20F4               	addwfc	prodh,w,c
  5705  00176A  6EF7               	movwf	tblptrh,c
  5706  00176C                     	if	0	;There are less than 3 active tblptr bytes
  5707  00176C                     	endif
  5708  00176C  0009               	tblrd		*+
  5709  00176E  CFF5 F07E          	movff	tablat,?_scale
  5710  001772  0009               	tblrd		*+
  5711  001774  CFF5 F07F          	movff	tablat,?_scale+1
  5712  001778  000A               	tblrd		*-
  5713  00177A  CFF5 F080          	movff	tablat,?_scale+2
  5714  00177E  0012               	return	
  5715  001780                     __end_of_scale:
  5716                           	opt stack 0
  5717                           tblptru	equ	0xFF8
  5718                           tblptrh	equ	0xFF7
  5719                           tblptrl	equ	0xFF6
  5720                           tablat	equ	0xFF5
  5721                           prodh	equ	0xFF4
  5722                           prodl	equ	0xFF3
  5723                           intcon	equ	0xFF2
  5724                           intcon2	equ	0xFF1
  5725                           indf0	equ	0xFEF
  5726                           postinc0	equ	0xFEE
  5727                           fsr0h	equ	0xFEA
  5728                           fsr0l	equ	0xFE9
  5729                           wreg	equ	0xFE8
  5730                           indf2	equ	0xFDF
  5731                           postinc2	equ	0xFDE
  5732                           postdec2	equ	0xFDD
  5733                           fsr2h	equ	0xFDA
  5734                           fsr2l	equ	0xFD9
  5735                           status	equ	0xFD8
  5736                           
  5737 ;; *************** function _isdigit *****************
  5738 ;; Defined at:
  5739 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\isdigit.c"
  5740 ;; Parameters:    Size  Location     Type
  5741 ;;  c               1    wreg     unsigned char 
  5742 ;; Auto vars:     Size  Location     Type
  5743 ;;  c               1   24[COMRAM] unsigned char 
  5744 ;; Return value:  Size  Location     Type
  5745 ;;		None               void
  5746 ;; Registers used:
  5747 ;;		wreg, status,2, status,0
  5748 ;; Tracked objects:
  5749 ;;		On entry : 0/0
  5750 ;;		On exit  : 0/0
  5751 ;;		Unchanged: 0/0
  5752 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5753 ;;      Params:         0       0       0       0       0       0       0
  5754 ;;      Locals:         2       0       0       0       0       0       0
  5755 ;;      Temps:          1       0       0       0       0       0       0
  5756 ;;      Totals:         3       0       0       0       0       0       0
  5757 ;;Total ram usage:        3 bytes
  5758 ;; Hardware stack levels used:    1
  5759 ;; Hardware stack levels required when called:    3
  5760 ;; This function calls:
  5761 ;;		Nothing
  5762 ;; This function is called by:
  5763 ;;		_sprintf
  5764 ;; This function uses a non-reentrant model
  5765 ;;
  5766                           
  5767                           	psect	text15
  5768  002FF4                     __ptext15:
  5769                           	opt stack 0
  5770  002FF4                     _isdigit:
  5771                           	opt stack 25
  5772                           
  5773                           ;incstack = 0
  5774                           ;isdigit@c stored from wreg
  5775  002FF4  6E19               	movwf	isdigit@c,c
  5776  002FF6  0E00               	movlw	0
  5777  002FF8  6E18               	movwf	_isdigit$1161,c
  5778  002FFA  0E3A               	movlw	58
  5779  002FFC  6019               	cpfslt	isdigit@c,c
  5780  002FFE  D005               	goto	l671
  5781  003000  0E2F               	movlw	47
  5782  003002  6419               	cpfsgt	isdigit@c,c
  5783  003004  D002               	goto	l671
  5784  003006  0E01               	movlw	1
  5785  003008  6E18               	movwf	_isdigit$1161,c
  5786  00300A                     l671:
  5787  00300A  C018  F017         	movff	_isdigit$1161,??_isdigit
  5788  00300E  3017               	rrcf	??_isdigit,w,c
  5789  003010  0012               	return	
  5790  003012                     __end_of_isdigit:
  5791                           	opt stack 0
  5792                           tblptru	equ	0xFF8
  5793                           tblptrh	equ	0xFF7
  5794                           tblptrl	equ	0xFF6
  5795                           tablat	equ	0xFF5
  5796                           prodh	equ	0xFF4
  5797                           prodl	equ	0xFF3
  5798                           intcon	equ	0xFF2
  5799                           intcon2	equ	0xFF1
  5800                           indf0	equ	0xFEF
  5801                           postinc0	equ	0xFEE
  5802                           fsr0h	equ	0xFEA
  5803                           fsr0l	equ	0xFE9
  5804                           wreg	equ	0xFE8
  5805                           indf2	equ	0xFDF
  5806                           postinc2	equ	0xFDE
  5807                           postdec2	equ	0xFDD
  5808                           fsr2h	equ	0xFDA
  5809                           fsr2l	equ	0xFD9
  5810                           status	equ	0xFD8
  5811                           
  5812 ;; *************** function _fround *****************
  5813 ;; Defined at:
  5814 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\doprnt.c"
  5815 ;; Parameters:    Size  Location     Type
  5816 ;;  prec            1    wreg     unsigned char 
  5817 ;; Auto vars:     Size  Location     Type
  5818 ;;  prec            1   39[BANK0 ] unsigned char 
  5819 ;; Return value:  Size  Location     Type
  5820 ;;                  3   30[BANK0 ] unsigned char 
  5821 ;; Registers used:
  5822 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5823 ;; Tracked objects:
  5824 ;;		On entry : 0/0
  5825 ;;		On exit  : 0/0
  5826 ;;		Unchanged: 0/0
  5827 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5828 ;;      Params:         0       3       0       0       0       0       0
  5829 ;;      Locals:         0       7       0       0       0       0       0
  5830 ;;      Temps:          0       0       0       0       0       0       0
  5831 ;;      Totals:         0      10       0       0       0       0       0
  5832 ;;Total ram usage:       10 bytes
  5833 ;; Hardware stack levels used:    1
  5834 ;; Hardware stack levels required when called:    5
  5835 ;; This function calls:
  5836 ;;		___awdiv
  5837 ;;		___awmod
  5838 ;;		___ftmul
  5839 ;;		___wmul
  5840 ;; This function is called by:
  5841 ;;		_sprintf
  5842 ;; This function uses a non-reentrant model
  5843 ;;
  5844                           
  5845                           	psect	text16
  5846  001780                     __ptext16:
  5847                           	opt stack 0
  5848  001780                     _fround:
  5849                           	opt stack 23
  5850                           
  5851                           ;incstack = 0
  5852                           ;fround@prec stored from wreg
  5853  001780  0100               	movlb	0	; () banked
  5854  001782  6F87               	movwf	fround@prec& (0+255),b
  5855                           
  5856                           ;doprnt.c: 413: if(prec>=110)
  5857  001784  0E6D               	movlw	109
  5858  001786  0100               	movlb	0	; () banked
  5859  001788  6587               	cpfsgt	fround@prec& (0+255),b
  5860  00178A  D0A2               	goto	l189
  5861                           
  5862                           ; BSR set to: 0
  5863                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  5864  00178C  0E00               	movlw	0
  5865  00178E  6E28               	movwf	___wmul@multiplicand+1,c
  5866  001790  0E03               	movlw	3
  5867  001792  6E27               	movwf	___wmul@multiplicand,c
  5868  001794  0E00               	movlw	0
  5869  001796  6E20               	movwf	___awdiv@divisor+1,c
  5870  001798  0E0A               	movlw	10
  5871  00179A  6E1F               	movwf	___awdiv@divisor,c
  5872  00179C  0E00               	movlw	0
  5873  00179E  6E1A               	movwf	___awmod@divisor+1,c
  5874  0017A0  0E64               	movlw	100
  5875  0017A2  6E19               	movwf	___awmod@divisor,c
  5876  0017A4  C087  F017         	movff	fround@prec,___awmod@dividend
  5877  0017A8  6A18               	clrf	___awmod@dividend+1,c
  5878  0017AA  ECDA  F015         	call	___awmod	;wreg free
  5879  0017AE  C017  F01D         	movff	?___awmod,___awdiv@dividend
  5880  0017B2  C018  F01E         	movff	?___awmod+1,___awdiv@dividend+1
  5881  0017B6  EC57  F015         	call	___awdiv	;wreg free
  5882  0017BA  0E09               	movlw	9
  5883  0017BC  241D               	addwf	?___awdiv,w,c
  5884  0017BE  6E25               	movwf	___wmul@multiplier,c
  5885  0017C0  0E00               	movlw	0
  5886  0017C2  201E               	addwfc	?___awdiv+1,w,c
  5887  0017C4  6E26               	movwf	___wmul@multiplier+1,c
  5888  0017C6  ECC4  F017         	call	___wmul	;wreg free
  5889  0017CA  0E50               	movlw	low __npowers_
  5890  0017CC  2425               	addwf	?___wmul,w,c
  5891  0017CE  6EF6               	movwf	tblptrl,c
  5892  0017D0  0E06               	movlw	high __npowers_
  5893  0017D2  2026               	addwfc	?___wmul+1,w,c
  5894  0017D4  6EF7               	movwf	tblptrh,c
  5895  0017D6                     	if	0	;There are less than 3 active tblptr bytes
  5896  0017D6                     	endif
  5897  0017D6  0009               	tblrd		*+
  5898  0017D8  CFF5 F072          	movff	tablat,___ftmul@f2
  5899  0017DC  0009               	tblrd		*+
  5900  0017DE  CFF5 F073          	movff	tablat,___ftmul@f2+1
  5901  0017E2  000A               	tblrd		*-
  5902  0017E4  CFF5 F074          	movff	tablat,___ftmul@f2+2
  5903  0017E8  0E00               	movlw	0
  5904  0017EA  6E20               	movwf	___awdiv@divisor+1,c
  5905  0017EC  0E64               	movlw	100
  5906  0017EE  6E1F               	movwf	___awdiv@divisor,c
  5907  0017F0  C087  F01D         	movff	fround@prec,___awdiv@dividend
  5908  0017F4  6A1E               	clrf	___awdiv@dividend+1,c
  5909  0017F6  EC57  F015         	call	___awdiv	;wreg free
  5910  0017FA  0E12               	movlw	18
  5911  0017FC  241D               	addwf	?___awdiv,w,c
  5912  0017FE  6E25               	movwf	___wmul@multiplier,c
  5913  001800  0E00               	movlw	0
  5914  001802  201E               	addwfc	?___awdiv+1,w,c
  5915  001804  6E26               	movwf	___wmul@multiplier+1,c
  5916  001806  0E00               	movlw	0
  5917  001808  6E28               	movwf	___wmul@multiplicand+1,c
  5918  00180A  0E03               	movlw	3
  5919  00180C  6E27               	movwf	___wmul@multiplicand,c
  5920  00180E  ECC4  F017         	call	___wmul	;wreg free
  5921  001812  0E50               	movlw	low __npowers_
  5922  001814  2425               	addwf	?___wmul,w,c
  5923  001816  6EF6               	movwf	tblptrl,c
  5924  001818  0E06               	movlw	high __npowers_
  5925  00181A  2026               	addwfc	?___wmul+1,w,c
  5926  00181C  6EF7               	movwf	tblptrh,c
  5927  00181E                     	if	0	;There are less than 3 active tblptr bytes
  5928  00181E                     	endif
  5929  00181E  0009               	tblrd		*+
  5930  001820  CFF5 F06F          	movff	tablat,___ftmul@f1
  5931  001824  0009               	tblrd		*+
  5932  001826  CFF5 F070          	movff	tablat,___ftmul@f1+1
  5933  00182A  000A               	tblrd		*-
  5934  00182C  CFF5 F071          	movff	tablat,___ftmul@f1+2
  5935  001830  EC23  F010         	call	___ftmul	;wreg free
  5936  001834  C06F  F084         	movff	?___ftmul,_fround$1524
  5937  001838  C070  F085         	movff	?___ftmul+1,_fround$1524+1
  5938  00183C  C071  F086         	movff	?___ftmul+2,_fround$1524+2
  5939                           
  5940                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  5941  001840  0E00               	movlw	0
  5942  001842  6E28               	movwf	___wmul@multiplicand+1,c
  5943  001844  0E03               	movlw	3
  5944  001846  6E27               	movwf	___wmul@multiplicand,c
  5945  001848  0E00               	movlw	0
  5946  00184A  6E1A               	movwf	___awmod@divisor+1,c
  5947  00184C  0E0A               	movlw	10
  5948  00184E  6E19               	movwf	___awmod@divisor,c
  5949  001850  C087  F017         	movff	fround@prec,___awmod@dividend
  5950  001854  6A18               	clrf	___awmod@dividend+1,c
  5951  001856  ECDA  F015         	call	___awmod	;wreg free
  5952  00185A  C017  F025         	movff	?___awmod,___wmul@multiplier
  5953  00185E  C018  F026         	movff	?___awmod+1,___wmul@multiplier+1
  5954  001862  ECC4  F017         	call	___wmul	;wreg free
  5955  001866  0E50               	movlw	low __npowers_
  5956  001868  2425               	addwf	?___wmul,w,c
  5957  00186A  6EF6               	movwf	tblptrl,c
  5958  00186C  0E06               	movlw	high __npowers_
  5959  00186E  2026               	addwfc	?___wmul+1,w,c
  5960  001870  6EF7               	movwf	tblptrh,c
  5961  001872                     	if	0	;There are less than 3 active tblptr bytes
  5962  001872                     	endif
  5963  001872  0009               	tblrd		*+
  5964  001874  CFF5 F072          	movff	tablat,___ftmul@f2
  5965  001878  0009               	tblrd		*+
  5966  00187A  CFF5 F073          	movff	tablat,___ftmul@f2+1
  5967  00187E  000A               	tblrd		*-
  5968  001880  CFF5 F074          	movff	tablat,___ftmul@f2+2
  5969  001884  C084  F06F         	movff	_fround$1524,___ftmul@f1
  5970  001888  C085  F070         	movff	_fround$1524+1,___ftmul@f1+1
  5971  00188C  C086  F071         	movff	_fround$1524+2,___ftmul@f1+2
  5972  001890  EC23  F010         	call	___ftmul	;wreg free
  5973  001894  C06F  F081         	movff	?___ftmul,_fround$1525
  5974  001898  C070  F082         	movff	?___ftmul+1,_fround$1525+1
  5975  00189C  C071  F083         	movff	?___ftmul+2,_fround$1525+2
  5976                           
  5977                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  5978  0018A0  C081  F06F         	movff	_fround$1525,___ftmul@f1
  5979  0018A4  C082  F070         	movff	_fround$1525+1,___ftmul@f1+1
  5980  0018A8  C083  F071         	movff	_fround$1525+2,___ftmul@f1+2
  5981  0018AC  0E00               	movlw	0
  5982  0018AE  0100               	movlb	0	; () banked
  5983  0018B0  6F72               	movwf	___ftmul@f2& (0+255),b
  5984  0018B2  0E00               	movlw	0
  5985  0018B4  0100               	movlb	0	; () banked
  5986  0018B6  6F73               	movwf	(___ftmul@f2+1)& (0+255),b
  5987  0018B8  0E3F               	movlw	63
  5988  0018BA  0100               	movlb	0	; () banked
  5989  0018BC  6F74               	movwf	(___ftmul@f2+2)& (0+255),b
  5990  0018BE  EC23  F010         	call	___ftmul	;wreg free
  5991  0018C2  C06F  F07E         	movff	?___ftmul,?_fround
  5992  0018C6  C070  F07F         	movff	?___ftmul+1,?_fround+1
  5993  0018CA  C071  F080         	movff	?___ftmul+2,?_fround+2
  5994  0018CE  0012               	return	
  5995  0018D0                     l189:
  5996                           
  5997                           ;doprnt.c: 415: else if(prec > 10)
  5998  0018D0  0E0A               	movlw	10
  5999  0018D2  0100               	movlb	0	; () banked
  6000  0018D4  6587               	cpfsgt	fround@prec& (0+255),b
  6001  0018D6  D066               	goto	l192
  6002                           
  6003                           ; BSR set to: 0
  6004                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  6005  0018D8  0E00               	movlw	0
  6006  0018DA  6E28               	movwf	___wmul@multiplicand+1,c
  6007  0018DC  0E03               	movlw	3
  6008  0018DE  6E27               	movwf	___wmul@multiplicand,c
  6009  0018E0  0E00               	movlw	0
  6010  0018E2  6E1A               	movwf	___awmod@divisor+1,c
  6011  0018E4  0E0A               	movlw	10
  6012  0018E6  6E19               	movwf	___awmod@divisor,c
  6013  0018E8  C087  F017         	movff	fround@prec,___awmod@dividend
  6014  0018EC  6A18               	clrf	___awmod@dividend+1,c
  6015  0018EE  ECDA  F015         	call	___awmod	;wreg free
  6016  0018F2  C017  F025         	movff	?___awmod,___wmul@multiplier
  6017  0018F6  C018  F026         	movff	?___awmod+1,___wmul@multiplier+1
  6018  0018FA  ECC4  F017         	call	___wmul	;wreg free
  6019  0018FE  0E50               	movlw	low __npowers_
  6020  001900  2425               	addwf	?___wmul,w,c
  6021  001902  6EF6               	movwf	tblptrl,c
  6022  001904  0E06               	movlw	high __npowers_
  6023  001906  2026               	addwfc	?___wmul+1,w,c
  6024  001908  6EF7               	movwf	tblptrh,c
  6025  00190A                     	if	0	;There are less than 3 active tblptr bytes
  6026  00190A                     	endif
  6027  00190A  0009               	tblrd		*+
  6028  00190C  CFF5 F072          	movff	tablat,___ftmul@f2
  6029  001910  0009               	tblrd		*+
  6030  001912  CFF5 F073          	movff	tablat,___ftmul@f2+1
  6031  001916  000A               	tblrd		*-
  6032  001918  CFF5 F074          	movff	tablat,___ftmul@f2+2
  6033  00191C  0E00               	movlw	0
  6034  00191E  6E20               	movwf	___awdiv@divisor+1,c
  6035  001920  0E0A               	movlw	10
  6036  001922  6E1F               	movwf	___awdiv@divisor,c
  6037  001924  C087  F01D         	movff	fround@prec,___awdiv@dividend
  6038  001928  6A1E               	clrf	___awdiv@dividend+1,c
  6039  00192A  EC57  F015         	call	___awdiv	;wreg free
  6040  00192E  0E09               	movlw	9
  6041  001930  241D               	addwf	?___awdiv,w,c
  6042  001932  6E25               	movwf	___wmul@multiplier,c
  6043  001934  0E00               	movlw	0
  6044  001936  201E               	addwfc	?___awdiv+1,w,c
  6045  001938  6E26               	movwf	___wmul@multiplier+1,c
  6046  00193A  0E00               	movlw	0
  6047  00193C  6E28               	movwf	___wmul@multiplicand+1,c
  6048  00193E  0E03               	movlw	3
  6049  001940  6E27               	movwf	___wmul@multiplicand,c
  6050  001942  ECC4  F017         	call	___wmul	;wreg free
  6051  001946  0E50               	movlw	low __npowers_
  6052  001948  2425               	addwf	?___wmul,w,c
  6053  00194A  6EF6               	movwf	tblptrl,c
  6054  00194C  0E06               	movlw	high __npowers_
  6055  00194E  2026               	addwfc	?___wmul+1,w,c
  6056  001950  6EF7               	movwf	tblptrh,c
  6057  001952                     	if	0	;There are less than 3 active tblptr bytes
  6058  001952                     	endif
  6059  001952  0009               	tblrd		*+
  6060  001954  CFF5 F06F          	movff	tablat,___ftmul@f1
  6061  001958  0009               	tblrd		*+
  6062  00195A  CFF5 F070          	movff	tablat,___ftmul@f1+1
  6063  00195E  000A               	tblrd		*-
  6064  001960  CFF5 F071          	movff	tablat,___ftmul@f1+2
  6065  001964  EC23  F010         	call	___ftmul	;wreg free
  6066  001968  C06F  F084         	movff	?___ftmul,_fround$1524
  6067  00196C  C070  F085         	movff	?___ftmul+1,_fround$1524+1
  6068  001970  C071  F086         	movff	?___ftmul+2,_fround$1524+2
  6069                           
  6070                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  6071  001974  C084  F06F         	movff	_fround$1524,___ftmul@f1
  6072  001978  C085  F070         	movff	_fround$1524+1,___ftmul@f1+1
  6073  00197C  C086  F071         	movff	_fround$1524+2,___ftmul@f1+2
  6074  001980  0E00               	movlw	0
  6075  001982  0100               	movlb	0	; () banked
  6076  001984  6F72               	movwf	___ftmul@f2& (0+255),b
  6077  001986  0E00               	movlw	0
  6078  001988  0100               	movlb	0	; () banked
  6079  00198A  6F73               	movwf	(___ftmul@f2+1)& (0+255),b
  6080  00198C  0E3F               	movlw	63
  6081  00198E  0100               	movlb	0	; () banked
  6082  001990  6F74               	movwf	(___ftmul@f2+2)& (0+255),b
  6083  001992  EC23  F010         	call	___ftmul	;wreg free
  6084  001996  C06F  F07E         	movff	?___ftmul,?_fround
  6085  00199A  C070  F07F         	movff	?___ftmul+1,?_fround+1
  6086  00199E  C071  F080         	movff	?___ftmul+2,?_fround+2
  6087  0019A2  0012               	return	
  6088  0019A4                     l192:
  6089                           
  6090                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  6091  0019A4  0100               	movlb	0	; () banked
  6092  0019A6  5187               	movf	fround@prec& (0+255),w,b
  6093  0019A8  0D03               	mullw	3
  6094  0019AA  0E50               	movlw	low __npowers_
  6095  0019AC  24F3               	addwf	prodl,w,c
  6096  0019AE  6EF6               	movwf	tblptrl,c
  6097  0019B0  0E06               	movlw	high __npowers_
  6098  0019B2  20F4               	addwfc	prodh,w,c
  6099  0019B4  6EF7               	movwf	tblptrh,c
  6100  0019B6                     	if	0	;There are less than 3 active tblptr bytes
  6101  0019B6                     	endif
  6102  0019B6  0009               	tblrd		*+
  6103  0019B8  CFF5 F06F          	movff	tablat,___ftmul@f1
  6104  0019BC  0009               	tblrd		*+
  6105  0019BE  CFF5 F070          	movff	tablat,___ftmul@f1+1
  6106  0019C2  000A               	tblrd		*-
  6107  0019C4  CFF5 F071          	movff	tablat,___ftmul@f1+2
  6108  0019C8  0E00               	movlw	0
  6109  0019CA  0100               	movlb	0	; () banked
  6110  0019CC  6F72               	movwf	___ftmul@f2& (0+255),b
  6111  0019CE  0E00               	movlw	0
  6112  0019D0  0100               	movlb	0	; () banked
  6113  0019D2  6F73               	movwf	(___ftmul@f2+1)& (0+255),b
  6114  0019D4  0E3F               	movlw	63
  6115  0019D6  0100               	movlb	0	; () banked
  6116  0019D8  6F74               	movwf	(___ftmul@f2+2)& (0+255),b
  6117  0019DA  EC23  F010         	call	___ftmul	;wreg free
  6118  0019DE  C06F  F07E         	movff	?___ftmul,?_fround
  6119  0019E2  C070  F07F         	movff	?___ftmul+1,?_fround+1
  6120  0019E6  C071  F080         	movff	?___ftmul+2,?_fround+2
  6121  0019EA  0012               	return	
  6122  0019EC                     __end_of_fround:
  6123                           	opt stack 0
  6124                           tblptru	equ	0xFF8
  6125                           tblptrh	equ	0xFF7
  6126                           tblptrl	equ	0xFF6
  6127                           tablat	equ	0xFF5
  6128                           prodh	equ	0xFF4
  6129                           prodl	equ	0xFF3
  6130                           intcon	equ	0xFF2
  6131                           intcon2	equ	0xFF1
  6132                           indf0	equ	0xFEF
  6133                           postinc0	equ	0xFEE
  6134                           fsr0h	equ	0xFEA
  6135                           fsr0l	equ	0xFE9
  6136                           wreg	equ	0xFE8
  6137                           indf2	equ	0xFDF
  6138                           postinc2	equ	0xFDE
  6139                           postdec2	equ	0xFDD
  6140                           fsr2h	equ	0xFDA
  6141                           fsr2l	equ	0xFD9
  6142                           status	equ	0xFD8
  6143                           
  6144 ;; *************** function ___wmul *****************
  6145 ;; Defined at:
  6146 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\Umul16.c"
  6147 ;; Parameters:    Size  Location     Type
  6148 ;;  multiplier      2   36[COMRAM] unsigned int 
  6149 ;;  multiplicand    2   38[COMRAM] unsigned int 
  6150 ;; Auto vars:     Size  Location     Type
  6151 ;;  product         2   40[COMRAM] unsigned int 
  6152 ;; Return value:  Size  Location     Type
  6153 ;;                  2   36[COMRAM] unsigned int 
  6154 ;; Registers used:
  6155 ;;		wreg, status,2, status,0, prodl, prodh
  6156 ;; Tracked objects:
  6157 ;;		On entry : 0/0
  6158 ;;		On exit  : 0/0
  6159 ;;		Unchanged: 0/0
  6160 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6161 ;;      Params:         4       0       0       0       0       0       0
  6162 ;;      Locals:         2       0       0       0       0       0       0
  6163 ;;      Temps:          0       0       0       0       0       0       0
  6164 ;;      Totals:         6       0       0       0       0       0       0
  6165 ;;Total ram usage:        6 bytes
  6166 ;; Hardware stack levels used:    1
  6167 ;; Hardware stack levels required when called:    3
  6168 ;; This function calls:
  6169 ;;		Nothing
  6170 ;; This function is called by:
  6171 ;;		_fround
  6172 ;;		_scale
  6173 ;;		_sprintf
  6174 ;; This function uses a non-reentrant model
  6175 ;;
  6176                           
  6177                           	psect	text17
  6178  002F88                     __ptext17:
  6179                           	opt stack 0
  6180  002F88                     ___wmul:
  6181                           	opt stack 24
  6182                           
  6183                           ;incstack = 0
  6184  002F88  5025               	movf	___wmul@multiplier,w,c
  6185  002F8A  0227               	mulwf	___wmul@multiplicand,c
  6186  002F8C  CFF3 F029          	movff	prodl,___wmul@product
  6187  002F90  CFF4 F02A          	movff	prodh,___wmul@product+1
  6188  002F94  5025               	movf	___wmul@multiplier,w,c
  6189  002F96  0228               	mulwf	___wmul@multiplicand+1,c
  6190  002F98  50F3               	movf	prodl,w,c
  6191  002F9A  262A               	addwf	___wmul@product+1,f,c
  6192  002F9C  5026               	movf	___wmul@multiplier+1,w,c
  6193  002F9E  0227               	mulwf	___wmul@multiplicand,c
  6194  002FA0  50F3               	movf	prodl,w,c
  6195  002FA2  262A               	addwf	___wmul@product+1,f,c
  6196  002FA4  C029  F025         	movff	___wmul@product,?___wmul
  6197  002FA8  C02A  F026         	movff	___wmul@product+1,?___wmul+1
  6198  002FAC  0012               	return	
  6199  002FAE                     __end_of___wmul:
  6200                           	opt stack 0
  6201                           tblptru	equ	0xFF8
  6202                           tblptrh	equ	0xFF7
  6203                           tblptrl	equ	0xFF6
  6204                           tablat	equ	0xFF5
  6205                           prodh	equ	0xFF4
  6206                           prodl	equ	0xFF3
  6207                           intcon	equ	0xFF2
  6208                           intcon2	equ	0xFF1
  6209                           indf0	equ	0xFEF
  6210                           postinc0	equ	0xFEE
  6211                           fsr0h	equ	0xFEA
  6212                           fsr0l	equ	0xFE9
  6213                           wreg	equ	0xFE8
  6214                           indf2	equ	0xFDF
  6215                           postinc2	equ	0xFDE
  6216                           postdec2	equ	0xFDD
  6217                           fsr2h	equ	0xFDA
  6218                           fsr2l	equ	0xFD9
  6219                           status	equ	0xFD8
  6220                           
  6221 ;; *************** function ___ftmul *****************
  6222 ;; Defined at:
  6223 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\ftmul.c"
  6224 ;; Parameters:    Size  Location     Type
  6225 ;;  f1              3   15[BANK0 ] float 
  6226 ;;  f2              3   18[BANK0 ] float 
  6227 ;; Auto vars:     Size  Location     Type
  6228 ;;  f3_as_produc    3   25[BANK0 ] unsigned um
  6229 ;;  sign            1   29[BANK0 ] unsigned char 
  6230 ;;  cntr            1   28[BANK0 ] unsigned char 
  6231 ;;  exp             1   24[BANK0 ] unsigned char 
  6232 ;; Return value:  Size  Location     Type
  6233 ;;                  3   15[BANK0 ] float 
  6234 ;; Registers used:
  6235 ;;		wreg, status,2, status,0, cstack
  6236 ;; Tracked objects:
  6237 ;;		On entry : 0/0
  6238 ;;		On exit  : 0/0
  6239 ;;		Unchanged: 0/0
  6240 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6241 ;;      Params:         0       6       0       0       0       0       0
  6242 ;;      Locals:         0       6       0       0       0       0       0
  6243 ;;      Temps:          0       3       0       0       0       0       0
  6244 ;;      Totals:         0      15       0       0       0       0       0
  6245 ;;Total ram usage:       15 bytes
  6246 ;; Hardware stack levels used:    1
  6247 ;; Hardware stack levels required when called:    4
  6248 ;; This function calls:
  6249 ;;		___ftpack
  6250 ;; This function is called by:
  6251 ;;		_temperatureMeasurementC
  6252 ;;		_temperatureMeasurementF
  6253 ;;		_carbonMeasurement
  6254 ;;		_salinityMeasurement
  6255 ;;		_fround
  6256 ;;		_scale
  6257 ;;		_sprintf
  6258 ;; This function uses a non-reentrant model
  6259 ;;
  6260                           
  6261                           	psect	text18
  6262  002046                     __ptext18:
  6263                           	opt stack 0
  6264  002046                     ___ftmul:
  6265                           	opt stack 23
  6266                           
  6267                           ;incstack = 0
  6268  002046  C071  F075         	movff	___ftmul@f1+2,??___ftmul
  6269  00204A  0100               	movlb	0	; () banked
  6270  00204C  6B76               	clrf	(??___ftmul+1)& (0+255),b
  6271  00204E  6B77               	clrf	(??___ftmul+2)& (0+255),b
  6272  002050  0100               	movlb	0	; () banked
  6273  002052  3570               	rlcf	(___ftmul@f1+1)& (0+255),w,b
  6274  002054  0100               	movlb	0	; () banked
  6275  002056  3775               	rlcf	??___ftmul& (0+255),f,b
  6276  002058  E301               	bnc	u4021
  6277  00205A  8176               	bsf	(??___ftmul+1)& (0+255),0,b
  6278  00205C                     u4021:
  6279  00205C  0100               	movlb	0	; () banked
  6280  00205E  5175               	movf	??___ftmul& (0+255),w,b
  6281  002060  0100               	movlb	0	; () banked
  6282  002062  6F78               	movwf	___ftmul@exp& (0+255),b
  6283  002064  0100               	movlb	0	; () banked
  6284  002066  5178               	movf	___ftmul@exp& (0+255),w,b
  6285  002068  A4D8               	btfss	status,2,c
  6286  00206A  D00A               	goto	l635
  6287                           
  6288                           ; BSR set to: 0
  6289  00206C  0E00               	movlw	0
  6290  00206E  0100               	movlb	0	; () banked
  6291  002070  6F6F               	movwf	?___ftmul& (0+255),b
  6292  002072  0E00               	movlw	0
  6293  002074  0100               	movlb	0	; () banked
  6294  002076  6F70               	movwf	(?___ftmul+1)& (0+255),b
  6295  002078  0E00               	movlw	0
  6296  00207A  0100               	movlb	0	; () banked
  6297  00207C  6F71               	movwf	(?___ftmul+2)& (0+255),b
  6298                           
  6299                           ; BSR set to: 0
  6300  00207E  0012               	return	
  6301  002080                     l635:
  6302                           
  6303                           ; BSR set to: 0
  6304                           
  6305                           ; BSR set to: 0
  6306  002080  C074  F075         	movff	___ftmul@f2+2,??___ftmul
  6307  002084  0100               	movlb	0	; () banked
  6308  002086  6B76               	clrf	(??___ftmul+1)& (0+255),b
  6309  002088  6B77               	clrf	(??___ftmul+2)& (0+255),b
  6310  00208A  0100               	movlb	0	; () banked
  6311  00208C  3573               	rlcf	(___ftmul@f2+1)& (0+255),w,b
  6312  00208E  0100               	movlb	0	; () banked
  6313  002090  3775               	rlcf	??___ftmul& (0+255),f,b
  6314  002092  E301               	bnc	u4041
  6315  002094  8176               	bsf	(??___ftmul+1)& (0+255),0,b
  6316  002096                     u4041:
  6317  002096  0100               	movlb	0	; () banked
  6318  002098  5175               	movf	??___ftmul& (0+255),w,b
  6319  00209A  0100               	movlb	0	; () banked
  6320  00209C  6F7D               	movwf	___ftmul@sign& (0+255),b
  6321  00209E  0100               	movlb	0	; () banked
  6322  0020A0  517D               	movf	___ftmul@sign& (0+255),w,b
  6323  0020A2  A4D8               	btfss	status,2,c
  6324  0020A4  D00A               	goto	l637
  6325                           
  6326                           ; BSR set to: 0
  6327  0020A6  0E00               	movlw	0
  6328  0020A8  0100               	movlb	0	; () banked
  6329  0020AA  6F6F               	movwf	?___ftmul& (0+255),b
  6330  0020AC  0E00               	movlw	0
  6331  0020AE  0100               	movlb	0	; () banked
  6332  0020B0  6F70               	movwf	(?___ftmul+1)& (0+255),b
  6333  0020B2  0E00               	movlw	0
  6334  0020B4  0100               	movlb	0	; () banked
  6335  0020B6  6F71               	movwf	(?___ftmul+2)& (0+255),b
  6336                           
  6337                           ; BSR set to: 0
  6338  0020B8  0012               	return	
  6339  0020BA                     l637:
  6340                           
  6341                           ; BSR set to: 0
  6342                           
  6343                           ; BSR set to: 0
  6344  0020BA  0100               	movlb	0	; () banked
  6345  0020BC  517D               	movf	___ftmul@sign& (0+255),w,b
  6346  0020BE  0F7B               	addlw	123
  6347  0020C0  0100               	movlb	0	; () banked
  6348  0020C2  2778               	addwf	___ftmul@exp& (0+255),f,b
  6349                           
  6350                           ; BSR set to: 0
  6351  0020C4  C071  F07D         	movff	___ftmul@f1+2,___ftmul@sign
  6352  0020C8  0100               	movlb	0	; () banked
  6353  0020CA  5174               	movf	(___ftmul@f2+2)& (0+255),w,b
  6354  0020CC  0100               	movlb	0	; () banked
  6355  0020CE  1B7D               	xorwf	___ftmul@sign& (0+255),f,b
  6356  0020D0  0E80               	movlw	128
  6357  0020D2  0100               	movlb	0	; () banked
  6358  0020D4  177D               	andwf	___ftmul@sign& (0+255),f,b
  6359                           
  6360                           ; BSR set to: 0
  6361  0020D6  0100               	movlb	0	; () banked
  6362  0020D8  8F70               	bsf	(___ftmul@f1+1)& (0+255),7,b
  6363                           
  6364                           ; BSR set to: 0
  6365  0020DA  0100               	movlb	0	; () banked
  6366  0020DC  8F73               	bsf	(___ftmul@f2+1)& (0+255),7,b
  6367                           
  6368                           ; BSR set to: 0
  6369  0020DE  0EFF               	movlw	255
  6370  0020E0  0100               	movlb	0	; () banked
  6371  0020E2  1772               	andwf	___ftmul@f2& (0+255),f,b
  6372  0020E4  0EFF               	movlw	255
  6373  0020E6  0100               	movlb	0	; () banked
  6374  0020E8  1773               	andwf	(___ftmul@f2+1)& (0+255),f,b
  6375  0020EA  0E00               	movlw	0
  6376  0020EC  0100               	movlb	0	; () banked
  6377  0020EE  1774               	andwf	(___ftmul@f2+2)& (0+255),f,b
  6378                           
  6379                           ; BSR set to: 0
  6380  0020F0  0E00               	movlw	0
  6381  0020F2  0100               	movlb	0	; () banked
  6382  0020F4  6F79               	movwf	___ftmul@f3_as_product& (0+255),b
  6383  0020F6  0E00               	movlw	0
  6384  0020F8  0100               	movlb	0	; () banked
  6385  0020FA  6F7A               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
  6386  0020FC  0E00               	movlw	0
  6387  0020FE  0100               	movlb	0	; () banked
  6388  002100  6F7B               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
  6389                           
  6390                           ; BSR set to: 0
  6391  002102  0E07               	movlw	7
  6392  002104  0100               	movlb	0	; () banked
  6393  002106  6F7C               	movwf	___ftmul@cntr& (0+255),b
  6394  002108                     
  6395                           ; BSR set to: 0
  6396                           
  6397                           ; BSR set to: 0
  6398  002108  0100               	movlb	0	; () banked
  6399  00210A  A16F               	btfss	___ftmul@f1& (0+255),0,b
  6400  00210C  D00C               	goto	l639
  6401                           
  6402                           ; BSR set to: 0
  6403  00210E  0100               	movlb	0	; () banked
  6404  002110  5172               	movf	___ftmul@f2& (0+255),w,b
  6405  002112  0100               	movlb	0	; () banked
  6406  002114  2779               	addwf	___ftmul@f3_as_product& (0+255),f,b
  6407  002116  0100               	movlb	0	; () banked
  6408  002118  5173               	movf	(___ftmul@f2+1)& (0+255),w,b
  6409  00211A  0100               	movlb	0	; () banked
  6410  00211C  237A               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  6411  00211E  0100               	movlb	0	; () banked
  6412  002120  5174               	movf	(___ftmul@f2+2)& (0+255),w,b
  6413  002122  0100               	movlb	0	; () banked
  6414  002124  237B               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  6415  002126                     l639:
  6416                           
  6417                           ; BSR set to: 0
  6418                           
  6419                           ; BSR set to: 0
  6420  002126  0100               	movlb	0	; () banked
  6421  002128  90D8               	bcf	status,0,c
  6422  00212A  3371               	rrcf	(___ftmul@f1+2)& (0+255),f,b
  6423  00212C  3370               	rrcf	(___ftmul@f1+1)& (0+255),f,b
  6424  00212E  336F               	rrcf	___ftmul@f1& (0+255),f,b
  6425  002130  0100               	movlb	0	; () banked
  6426  002132  90D8               	bcf	status,0,c
  6427  002134  3772               	rlcf	___ftmul@f2& (0+255),f,b
  6428  002136  3773               	rlcf	(___ftmul@f2+1)& (0+255),f,b
  6429  002138  3774               	rlcf	(___ftmul@f2+2)& (0+255),f,b
  6430                           
  6431                           ; BSR set to: 0
  6432  00213A  0100               	movlb	0	; () banked
  6433  00213C  2F7C               	decfsz	___ftmul@cntr& (0+255),f,b
  6434  00213E  D7E4               	goto	l638
  6435                           
  6436                           ; BSR set to: 0
  6437                           
  6438                           ; BSR set to: 0
  6439  002140  0E09               	movlw	9
  6440  002142  0100               	movlb	0	; () banked
  6441  002144  6F7C               	movwf	___ftmul@cntr& (0+255),b
  6442  002146                     
  6443                           ; BSR set to: 0
  6444                           
  6445                           ; BSR set to: 0
  6446  002146  0100               	movlb	0	; () banked
  6447  002148  A16F               	btfss	___ftmul@f1& (0+255),0,b
  6448  00214A  D00C               	goto	l642
  6449                           
  6450                           ; BSR set to: 0
  6451  00214C  0100               	movlb	0	; () banked
  6452  00214E  5172               	movf	___ftmul@f2& (0+255),w,b
  6453  002150  0100               	movlb	0	; () banked
  6454  002152  2779               	addwf	___ftmul@f3_as_product& (0+255),f,b
  6455  002154  0100               	movlb	0	; () banked
  6456  002156  5173               	movf	(___ftmul@f2+1)& (0+255),w,b
  6457  002158  0100               	movlb	0	; () banked
  6458  00215A  237A               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  6459  00215C  0100               	movlb	0	; () banked
  6460  00215E  5174               	movf	(___ftmul@f2+2)& (0+255),w,b
  6461  002160  0100               	movlb	0	; () banked
  6462  002162  237B               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  6463  002164                     l642:
  6464                           
  6465                           ; BSR set to: 0
  6466                           
  6467                           ; BSR set to: 0
  6468  002164  0100               	movlb	0	; () banked
  6469  002166  90D8               	bcf	status,0,c
  6470  002168  3371               	rrcf	(___ftmul@f1+2)& (0+255),f,b
  6471  00216A  3370               	rrcf	(___ftmul@f1+1)& (0+255),f,b
  6472  00216C  336F               	rrcf	___ftmul@f1& (0+255),f,b
  6473  00216E  0100               	movlb	0	; () banked
  6474  002170  90D8               	bcf	status,0,c
  6475  002172  337B               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
  6476  002174  337A               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
  6477  002176  3379               	rrcf	___ftmul@f3_as_product& (0+255),f,b
  6478                           
  6479                           ; BSR set to: 0
  6480  002178  0100               	movlb	0	; () banked
  6481  00217A  2F7C               	decfsz	___ftmul@cntr& (0+255),f,b
  6482  00217C  D7E4               	goto	l641
  6483                           
  6484                           ; BSR set to: 0
  6485                           
  6486                           ; BSR set to: 0
  6487  00217E  C079  F017         	movff	___ftmul@f3_as_product,___ftpack@arg
  6488  002182  C07A  F018         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  6489  002186  C07B  F019         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  6490  00218A  C078  F01A         	movff	___ftmul@exp,___ftpack@exp
  6491  00218E  C07D  F01B         	movff	___ftmul@sign,___ftpack@sign
  6492  002192  EC74  F014         	call	___ftpack	;wreg free
  6493  002196  C017  F06F         	movff	?___ftpack,?___ftmul
  6494  00219A  C018  F070         	movff	?___ftpack+1,?___ftmul+1
  6495  00219E  C019  F071         	movff	?___ftpack+2,?___ftmul+2
  6496  0021A2  0012               	return	
  6497  0021A4                     __end_of___ftmul:
  6498                           	opt stack 0
  6499                           tblptru	equ	0xFF8
  6500                           tblptrh	equ	0xFF7
  6501                           tblptrl	equ	0xFF6
  6502                           tablat	equ	0xFF5
  6503                           prodh	equ	0xFF4
  6504                           prodl	equ	0xFF3
  6505                           intcon	equ	0xFF2
  6506                           intcon2	equ	0xFF1
  6507                           indf0	equ	0xFEF
  6508                           postinc0	equ	0xFEE
  6509                           fsr0h	equ	0xFEA
  6510                           fsr0l	equ	0xFE9
  6511                           wreg	equ	0xFE8
  6512                           indf2	equ	0xFDF
  6513                           postinc2	equ	0xFDE
  6514                           postdec2	equ	0xFDD
  6515                           fsr2h	equ	0xFDA
  6516                           fsr2l	equ	0xFD9
  6517                           status	equ	0xFD8
  6518                           
  6519 ;; *************** function ___awmod *****************
  6520 ;; Defined at:
  6521 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\awmod.c"
  6522 ;; Parameters:    Size  Location     Type
  6523 ;;  dividend        2   22[COMRAM] int 
  6524 ;;  divisor         2   24[COMRAM] int 
  6525 ;; Auto vars:     Size  Location     Type
  6526 ;;  sign            1   27[COMRAM] unsigned char 
  6527 ;;  counter         1   26[COMRAM] unsigned char 
  6528 ;; Return value:  Size  Location     Type
  6529 ;;                  2   22[COMRAM] int 
  6530 ;; Registers used:
  6531 ;;		wreg, status,2, status,0
  6532 ;; Tracked objects:
  6533 ;;		On entry : 0/0
  6534 ;;		On exit  : 0/0
  6535 ;;		Unchanged: 0/0
  6536 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6537 ;;      Params:         4       0       0       0       0       0       0
  6538 ;;      Locals:         2       0       0       0       0       0       0
  6539 ;;      Temps:          0       0       0       0       0       0       0
  6540 ;;      Totals:         6       0       0       0       0       0       0
  6541 ;;Total ram usage:        6 bytes
  6542 ;; Hardware stack levels used:    1
  6543 ;; Hardware stack levels required when called:    3
  6544 ;; This function calls:
  6545 ;;		Nothing
  6546 ;; This function is called by:
  6547 ;;		_fround
  6548 ;;		_scale
  6549 ;; This function uses a non-reentrant model
  6550 ;;
  6551                           
  6552                           	psect	text19
  6553  002BB4                     __ptext19:
  6554                           	opt stack 0
  6555  002BB4                     ___awmod:
  6556                           	opt stack 24
  6557                           
  6558                           ;incstack = 0
  6559  002BB4  0E00               	movlw	0
  6560  002BB6  6E1C               	movwf	___awmod@sign,c
  6561  002BB8  AE18               	btfss	___awmod@dividend+1,7,c
  6562  002BBA  D006               	goto	l488
  6563  002BBC  6C17               	negf	___awmod@dividend,c
  6564  002BBE  1E18               	comf	___awmod@dividend+1,f,c
  6565  002BC0  B0D8               	btfsc	status,0,c
  6566  002BC2  2A18               	incf	___awmod@dividend+1,f,c
  6567  002BC4  0E01               	movlw	1
  6568  002BC6  6E1C               	movwf	___awmod@sign,c
  6569  002BC8                     l488:
  6570  002BC8  AE1A               	btfss	___awmod@divisor+1,7,c
  6571  002BCA  D004               	goto	l489
  6572  002BCC  6C19               	negf	___awmod@divisor,c
  6573  002BCE  1E1A               	comf	___awmod@divisor+1,f,c
  6574  002BD0  B0D8               	btfsc	status,0,c
  6575  002BD2  2A1A               	incf	___awmod@divisor+1,f,c
  6576  002BD4                     l489:
  6577  002BD4  5019               	movf	___awmod@divisor,w,c
  6578  002BD6  101A               	iorwf	___awmod@divisor+1,w,c
  6579  002BD8  B4D8               	btfsc	status,2,c
  6580  002BDA  D018               	goto	l496
  6581  002BDC  0E01               	movlw	1
  6582  002BDE  6E1B               	movwf	___awmod@counter,c
  6583  002BE0  D004               	goto	l491
  6584  002BE2  90D8               	bcf	status,0,c
  6585  002BE4  3619               	rlcf	___awmod@divisor,f,c
  6586  002BE6  361A               	rlcf	___awmod@divisor+1,f,c
  6587  002BE8  2A1B               	incf	___awmod@counter,f,c
  6588  002BEA                     l491:
  6589  002BEA  AE1A               	btfss	___awmod@divisor+1,7,c
  6590  002BEC  D7FA               	goto	l492
  6591  002BEE                     u2310:
  6592  002BEE  5019               	movf	___awmod@divisor,w,c
  6593  002BF0  5C17               	subwf	___awmod@dividend,w,c
  6594  002BF2  501A               	movf	___awmod@divisor+1,w,c
  6595  002BF4  5818               	subwfb	___awmod@dividend+1,w,c
  6596  002BF6  A0D8               	btfss	status,0,c
  6597  002BF8  D004               	goto	l495
  6598  002BFA  5019               	movf	___awmod@divisor,w,c
  6599  002BFC  5E17               	subwf	___awmod@dividend,f,c
  6600  002BFE  501A               	movf	___awmod@divisor+1,w,c
  6601  002C00  5A18               	subwfb	___awmod@dividend+1,f,c
  6602  002C02                     l495:
  6603  002C02  90D8               	bcf	status,0,c
  6604  002C04  321A               	rrcf	___awmod@divisor+1,f,c
  6605  002C06  3219               	rrcf	___awmod@divisor,f,c
  6606  002C08  2E1B               	decfsz	___awmod@counter,f,c
  6607  002C0A  D7F1               	goto	u2310
  6608  002C0C                     l496:
  6609  002C0C  501C               	movf	___awmod@sign,w,c
  6610  002C0E  B4D8               	btfsc	status,2,c
  6611  002C10  D004               	goto	l497
  6612  002C12  6C17               	negf	___awmod@dividend,c
  6613  002C14  1E18               	comf	___awmod@dividend+1,f,c
  6614  002C16  B0D8               	btfsc	status,0,c
  6615  002C18  2A18               	incf	___awmod@dividend+1,f,c
  6616  002C1A                     l497:
  6617  002C1A  C017  F017         	movff	___awmod@dividend,?___awmod
  6618  002C1E  C018  F018         	movff	___awmod@dividend+1,?___awmod+1
  6619  002C22  0012               	return	
  6620  002C24                     __end_of___awmod:
  6621                           	opt stack 0
  6622                           tblptru	equ	0xFF8
  6623                           tblptrh	equ	0xFF7
  6624                           tblptrl	equ	0xFF6
  6625                           tablat	equ	0xFF5
  6626                           prodh	equ	0xFF4
  6627                           prodl	equ	0xFF3
  6628                           intcon	equ	0xFF2
  6629                           intcon2	equ	0xFF1
  6630                           indf0	equ	0xFEF
  6631                           postinc0	equ	0xFEE
  6632                           fsr0h	equ	0xFEA
  6633                           fsr0l	equ	0xFE9
  6634                           wreg	equ	0xFE8
  6635                           indf2	equ	0xFDF
  6636                           postinc2	equ	0xFDE
  6637                           postdec2	equ	0xFDD
  6638                           fsr2h	equ	0xFDA
  6639                           fsr2l	equ	0xFD9
  6640                           status	equ	0xFD8
  6641                           
  6642 ;; *************** function ___awdiv *****************
  6643 ;; Defined at:
  6644 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\awdiv.c"
  6645 ;; Parameters:    Size  Location     Type
  6646 ;;  dividend        2   28[COMRAM] int 
  6647 ;;  divisor         2   30[COMRAM] int 
  6648 ;; Auto vars:     Size  Location     Type
  6649 ;;  quotient        2   34[COMRAM] int 
  6650 ;;  sign            1   33[COMRAM] unsigned char 
  6651 ;;  counter         1   32[COMRAM] unsigned char 
  6652 ;; Return value:  Size  Location     Type
  6653 ;;                  2   28[COMRAM] int 
  6654 ;; Registers used:
  6655 ;;		wreg, status,2, status,0
  6656 ;; Tracked objects:
  6657 ;;		On entry : 0/0
  6658 ;;		On exit  : 0/0
  6659 ;;		Unchanged: 0/0
  6660 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6661 ;;      Params:         4       0       0       0       0       0       0
  6662 ;;      Locals:         4       0       0       0       0       0       0
  6663 ;;      Temps:          0       0       0       0       0       0       0
  6664 ;;      Totals:         8       0       0       0       0       0       0
  6665 ;;Total ram usage:        8 bytes
  6666 ;; Hardware stack levels used:    1
  6667 ;; Hardware stack levels required when called:    3
  6668 ;; This function calls:
  6669 ;;		Nothing
  6670 ;; This function is called by:
  6671 ;;		_fround
  6672 ;;		_scale
  6673 ;;		_sprintf
  6674 ;; This function uses a non-reentrant model
  6675 ;;
  6676                           
  6677                           	psect	text20
  6678  002AAE                     __ptext20:
  6679                           	opt stack 0
  6680  002AAE                     ___awdiv:
  6681                           	opt stack 24
  6682                           
  6683                           ;incstack = 0
  6684  002AAE  0E00               	movlw	0
  6685  002AB0  6E22               	movwf	___awdiv@sign,c
  6686  002AB2  AE20               	btfss	___awdiv@divisor+1,7,c
  6687  002AB4  D006               	goto	l475
  6688  002AB6  6C1F               	negf	___awdiv@divisor,c
  6689  002AB8  1E20               	comf	___awdiv@divisor+1,f,c
  6690  002ABA  B0D8               	btfsc	status,0,c
  6691  002ABC  2A20               	incf	___awdiv@divisor+1,f,c
  6692  002ABE  0E01               	movlw	1
  6693  002AC0  6E22               	movwf	___awdiv@sign,c
  6694  002AC2                     l475:
  6695  002AC2  AE1E               	btfss	___awdiv@dividend+1,7,c
  6696  002AC4  D006               	goto	l476
  6697  002AC6  6C1D               	negf	___awdiv@dividend,c
  6698  002AC8  1E1E               	comf	___awdiv@dividend+1,f,c
  6699  002ACA  B0D8               	btfsc	status,0,c
  6700  002ACC  2A1E               	incf	___awdiv@dividend+1,f,c
  6701  002ACE  0E01               	movlw	1
  6702  002AD0  1A22               	xorwf	___awdiv@sign,f,c
  6703  002AD2                     l476:
  6704  002AD2  0E00               	movlw	0
  6705  002AD4  6E24               	movwf	___awdiv@quotient+1,c
  6706  002AD6  0E00               	movlw	0
  6707  002AD8  6E23               	movwf	___awdiv@quotient,c
  6708  002ADA  501F               	movf	___awdiv@divisor,w,c
  6709  002ADC  1020               	iorwf	___awdiv@divisor+1,w,c
  6710  002ADE  B4D8               	btfsc	status,2,c
  6711  002AE0  D01C               	goto	l483
  6712  002AE2  0E01               	movlw	1
  6713  002AE4  6E21               	movwf	___awdiv@counter,c
  6714  002AE6  D004               	goto	l478
  6715  002AE8  90D8               	bcf	status,0,c
  6716  002AEA  361F               	rlcf	___awdiv@divisor,f,c
  6717  002AEC  3620               	rlcf	___awdiv@divisor+1,f,c
  6718  002AEE  2A21               	incf	___awdiv@counter,f,c
  6719  002AF0                     l478:
  6720  002AF0  AE20               	btfss	___awdiv@divisor+1,7,c
  6721  002AF2  D7FA               	goto	l479
  6722  002AF4                     u2250:
  6723  002AF4  90D8               	bcf	status,0,c
  6724  002AF6  3623               	rlcf	___awdiv@quotient,f,c
  6725  002AF8  3624               	rlcf	___awdiv@quotient+1,f,c
  6726  002AFA  501F               	movf	___awdiv@divisor,w,c
  6727  002AFC  5C1D               	subwf	___awdiv@dividend,w,c
  6728  002AFE  5020               	movf	___awdiv@divisor+1,w,c
  6729  002B00  581E               	subwfb	___awdiv@dividend+1,w,c
  6730  002B02  A0D8               	btfss	status,0,c
  6731  002B04  D005               	goto	l482
  6732  002B06  501F               	movf	___awdiv@divisor,w,c
  6733  002B08  5E1D               	subwf	___awdiv@dividend,f,c
  6734  002B0A  5020               	movf	___awdiv@divisor+1,w,c
  6735  002B0C  5A1E               	subwfb	___awdiv@dividend+1,f,c
  6736  002B0E  8023               	bsf	___awdiv@quotient,0,c
  6737  002B10                     l482:
  6738  002B10  90D8               	bcf	status,0,c
  6739  002B12  3220               	rrcf	___awdiv@divisor+1,f,c
  6740  002B14  321F               	rrcf	___awdiv@divisor,f,c
  6741  002B16  2E21               	decfsz	___awdiv@counter,f,c
  6742  002B18  D7ED               	goto	u2250
  6743  002B1A                     l483:
  6744  002B1A  5022               	movf	___awdiv@sign,w,c
  6745  002B1C  B4D8               	btfsc	status,2,c
  6746  002B1E  D004               	goto	l484
  6747  002B20  6C23               	negf	___awdiv@quotient,c
  6748  002B22  1E24               	comf	___awdiv@quotient+1,f,c
  6749  002B24  B0D8               	btfsc	status,0,c
  6750  002B26  2A24               	incf	___awdiv@quotient+1,f,c
  6751  002B28                     l484:
  6752  002B28  C023  F01D         	movff	___awdiv@quotient,?___awdiv
  6753  002B2C  C024  F01E         	movff	___awdiv@quotient+1,?___awdiv+1
  6754  002B30  0012               	return	
  6755  002B32                     __end_of___awdiv:
  6756                           	opt stack 0
  6757                           tblptru	equ	0xFF8
  6758                           tblptrh	equ	0xFF7
  6759                           tblptrl	equ	0xFF6
  6760                           tablat	equ	0xFF5
  6761                           prodh	equ	0xFF4
  6762                           prodl	equ	0xFF3
  6763                           intcon	equ	0xFF2
  6764                           intcon2	equ	0xFF1
  6765                           indf0	equ	0xFEF
  6766                           postinc0	equ	0xFEE
  6767                           fsr0h	equ	0xFEA
  6768                           fsr0l	equ	0xFE9
  6769                           wreg	equ	0xFE8
  6770                           indf2	equ	0xFDF
  6771                           postinc2	equ	0xFDE
  6772                           postdec2	equ	0xFDD
  6773                           fsr2h	equ	0xFDA
  6774                           fsr2l	equ	0xFD9
  6775                           status	equ	0xFD8
  6776                           
  6777 ;; *************** function __tdiv_to_l_ *****************
  6778 ;; Defined at:
  6779 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\ftdivl.c"
  6780 ;; Parameters:    Size  Location     Type
  6781 ;;  f1              3   22[COMRAM] float 
  6782 ;;  f2              3   25[COMRAM] float 
  6783 ;; Auto vars:     Size  Location     Type
  6784 ;;  quot            4   31[COMRAM] unsigned long 
  6785 ;;  exp1            1   36[COMRAM] unsigned char 
  6786 ;;  cntr            1   35[COMRAM] unsigned char 
  6787 ;; Return value:  Size  Location     Type
  6788 ;;                  4   22[COMRAM] unsigned long 
  6789 ;; Registers used:
  6790 ;;		wreg, status,2, status,0
  6791 ;; Tracked objects:
  6792 ;;		On entry : 0/0
  6793 ;;		On exit  : 0/0
  6794 ;;		Unchanged: 0/0
  6795 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6796 ;;      Params:         6       0       0       0       0       0       0
  6797 ;;      Locals:         6       0       0       0       0       0       0
  6798 ;;      Temps:          3       0       0       0       0       0       0
  6799 ;;      Totals:        15       0       0       0       0       0       0
  6800 ;;Total ram usage:       15 bytes
  6801 ;; Hardware stack levels used:    1
  6802 ;; Hardware stack levels required when called:    3
  6803 ;; This function calls:
  6804 ;;		Nothing
  6805 ;; This function is called by:
  6806 ;;		_sprintf
  6807 ;; This function uses a non-reentrant model
  6808 ;;
  6809                           
  6810                           	psect	text21
  6811  002434                     __ptext21:
  6812                           	opt stack 0
  6813  002434                     __tdiv_to_l_:
  6814                           	opt stack 25
  6815                           
  6816                           ;incstack = 0
  6817  002434  C019  F01D         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  6818  002438  6A1E               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  6819  00243A  6A1F               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  6820  00243C  3418               	rlcf	__tdiv_to_l_@f1+1,w,c
  6821  00243E  361D               	rlcf	??__tdiv_to_l_& (0+255),f,c
  6822  002440  E301               	bnc	u2481
  6823  002442  801E               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  6824  002444                     u2481:
  6825  002444  501D               	movf	??__tdiv_to_l_,w,c
  6826  002446  6E25               	movwf	__tdiv_to_l_@exp1,c
  6827  002448  5025               	movf	__tdiv_to_l_@exp1,w,c
  6828  00244A  A4D8               	btfss	status,2,c
  6829  00244C  D009               	goto	l611
  6830  00244E  0E00               	movlw	0
  6831  002450  6E17               	movwf	?__tdiv_to_l_,c
  6832  002452  0E00               	movlw	0
  6833  002454  6E18               	movwf	?__tdiv_to_l_+1,c
  6834  002456  0E00               	movlw	0
  6835  002458  6E19               	movwf	?__tdiv_to_l_+2,c
  6836  00245A  0E00               	movlw	0
  6837  00245C  6E1A               	movwf	?__tdiv_to_l_+3,c
  6838  00245E  0012               	return	
  6839  002460                     l611:
  6840  002460  C01C  F01D         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  6841  002464  6A1E               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  6842  002466  6A1F               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  6843  002468  341B               	rlcf	__tdiv_to_l_@f2+1,w,c
  6844  00246A  361D               	rlcf	??__tdiv_to_l_& (0+255),f,c
  6845  00246C  E301               	bnc	u2501
  6846  00246E  801E               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  6847  002470                     u2501:
  6848  002470  501D               	movf	??__tdiv_to_l_,w,c
  6849  002472  6E24               	movwf	__tdiv_to_l_@cntr,c
  6850  002474  5024               	movf	__tdiv_to_l_@cntr,w,c
  6851  002476  A4D8               	btfss	status,2,c
  6852  002478  D009               	goto	l613
  6853  00247A  0E00               	movlw	0
  6854  00247C  6E17               	movwf	?__tdiv_to_l_,c
  6855  00247E  0E00               	movlw	0
  6856  002480  6E18               	movwf	?__tdiv_to_l_+1,c
  6857  002482  0E00               	movlw	0
  6858  002484  6E19               	movwf	?__tdiv_to_l_+2,c
  6859  002486  0E00               	movlw	0
  6860  002488  6E1A               	movwf	?__tdiv_to_l_+3,c
  6861  00248A  0012               	return	
  6862  00248C                     l613:
  6863  00248C  8E18               	bsf	__tdiv_to_l_@f1+1,7,c
  6864  00248E  0EFF               	movlw	255
  6865  002490  1617               	andwf	__tdiv_to_l_@f1,f,c
  6866  002492  0EFF               	movlw	255
  6867  002494  1618               	andwf	__tdiv_to_l_@f1+1,f,c
  6868  002496  0E00               	movlw	0
  6869  002498  1619               	andwf	__tdiv_to_l_@f1+2,f,c
  6870  00249A  8E1B               	bsf	__tdiv_to_l_@f2+1,7,c
  6871  00249C  0EFF               	movlw	255
  6872  00249E  161A               	andwf	__tdiv_to_l_@f2,f,c
  6873  0024A0  0EFF               	movlw	255
  6874  0024A2  161B               	andwf	__tdiv_to_l_@f2+1,f,c
  6875  0024A4  0E00               	movlw	0
  6876  0024A6  161C               	andwf	__tdiv_to_l_@f2+2,f,c
  6877  0024A8  0E00               	movlw	0
  6878  0024AA  6E20               	movwf	__tdiv_to_l_@quot,c
  6879  0024AC  0E00               	movlw	0
  6880  0024AE  6E21               	movwf	__tdiv_to_l_@quot+1,c
  6881  0024B0  0E00               	movlw	0
  6882  0024B2  6E22               	movwf	__tdiv_to_l_@quot+2,c
  6883  0024B4  0E00               	movlw	0
  6884  0024B6  6E23               	movwf	__tdiv_to_l_@quot+3,c
  6885  0024B8  0E7F               	movlw	127
  6886  0024BA  5E25               	subwf	__tdiv_to_l_@exp1,f,c
  6887  0024BC  5024               	movf	__tdiv_to_l_@cntr,w,c
  6888  0024BE  0F98               	addlw	152
  6889  0024C0  5E25               	subwf	__tdiv_to_l_@exp1,f,c
  6890  0024C2  0E18               	movlw	24
  6891  0024C4  6E24               	movwf	__tdiv_to_l_@cntr,c
  6892  0024C6                     l614:
  6893  0024C6  90D8               	bcf	status,0,c
  6894  0024C8  3620               	rlcf	__tdiv_to_l_@quot,f,c
  6895  0024CA  3621               	rlcf	__tdiv_to_l_@quot+1,f,c
  6896  0024CC  3622               	rlcf	__tdiv_to_l_@quot+2,f,c
  6897  0024CE  3623               	rlcf	__tdiv_to_l_@quot+3,f,c
  6898  0024D0  501A               	movf	__tdiv_to_l_@f2,w,c
  6899  0024D2  5C17               	subwf	__tdiv_to_l_@f1,w,c
  6900  0024D4  501B               	movf	__tdiv_to_l_@f2+1,w,c
  6901  0024D6  5818               	subwfb	__tdiv_to_l_@f1+1,w,c
  6902  0024D8  501C               	movf	__tdiv_to_l_@f2+2,w,c
  6903  0024DA  5819               	subwfb	__tdiv_to_l_@f1+2,w,c
  6904  0024DC  A0D8               	btfss	status,0,c
  6905  0024DE  D007               	goto	l615
  6906  0024E0  501A               	movf	__tdiv_to_l_@f2,w,c
  6907  0024E2  5E17               	subwf	__tdiv_to_l_@f1,f,c
  6908  0024E4  501B               	movf	__tdiv_to_l_@f2+1,w,c
  6909  0024E6  5A18               	subwfb	__tdiv_to_l_@f1+1,f,c
  6910  0024E8  501C               	movf	__tdiv_to_l_@f2+2,w,c
  6911  0024EA  5A19               	subwfb	__tdiv_to_l_@f1+2,f,c
  6912  0024EC  8020               	bsf	__tdiv_to_l_@quot,0,c
  6913  0024EE                     l615:
  6914  0024EE  90D8               	bcf	status,0,c
  6915  0024F0  3617               	rlcf	__tdiv_to_l_@f1,f,c
  6916  0024F2  3618               	rlcf	__tdiv_to_l_@f1+1,f,c
  6917  0024F4  3619               	rlcf	__tdiv_to_l_@f1+2,f,c
  6918  0024F6  2E24               	decfsz	__tdiv_to_l_@cntr,f,c
  6919  0024F8  D7E6               	goto	l614
  6920  0024FA  AE25               	btfss	__tdiv_to_l_@exp1,7,c
  6921  0024FC  D016               	goto	l617
  6922  0024FE  5025               	movf	__tdiv_to_l_@exp1,w,c
  6923  002500  0A80               	xorlw	128
  6924  002502  0F97               	addlw	151
  6925  002504  B0D8               	btfsc	status,0,c
  6926  002506  D009               	goto	l618
  6927  002508  0E00               	movlw	0
  6928  00250A  6E17               	movwf	?__tdiv_to_l_,c
  6929  00250C  0E00               	movlw	0
  6930  00250E  6E18               	movwf	?__tdiv_to_l_+1,c
  6931  002510  0E00               	movlw	0
  6932  002512  6E19               	movwf	?__tdiv_to_l_+2,c
  6933  002514  0E00               	movlw	0
  6934  002516  6E1A               	movwf	?__tdiv_to_l_+3,c
  6935  002518  0012               	return	
  6936  00251A                     l618:
  6937  00251A  90D8               	bcf	status,0,c
  6938  00251C  3223               	rrcf	__tdiv_to_l_@quot+3,f,c
  6939  00251E  3222               	rrcf	__tdiv_to_l_@quot+2,f,c
  6940  002520  3221               	rrcf	__tdiv_to_l_@quot+1,f,c
  6941  002522  3220               	rrcf	__tdiv_to_l_@quot,f,c
  6942  002524  3E25               	incfsz	__tdiv_to_l_@exp1,f,c
  6943  002526  D7F9               	goto	l618
  6944  002528  D015               	goto	u2560
  6945  00252A                     l617:
  6946  00252A  0E17               	movlw	23
  6947  00252C  6425               	cpfsgt	__tdiv_to_l_@exp1,c
  6948  00252E  D00F               	goto	l623
  6949  002530  0E00               	movlw	0
  6950  002532  6E17               	movwf	?__tdiv_to_l_,c
  6951  002534  0E00               	movlw	0
  6952  002536  6E18               	movwf	?__tdiv_to_l_+1,c
  6953  002538  0E00               	movlw	0
  6954  00253A  6E19               	movwf	?__tdiv_to_l_+2,c
  6955  00253C  0E00               	movlw	0
  6956  00253E  6E1A               	movwf	?__tdiv_to_l_+3,c
  6957  002540  0012               	return	
  6958  002542  90D8               	bcf	status,0,c
  6959  002544  3620               	rlcf	__tdiv_to_l_@quot,f,c
  6960  002546  3621               	rlcf	__tdiv_to_l_@quot+1,f,c
  6961  002548  3622               	rlcf	__tdiv_to_l_@quot+2,f,c
  6962  00254A  3623               	rlcf	__tdiv_to_l_@quot+3,f,c
  6963  00254C  0625               	decf	__tdiv_to_l_@exp1,f,c
  6964  00254E                     l623:
  6965  00254E  5025               	movf	__tdiv_to_l_@exp1,w,c
  6966  002550  A4D8               	btfss	status,2,c
  6967  002552  D7F7               	goto	l624
  6968  002554                     u2560:
  6969  002554  C020  F017         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  6970  002558  C021  F018         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  6971  00255C  C022  F019         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  6972  002560  C023  F01A         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  6973  002564  0012               	return		;funcret
  6974  002566                     __end_of__tdiv_to_l_:
  6975                           	opt stack 0
  6976                           tblptru	equ	0xFF8
  6977                           tblptrh	equ	0xFF7
  6978                           tblptrl	equ	0xFF6
  6979                           tablat	equ	0xFF5
  6980                           prodh	equ	0xFF4
  6981                           prodl	equ	0xFF3
  6982                           intcon	equ	0xFF2
  6983                           intcon2	equ	0xFF1
  6984                           indf0	equ	0xFEF
  6985                           postinc0	equ	0xFEE
  6986                           fsr0h	equ	0xFEA
  6987                           fsr0l	equ	0xFE9
  6988                           wreg	equ	0xFE8
  6989                           indf2	equ	0xFDF
  6990                           postinc2	equ	0xFDE
  6991                           postdec2	equ	0xFDD
  6992                           fsr2h	equ	0xFDA
  6993                           fsr2l	equ	0xFD9
  6994                           status	equ	0xFD8
  6995                           
  6996 ;; *************** function __div_to_l_ *****************
  6997 ;; Defined at:
  6998 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\fldivl.c"
  6999 ;; Parameters:    Size  Location     Type
  7000 ;;  f1              3   22[COMRAM] unsigned long 
  7001 ;;  f2              3   25[COMRAM] unsigned long 
  7002 ;; Auto vars:     Size  Location     Type
  7003 ;;  quot            4   28[COMRAM] unsigned long 
  7004 ;;  exp1            1   33[COMRAM] unsigned char 
  7005 ;;  cntr            1   32[COMRAM] unsigned char 
  7006 ;; Return value:  Size  Location     Type
  7007 ;;                  4   22[COMRAM] unsigned long 
  7008 ;; Registers used:
  7009 ;;		wreg, status,2, status,0
  7010 ;; Tracked objects:
  7011 ;;		On entry : 0/0
  7012 ;;		On exit  : 0/0
  7013 ;;		Unchanged: 0/0
  7014 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7015 ;;      Params:         6       0       0       0       0       0       0
  7016 ;;      Locals:         6       0       0       0       0       0       0
  7017 ;;      Temps:          0       0       0       0       0       0       0
  7018 ;;      Totals:        12       0       0       0       0       0       0
  7019 ;;Total ram usage:       12 bytes
  7020 ;; Hardware stack levels used:    1
  7021 ;; Hardware stack levels required when called:    3
  7022 ;; This function calls:
  7023 ;;		Nothing
  7024 ;; This function is called by:
  7025 ;;		_sprintf
  7026 ;; This function uses a non-reentrant model
  7027 ;;
  7028                           
  7029                           	psect	text22
  7030  0027C0                     __ptext22:
  7031                           	opt stack 0
  7032  0027C0                     __div_to_l_:
  7033                           	opt stack 25
  7034                           
  7035                           ;incstack = 0
  7036  0027C0  3419               	rlcf	__div_to_l_@f1+2,w,c
  7037  0027C2  341A               	rlcf	__div_to_l_@f1+3,w,c
  7038  0027C4  6E22               	movwf	__div_to_l_@exp1,c
  7039  0027C6  5022               	movf	__div_to_l_@exp1,w,c
  7040  0027C8  A4D8               	btfss	status,2,c
  7041  0027CA  D009               	goto	l507
  7042  0027CC  0E00               	movlw	0
  7043  0027CE  6E17               	movwf	?__div_to_l_,c
  7044  0027D0  0E00               	movlw	0
  7045  0027D2  6E18               	movwf	?__div_to_l_+1,c
  7046  0027D4  0E00               	movlw	0
  7047  0027D6  6E19               	movwf	?__div_to_l_+2,c
  7048  0027D8  0E00               	movlw	0
  7049  0027DA  6E1A               	movwf	?__div_to_l_+3,c
  7050  0027DC  0012               	return	
  7051  0027DE                     l507:
  7052  0027DE  341C               	rlcf	__div_to_l_@f2+2,w,c
  7053  0027E0  341D               	rlcf	__div_to_l_@f2+3,w,c
  7054  0027E2  6E21               	movwf	__div_to_l_@cntr,c
  7055  0027E4  5021               	movf	__div_to_l_@cntr,w,c
  7056  0027E6  A4D8               	btfss	status,2,c
  7057  0027E8  D009               	goto	l509
  7058  0027EA  0E00               	movlw	0
  7059  0027EC  6E17               	movwf	?__div_to_l_,c
  7060  0027EE  0E00               	movlw	0
  7061  0027F0  6E18               	movwf	?__div_to_l_+1,c
  7062  0027F2  0E00               	movlw	0
  7063  0027F4  6E19               	movwf	?__div_to_l_+2,c
  7064  0027F6  0E00               	movlw	0
  7065  0027F8  6E1A               	movwf	?__div_to_l_+3,c
  7066  0027FA  0012               	return	
  7067  0027FC                     l509:
  7068  0027FC  8E19               	bsf	__div_to_l_@f1+2,7,c
  7069  0027FE  0EFF               	movlw	255
  7070  002800  1617               	andwf	__div_to_l_@f1,f,c
  7071  002802  0EFF               	movlw	255
  7072  002804  1618               	andwf	__div_to_l_@f1+1,f,c
  7073  002806  0EFF               	movlw	255
  7074  002808  1619               	andwf	__div_to_l_@f1+2,f,c
  7075  00280A  0E00               	movlw	0
  7076  00280C  161A               	andwf	__div_to_l_@f1+3,f,c
  7077  00280E  8E1C               	bsf	__div_to_l_@f2+2,7,c
  7078  002810  0EFF               	movlw	255
  7079  002812  161A               	andwf	__div_to_l_@f2,f,c
  7080  002814  0EFF               	movlw	255
  7081  002816  161B               	andwf	__div_to_l_@f2+1,f,c
  7082  002818  0EFF               	movlw	255
  7083  00281A  161C               	andwf	__div_to_l_@f2+2,f,c
  7084  00281C  0E00               	movlw	0
  7085  00281E  161D               	andwf	__div_to_l_@f2+3,f,c
  7086  002820  0E00               	movlw	0
  7087  002822  6E1D               	movwf	__div_to_l_@quot,c
  7088  002824  0E00               	movlw	0
  7089  002826  6E1E               	movwf	__div_to_l_@quot+1,c
  7090  002828  0E00               	movlw	0
  7091  00282A  6E1F               	movwf	__div_to_l_@quot+2,c
  7092  00282C  0E00               	movlw	0
  7093  00282E  6E20               	movwf	__div_to_l_@quot+3,c
  7094  002830  0E7F               	movlw	127
  7095  002832  5E22               	subwf	__div_to_l_@exp1,f,c
  7096  002834  5021               	movf	__div_to_l_@cntr,w,c
  7097  002836  0FA0               	addlw	160
  7098  002838  5E22               	subwf	__div_to_l_@exp1,f,c
  7099  00283A  0E20               	movlw	32
  7100  00283C  6E21               	movwf	__div_to_l_@cntr,c
  7101  00283E  90D8               	bcf	status,0,c
  7102  002840  361D               	rlcf	__div_to_l_@quot,f,c
  7103  002842  361E               	rlcf	__div_to_l_@quot+1,f,c
  7104  002844  361F               	rlcf	__div_to_l_@quot+2,f,c
  7105  002846  3620               	rlcf	__div_to_l_@quot+3,f,c
  7106  002848  501A               	movf	__div_to_l_@f2,w,c
  7107  00284A  5C17               	subwf	__div_to_l_@f1,w,c
  7108  00284C  501B               	movf	__div_to_l_@f2+1,w,c
  7109  00284E  5818               	subwfb	__div_to_l_@f1+1,w,c
  7110  002850  501C               	movf	__div_to_l_@f2+2,w,c
  7111  002852  5819               	subwfb	__div_to_l_@f1+2,w,c
  7112  002854  501D               	movf	__div_to_l_@f2+3,w,c
  7113  002856  581A               	subwfb	__div_to_l_@f1+3,w,c
  7114  002858  A0D8               	btfss	status,0,c
  7115  00285A  D009               	goto	l511
  7116  00285C  501A               	movf	__div_to_l_@f2,w,c
  7117  00285E  5E17               	subwf	__div_to_l_@f1,f,c
  7118  002860  501B               	movf	__div_to_l_@f2+1,w,c
  7119  002862  5A18               	subwfb	__div_to_l_@f1+1,f,c
  7120  002864  501C               	movf	__div_to_l_@f2+2,w,c
  7121  002866  5A19               	subwfb	__div_to_l_@f1+2,f,c
  7122  002868  501D               	movf	__div_to_l_@f2+3,w,c
  7123  00286A  5A1A               	subwfb	__div_to_l_@f1+3,f,c
  7124  00286C  801D               	bsf	__div_to_l_@quot,0,c
  7125  00286E                     l511:
  7126  00286E  90D8               	bcf	status,0,c
  7127  002870  3617               	rlcf	__div_to_l_@f1,f,c
  7128  002872  3618               	rlcf	__div_to_l_@f1+1,f,c
  7129  002874  3619               	rlcf	__div_to_l_@f1+2,f,c
  7130  002876  361A               	rlcf	__div_to_l_@f1+3,f,c
  7131  002878  2E21               	decfsz	__div_to_l_@cntr,f,c
  7132  00287A  D7E1               	goto	l510
  7133  00287C  AE22               	btfss	__div_to_l_@exp1,7,c
  7134  00287E  D016               	goto	l513
  7135  002880  5022               	movf	__div_to_l_@exp1,w,c
  7136  002882  0A80               	xorlw	128
  7137  002884  0F9F               	addlw	159
  7138  002886  B0D8               	btfsc	status,0,c
  7139  002888  D009               	goto	l514
  7140  00288A  0E00               	movlw	0
  7141  00288C  6E17               	movwf	?__div_to_l_,c
  7142  00288E  0E00               	movlw	0
  7143  002890  6E18               	movwf	?__div_to_l_+1,c
  7144  002892  0E00               	movlw	0
  7145  002894  6E19               	movwf	?__div_to_l_+2,c
  7146  002896  0E00               	movlw	0
  7147  002898  6E1A               	movwf	?__div_to_l_+3,c
  7148  00289A  0012               	return	
  7149  00289C                     l514:
  7150  00289C  90D8               	bcf	status,0,c
  7151  00289E  3220               	rrcf	__div_to_l_@quot+3,f,c
  7152  0028A0  321F               	rrcf	__div_to_l_@quot+2,f,c
  7153  0028A2  321E               	rrcf	__div_to_l_@quot+1,f,c
  7154  0028A4  321D               	rrcf	__div_to_l_@quot,f,c
  7155  0028A6  3E22               	incfsz	__div_to_l_@exp1,f,c
  7156  0028A8  D7F9               	goto	l514
  7157  0028AA  D015               	goto	u2630
  7158  0028AC                     l513:
  7159  0028AC  0E1F               	movlw	31
  7160  0028AE  6422               	cpfsgt	__div_to_l_@exp1,c
  7161  0028B0  D00F               	goto	l519
  7162  0028B2  0E00               	movlw	0
  7163  0028B4  6E17               	movwf	?__div_to_l_,c
  7164  0028B6  0E00               	movlw	0
  7165  0028B8  6E18               	movwf	?__div_to_l_+1,c
  7166  0028BA  0E00               	movlw	0
  7167  0028BC  6E19               	movwf	?__div_to_l_+2,c
  7168  0028BE  0E00               	movlw	0
  7169  0028C0  6E1A               	movwf	?__div_to_l_+3,c
  7170  0028C2  0012               	return	
  7171  0028C4  90D8               	bcf	status,0,c
  7172  0028C6  361D               	rlcf	__div_to_l_@quot,f,c
  7173  0028C8  361E               	rlcf	__div_to_l_@quot+1,f,c
  7174  0028CA  361F               	rlcf	__div_to_l_@quot+2,f,c
  7175  0028CC  3620               	rlcf	__div_to_l_@quot+3,f,c
  7176  0028CE  0622               	decf	__div_to_l_@exp1,f,c
  7177  0028D0                     l519:
  7178  0028D0  5022               	movf	__div_to_l_@exp1,w,c
  7179  0028D2  A4D8               	btfss	status,2,c
  7180  0028D4  D7F7               	goto	l520
  7181  0028D6                     u2630:
  7182  0028D6  C01D  F017         	movff	__div_to_l_@quot,?__div_to_l_
  7183  0028DA  C01E  F018         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  7184  0028DE  C01F  F019         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  7185  0028E2  C020  F01A         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  7186  0028E6  0012               	return		;funcret
  7187  0028E8                     __end_of__div_to_l_:
  7188                           	opt stack 0
  7189                           tblptru	equ	0xFF8
  7190                           tblptrh	equ	0xFF7
  7191                           tblptrl	equ	0xFF6
  7192                           tablat	equ	0xFF5
  7193                           prodh	equ	0xFF4
  7194                           prodl	equ	0xFF3
  7195                           intcon	equ	0xFF2
  7196                           intcon2	equ	0xFF1
  7197                           indf0	equ	0xFEF
  7198                           postinc0	equ	0xFEE
  7199                           fsr0h	equ	0xFEA
  7200                           fsr0l	equ	0xFE9
  7201                           wreg	equ	0xFE8
  7202                           indf2	equ	0xFDF
  7203                           postinc2	equ	0xFDE
  7204                           postdec2	equ	0xFDD
  7205                           fsr2h	equ	0xFDA
  7206                           fsr2l	equ	0xFD9
  7207                           status	equ	0xFD8
  7208                           
  7209 ;; *************** function ___lltoft *****************
  7210 ;; Defined at:
  7211 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\lltoft.c"
  7212 ;; Parameters:    Size  Location     Type
  7213 ;;  c               4   30[COMRAM] unsigned long 
  7214 ;; Auto vars:     Size  Location     Type
  7215 ;;  exp             1   38[COMRAM] unsigned char 
  7216 ;; Return value:  Size  Location     Type
  7217 ;;                  3   30[COMRAM] float 
  7218 ;; Registers used:
  7219 ;;		wreg, status,2, status,0, cstack
  7220 ;; Tracked objects:
  7221 ;;		On entry : 0/0
  7222 ;;		On exit  : 0/0
  7223 ;;		Unchanged: 0/0
  7224 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7225 ;;      Params:         4       0       0       0       0       0       0
  7226 ;;      Locals:         1       0       0       0       0       0       0
  7227 ;;      Temps:          4       0       0       0       0       0       0
  7228 ;;      Totals:         9       0       0       0       0       0       0
  7229 ;;Total ram usage:        9 bytes
  7230 ;; Hardware stack levels used:    1
  7231 ;; Hardware stack levels required when called:    4
  7232 ;; This function calls:
  7233 ;;		___ftpack
  7234 ;; This function is called by:
  7235 ;;		_sprintf
  7236 ;; This function uses a non-reentrant model
  7237 ;;
  7238                           
  7239                           	psect	text23
  7240  002C8A                     __ptext23:
  7241                           	opt stack 0
  7242  002C8A                     ___lltoft:
  7243                           	opt stack 24
  7244                           
  7245                           ;incstack = 0
  7246  002C8A  0E8E               	movlw	142
  7247  002C8C  6E27               	movwf	___lltoft@exp,c
  7248  002C8E  D006               	goto	l718
  7249  002C90  90D8               	bcf	status,0,c
  7250  002C92  3222               	rrcf	___lltoft@c+3,f,c
  7251  002C94  3221               	rrcf	___lltoft@c+2,f,c
  7252  002C96  3220               	rrcf	___lltoft@c+1,f,c
  7253  002C98  321F               	rrcf	___lltoft@c,f,c
  7254  002C9A  2A27               	incf	___lltoft@exp,f,c
  7255  002C9C                     l718:
  7256  002C9C  0E00               	movlw	0
  7257  002C9E  141F               	andwf	___lltoft@c,w,c
  7258  002CA0  6E23               	movwf	??___lltoft& (0+255),c
  7259  002CA2  0E00               	movlw	0
  7260  002CA4  1420               	andwf	___lltoft@c+1,w,c
  7261  002CA6  6E24               	movwf	(??___lltoft+1)& (0+255),c
  7262  002CA8  0E00               	movlw	0
  7263  002CAA  1421               	andwf	___lltoft@c+2,w,c
  7264  002CAC  6E25               	movwf	(??___lltoft+2)& (0+255),c
  7265  002CAE  0EFF               	movlw	255
  7266  002CB0  1422               	andwf	___lltoft@c+3,w,c
  7267  002CB2  6E26               	movwf	(??___lltoft+3)& (0+255),c
  7268  002CB4  5023               	movf	??___lltoft,w,c
  7269  002CB6  1024               	iorwf	??___lltoft+1,w,c
  7270  002CB8  1025               	iorwf	??___lltoft+2,w,c
  7271  002CBA  1026               	iorwf	??___lltoft+3,w,c
  7272  002CBC  A4D8               	btfss	status,2,c
  7273  002CBE  D7E8               	goto	l719
  7274  002CC0  C01F  F017         	movff	___lltoft@c,___ftpack@arg
  7275  002CC4  C020  F018         	movff	___lltoft@c+1,___ftpack@arg+1
  7276  002CC8  C021  F019         	movff	___lltoft@c+2,___ftpack@arg+2
  7277  002CCC  C027  F01A         	movff	___lltoft@exp,___ftpack@exp
  7278  002CD0  0E00               	movlw	0
  7279  002CD2  6E1B               	movwf	___ftpack@sign,c
  7280  002CD4  EC74  F014         	call	___ftpack	;wreg free
  7281  002CD8  C017  F01F         	movff	?___ftpack,?___lltoft
  7282  002CDC  C018  F020         	movff	?___ftpack+1,?___lltoft+1
  7283  002CE0  C019  F021         	movff	?___ftpack+2,?___lltoft+2
  7284  002CE4  0012               	return	
  7285  002CE6                     __end_of___lltoft:
  7286                           	opt stack 0
  7287                           tblptru	equ	0xFF8
  7288                           tblptrh	equ	0xFF7
  7289                           tblptrl	equ	0xFF6
  7290                           tablat	equ	0xFF5
  7291                           prodh	equ	0xFF4
  7292                           prodl	equ	0xFF3
  7293                           intcon	equ	0xFF2
  7294                           intcon2	equ	0xFF1
  7295                           indf0	equ	0xFEF
  7296                           postinc0	equ	0xFEE
  7297                           fsr0h	equ	0xFEA
  7298                           fsr0l	equ	0xFE9
  7299                           wreg	equ	0xFE8
  7300                           indf2	equ	0xFDF
  7301                           postinc2	equ	0xFDE
  7302                           postdec2	equ	0xFDD
  7303                           fsr2h	equ	0xFDA
  7304                           fsr2l	equ	0xFD9
  7305                           status	equ	0xFD8
  7306                           
  7307 ;; *************** function ___llmod *****************
  7308 ;; Defined at:
  7309 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\llmod.c"
  7310 ;; Parameters:    Size  Location     Type
  7311 ;;  dividend        4   35[COMRAM] unsigned long 
  7312 ;;  divisor         4   39[COMRAM] unsigned long 
  7313 ;; Auto vars:     Size  Location     Type
  7314 ;;  counter         1   43[COMRAM] unsigned char 
  7315 ;; Return value:  Size  Location     Type
  7316 ;;                  4   35[COMRAM] unsigned long 
  7317 ;; Registers used:
  7318 ;;		wreg, status,2, status,0
  7319 ;; Tracked objects:
  7320 ;;		On entry : 0/0
  7321 ;;		On exit  : 0/0
  7322 ;;		Unchanged: 0/0
  7323 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7324 ;;      Params:         8       0       0       0       0       0       0
  7325 ;;      Locals:         1       0       0       0       0       0       0
  7326 ;;      Temps:          0       0       0       0       0       0       0
  7327 ;;      Totals:         9       0       0       0       0       0       0
  7328 ;;Total ram usage:        9 bytes
  7329 ;; Hardware stack levels used:    1
  7330 ;; Hardware stack levels required when called:    3
  7331 ;; This function calls:
  7332 ;;		Nothing
  7333 ;; This function is called by:
  7334 ;;		_sprintf
  7335 ;; This function uses a non-reentrant model
  7336 ;;
  7337                           
  7338                           	psect	text24
  7339  002C24                     __ptext24:
  7340                           	opt stack 0
  7341  002C24                     ___llmod:
  7342                           	opt stack 25
  7343                           
  7344                           ;incstack = 0
  7345  002C24  5028               	movf	___llmod@divisor,w,c
  7346  002C26  1029               	iorwf	___llmod@divisor+1,w,c
  7347  002C28  102A               	iorwf	___llmod@divisor+2,w,c
  7348  002C2A  102B               	iorwf	___llmod@divisor+3,w,c
  7349  002C2C  B4D8               	btfsc	status,2,c
  7350  002C2E  D024               	goto	l712
  7351  002C30  0E01               	movlw	1
  7352  002C32  6E2C               	movwf	___llmod@counter,c
  7353  002C34  D006               	goto	l707
  7354  002C36  90D8               	bcf	status,0,c
  7355  002C38  3628               	rlcf	___llmod@divisor,f,c
  7356  002C3A  3629               	rlcf	___llmod@divisor+1,f,c
  7357  002C3C  362A               	rlcf	___llmod@divisor+2,f,c
  7358  002C3E  362B               	rlcf	___llmod@divisor+3,f,c
  7359  002C40  2A2C               	incf	___llmod@counter,f,c
  7360  002C42                     l707:
  7361  002C42  AE2B               	btfss	___llmod@divisor+3,7,c
  7362  002C44  D7F8               	goto	l708
  7363  002C46                     u2810:
  7364  002C46  5028               	movf	___llmod@divisor,w,c
  7365  002C48  5C24               	subwf	___llmod@dividend,w,c
  7366  002C4A  5029               	movf	___llmod@divisor+1,w,c
  7367  002C4C  5825               	subwfb	___llmod@dividend+1,w,c
  7368  002C4E  502A               	movf	___llmod@divisor+2,w,c
  7369  002C50  5826               	subwfb	___llmod@dividend+2,w,c
  7370  002C52  502B               	movf	___llmod@divisor+3,w,c
  7371  002C54  5827               	subwfb	___llmod@dividend+3,w,c
  7372  002C56  A0D8               	btfss	status,0,c
  7373  002C58  D008               	goto	l711
  7374  002C5A  5028               	movf	___llmod@divisor,w,c
  7375  002C5C  5E24               	subwf	___llmod@dividend,f,c
  7376  002C5E  5029               	movf	___llmod@divisor+1,w,c
  7377  002C60  5A25               	subwfb	___llmod@dividend+1,f,c
  7378  002C62  502A               	movf	___llmod@divisor+2,w,c
  7379  002C64  5A26               	subwfb	___llmod@dividend+2,f,c
  7380  002C66  502B               	movf	___llmod@divisor+3,w,c
  7381  002C68  5A27               	subwfb	___llmod@dividend+3,f,c
  7382  002C6A                     l711:
  7383  002C6A  90D8               	bcf	status,0,c
  7384  002C6C  322B               	rrcf	___llmod@divisor+3,f,c
  7385  002C6E  322A               	rrcf	___llmod@divisor+2,f,c
  7386  002C70  3229               	rrcf	___llmod@divisor+1,f,c
  7387  002C72  3228               	rrcf	___llmod@divisor,f,c
  7388  002C74  2E2C               	decfsz	___llmod@counter,f,c
  7389  002C76  D7E7               	goto	u2810
  7390  002C78                     l712:
  7391  002C78  C024  F024         	movff	___llmod@dividend,?___llmod
  7392  002C7C  C025  F025         	movff	___llmod@dividend+1,?___llmod+1
  7393  002C80  C026  F026         	movff	___llmod@dividend+2,?___llmod+2
  7394  002C84  C027  F027         	movff	___llmod@dividend+3,?___llmod+3
  7395  002C88  0012               	return		;funcret
  7396  002C8A                     __end_of___llmod:
  7397                           	opt stack 0
  7398                           tblptru	equ	0xFF8
  7399                           tblptrh	equ	0xFF7
  7400                           tblptrl	equ	0xFF6
  7401                           tablat	equ	0xFF5
  7402                           prodh	equ	0xFF4
  7403                           prodl	equ	0xFF3
  7404                           intcon	equ	0xFF2
  7405                           intcon2	equ	0xFF1
  7406                           indf0	equ	0xFEF
  7407                           postinc0	equ	0xFEE
  7408                           fsr0h	equ	0xFEA
  7409                           fsr0l	equ	0xFE9
  7410                           wreg	equ	0xFE8
  7411                           indf2	equ	0xFDF
  7412                           postinc2	equ	0xFDE
  7413                           postdec2	equ	0xFDD
  7414                           fsr2h	equ	0xFDA
  7415                           fsr2l	equ	0xFD9
  7416                           status	equ	0xFD8
  7417                           
  7418 ;; *************** function ___lldiv *****************
  7419 ;; Defined at:
  7420 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\lldiv.c"
  7421 ;; Parameters:    Size  Location     Type
  7422 ;;  dividend        4   22[COMRAM] unsigned long 
  7423 ;;  divisor         4   26[COMRAM] unsigned long 
  7424 ;; Auto vars:     Size  Location     Type
  7425 ;;  quotient        4   30[COMRAM] unsigned long 
  7426 ;;  counter         1   34[COMRAM] unsigned char 
  7427 ;; Return value:  Size  Location     Type
  7428 ;;                  4   22[COMRAM] unsigned long 
  7429 ;; Registers used:
  7430 ;;		wreg, status,2, status,0
  7431 ;; Tracked objects:
  7432 ;;		On entry : 0/0
  7433 ;;		On exit  : 0/0
  7434 ;;		Unchanged: 0/0
  7435 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7436 ;;      Params:         8       0       0       0       0       0       0
  7437 ;;      Locals:         5       0       0       0       0       0       0
  7438 ;;      Temps:          0       0       0       0       0       0       0
  7439 ;;      Totals:        13       0       0       0       0       0       0
  7440 ;;Total ram usage:       13 bytes
  7441 ;; Hardware stack levels used:    1
  7442 ;; Hardware stack levels required when called:    3
  7443 ;; This function calls:
  7444 ;;		Nothing
  7445 ;; This function is called by:
  7446 ;;		_sprintf
  7447 ;; This function uses a non-reentrant model
  7448 ;;
  7449                           
  7450                           	psect	text25
  7451  002B32                     __ptext25:
  7452                           	opt stack 0
  7453  002B32                     ___lldiv:
  7454                           	opt stack 25
  7455                           
  7456                           ;incstack = 0
  7457  002B32  0E00               	movlw	0
  7458  002B34  6E1F               	movwf	___lldiv@quotient,c
  7459  002B36  0E00               	movlw	0
  7460  002B38  6E20               	movwf	___lldiv@quotient+1,c
  7461  002B3A  0E00               	movlw	0
  7462  002B3C  6E21               	movwf	___lldiv@quotient+2,c
  7463  002B3E  0E00               	movlw	0
  7464  002B40  6E22               	movwf	___lldiv@quotient+3,c
  7465  002B42  501B               	movf	___lldiv@divisor,w,c
  7466  002B44  101C               	iorwf	___lldiv@divisor+1,w,c
  7467  002B46  101D               	iorwf	___lldiv@divisor+2,w,c
  7468  002B48  101E               	iorwf	___lldiv@divisor+3,w,c
  7469  002B4A  B4D8               	btfsc	status,2,c
  7470  002B4C  D02A               	goto	l702
  7471  002B4E  0E01               	movlw	1
  7472  002B50  6E23               	movwf	___lldiv@counter,c
  7473  002B52  D006               	goto	l697
  7474  002B54  90D8               	bcf	status,0,c
  7475  002B56  361B               	rlcf	___lldiv@divisor,f,c
  7476  002B58  361C               	rlcf	___lldiv@divisor+1,f,c
  7477  002B5A  361D               	rlcf	___lldiv@divisor+2,f,c
  7478  002B5C  361E               	rlcf	___lldiv@divisor+3,f,c
  7479  002B5E  2A23               	incf	___lldiv@counter,f,c
  7480  002B60                     l697:
  7481  002B60  AE1E               	btfss	___lldiv@divisor+3,7,c
  7482  002B62  D7F8               	goto	l698
  7483  002B64                     u2780:
  7484  002B64  90D8               	bcf	status,0,c
  7485  002B66  361F               	rlcf	___lldiv@quotient,f,c
  7486  002B68  3620               	rlcf	___lldiv@quotient+1,f,c
  7487  002B6A  3621               	rlcf	___lldiv@quotient+2,f,c
  7488  002B6C  3622               	rlcf	___lldiv@quotient+3,f,c
  7489  002B6E  501B               	movf	___lldiv@divisor,w,c
  7490  002B70  5C17               	subwf	___lldiv@dividend,w,c
  7491  002B72  501C               	movf	___lldiv@divisor+1,w,c
  7492  002B74  5818               	subwfb	___lldiv@dividend+1,w,c
  7493  002B76  501D               	movf	___lldiv@divisor+2,w,c
  7494  002B78  5819               	subwfb	___lldiv@dividend+2,w,c
  7495  002B7A  501E               	movf	___lldiv@divisor+3,w,c
  7496  002B7C  581A               	subwfb	___lldiv@dividend+3,w,c
  7497  002B7E  A0D8               	btfss	status,0,c
  7498  002B80  D009               	goto	l701
  7499  002B82  501B               	movf	___lldiv@divisor,w,c
  7500  002B84  5E17               	subwf	___lldiv@dividend,f,c
  7501  002B86  501C               	movf	___lldiv@divisor+1,w,c
  7502  002B88  5A18               	subwfb	___lldiv@dividend+1,f,c
  7503  002B8A  501D               	movf	___lldiv@divisor+2,w,c
  7504  002B8C  5A19               	subwfb	___lldiv@dividend+2,f,c
  7505  002B8E  501E               	movf	___lldiv@divisor+3,w,c
  7506  002B90  5A1A               	subwfb	___lldiv@dividend+3,f,c
  7507  002B92  801F               	bsf	___lldiv@quotient,0,c
  7508  002B94                     l701:
  7509  002B94  90D8               	bcf	status,0,c
  7510  002B96  321E               	rrcf	___lldiv@divisor+3,f,c
  7511  002B98  321D               	rrcf	___lldiv@divisor+2,f,c
  7512  002B9A  321C               	rrcf	___lldiv@divisor+1,f,c
  7513  002B9C  321B               	rrcf	___lldiv@divisor,f,c
  7514  002B9E  2E23               	decfsz	___lldiv@counter,f,c
  7515  002BA0  D7E1               	goto	u2780
  7516  002BA2                     l702:
  7517  002BA2  C01F  F017         	movff	___lldiv@quotient,?___lldiv
  7518  002BA6  C020  F018         	movff	___lldiv@quotient+1,?___lldiv+1
  7519  002BAA  C021  F019         	movff	___lldiv@quotient+2,?___lldiv+2
  7520  002BAE  C022  F01A         	movff	___lldiv@quotient+3,?___lldiv+3
  7521  002BB2  0012               	return		;funcret
  7522  002BB4                     __end_of___lldiv:
  7523                           	opt stack 0
  7524                           tblptru	equ	0xFF8
  7525                           tblptrh	equ	0xFF7
  7526                           tblptrl	equ	0xFF6
  7527                           tablat	equ	0xFF5
  7528                           prodh	equ	0xFF4
  7529                           prodl	equ	0xFF3
  7530                           intcon	equ	0xFF2
  7531                           intcon2	equ	0xFF1
  7532                           indf0	equ	0xFEF
  7533                           postinc0	equ	0xFEE
  7534                           fsr0h	equ	0xFEA
  7535                           fsr0l	equ	0xFE9
  7536                           wreg	equ	0xFE8
  7537                           indf2	equ	0xFDF
  7538                           postinc2	equ	0xFDE
  7539                           postdec2	equ	0xFDD
  7540                           fsr2h	equ	0xFDA
  7541                           fsr2l	equ	0xFD9
  7542                           status	equ	0xFD8
  7543                           
  7544 ;; *************** function ___fttol *****************
  7545 ;; Defined at:
  7546 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\fttol.c"
  7547 ;; Parameters:    Size  Location     Type
  7548 ;;  f1              3   37[BANK0 ] float 
  7549 ;; Auto vars:     Size  Location     Type
  7550 ;;  lval            4   47[BANK0 ] unsigned long 
  7551 ;;  exp1            1   51[BANK0 ] unsigned char 
  7552 ;;  sign1           1   46[BANK0 ] unsigned char 
  7553 ;; Return value:  Size  Location     Type
  7554 ;;                  4   37[BANK0 ] long 
  7555 ;; Registers used:
  7556 ;;		wreg, status,2, status,0
  7557 ;; Tracked objects:
  7558 ;;		On entry : 0/0
  7559 ;;		On exit  : 0/0
  7560 ;;		Unchanged: 0/0
  7561 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7562 ;;      Params:         0       4       0       0       0       0       0
  7563 ;;      Locals:         0       6       0       0       0       0       0
  7564 ;;      Temps:          0       5       0       0       0       0       0
  7565 ;;      Totals:         0      15       0       0       0       0       0
  7566 ;;Total ram usage:       15 bytes
  7567 ;; Hardware stack levels used:    1
  7568 ;; Hardware stack levels required when called:    3
  7569 ;; This function calls:
  7570 ;;		Nothing
  7571 ;; This function is called by:
  7572 ;;		_temperatureMeasurementC
  7573 ;;		_temperatureMeasurementF
  7574 ;;		_sprintf
  7575 ;; This function uses a non-reentrant model
  7576 ;;
  7577                           
  7578                           	psect	text26
  7579  0022F0                     __ptext26:
  7580                           	opt stack 0
  7581  0022F0                     ___fttol:
  7582                           	opt stack 25
  7583                           
  7584                           ;incstack = 0
  7585  0022F0  C087  F089         	movff	___fttol@f1+2,??___fttol
  7586  0022F4  0100               	movlb	0	; () banked
  7587  0022F6  6B8A               	clrf	(??___fttol+1)& (0+255),b
  7588  0022F8  6B8B               	clrf	(??___fttol+2)& (0+255),b
  7589  0022FA  0100               	movlb	0	; () banked
  7590  0022FC  3586               	rlcf	(___fttol@f1+1)& (0+255),w,b
  7591  0022FE  0100               	movlb	0	; () banked
  7592  002300  3789               	rlcf	??___fttol& (0+255),f,b
  7593  002302  E301               	bnc	u2691
  7594  002304  818A               	bsf	(??___fttol+1)& (0+255),0,b
  7595  002306                     u2691:
  7596  002306  0100               	movlb	0	; () banked
  7597  002308  5189               	movf	??___fttol& (0+255),w,b
  7598  00230A  0100               	movlb	0	; () banked
  7599  00230C  6F93               	movwf	___fttol@exp1& (0+255),b
  7600  00230E  0100               	movlb	0	; () banked
  7601  002310  5193               	movf	___fttol@exp1& (0+255),w,b
  7602  002312  A4D8               	btfss	status,2,c
  7603  002314  D00A               	goto	l656
  7604                           
  7605                           ; BSR set to: 0
  7606  002316  0E00               	movlw	0
  7607  002318  0100               	movlb	0	; () banked
  7608  00231A  6F85               	movwf	?___fttol& (0+255),b
  7609  00231C  0E00               	movlw	0
  7610  00231E  6F86               	movwf	(?___fttol+1)& (0+255),b
  7611  002320  0E00               	movlw	0
  7612  002322  6F87               	movwf	(?___fttol+2)& (0+255),b
  7613  002324  0E00               	movlw	0
  7614  002326  6F88               	movwf	(?___fttol+3)& (0+255),b
  7615                           
  7616                           ; BSR set to: 0
  7617  002328  0012               	return	
  7618  00232A                     l656:
  7619                           
  7620                           ; BSR set to: 0
  7621                           
  7622                           ; BSR set to: 0
  7623  00232A  0E17               	movlw	23
  7624  00232C  0100               	movlb	0	; () banked
  7625  00232E  6F89               	movwf	??___fttol& (0+255),b
  7626  002330  C085  F08A         	movff	___fttol@f1,??___fttol+1
  7627  002334  C086  F08B         	movff	___fttol@f1+1,??___fttol+2
  7628  002338  C087  F08C         	movff	___fttol@f1+2,??___fttol+3
  7629  00233C  0100               	movlb	0	; () banked
  7630  00233E  2989               	incf	??___fttol& (0+255),w,b
  7631  002340  0100               	movlb	0	; () banked
  7632  002342  6F8D               	movwf	(??___fttol+4)& (0+255),b
  7633  002344  D005               	goto	u2710
  7634  002346                     u2715:
  7635  002346  0100               	movlb	0	; () banked
  7636  002348  90D8               	bcf	status,0,c
  7637  00234A  338C               	rrcf	(??___fttol+3)& (0+255),f,b
  7638  00234C  338B               	rrcf	(??___fttol+2)& (0+255),f,b
  7639  00234E  338A               	rrcf	(??___fttol+1)& (0+255),f,b
  7640  002350                     u2710:
  7641  002350  0100               	movlb	0	; () banked
  7642  002352  2F8D               	decfsz	(??___fttol+4)& (0+255),f,b
  7643  002354  D7F8               	goto	u2715
  7644  002356  0100               	movlb	0	; () banked
  7645  002358  518A               	movf	(??___fttol+1)& (0+255),w,b
  7646  00235A  0100               	movlb	0	; () banked
  7647  00235C  6F8E               	movwf	___fttol@sign1& (0+255),b
  7648                           
  7649                           ; BSR set to: 0
  7650  00235E  0100               	movlb	0	; () banked
  7651  002360  8F86               	bsf	(___fttol@f1+1)& (0+255),7,b
  7652                           
  7653                           ; BSR set to: 0
  7654  002362  0EFF               	movlw	255
  7655  002364  0100               	movlb	0	; () banked
  7656  002366  1785               	andwf	___fttol@f1& (0+255),f,b
  7657  002368  0EFF               	movlw	255
  7658  00236A  0100               	movlb	0	; () banked
  7659  00236C  1786               	andwf	(___fttol@f1+1)& (0+255),f,b
  7660  00236E  0E00               	movlw	0
  7661  002370  0100               	movlb	0	; () banked
  7662  002372  1787               	andwf	(___fttol@f1+2)& (0+255),f,b
  7663                           
  7664                           ; BSR set to: 0
  7665  002374  0100               	movlb	0	; () banked
  7666  002376  5185               	movf	___fttol@f1& (0+255),w,b
  7667  002378  0100               	movlb	0	; () banked
  7668  00237A  6F8F               	movwf	___fttol@lval& (0+255),b
  7669  00237C  0100               	movlb	0	; () banked
  7670  00237E  5186               	movf	(___fttol@f1+1)& (0+255),w,b
  7671  002380  0100               	movlb	0	; () banked
  7672  002382  6F90               	movwf	(___fttol@lval+1)& (0+255),b
  7673  002384  0100               	movlb	0	; () banked
  7674  002386  5187               	movf	(___fttol@f1+2)& (0+255),w,b
  7675  002388  0100               	movlb	0	; () banked
  7676  00238A  6F91               	movwf	(___fttol@lval+2)& (0+255),b
  7677  00238C  0100               	movlb	0	; () banked
  7678  00238E  6B92               	clrf	(___fttol@lval+3)& (0+255),b
  7679                           
  7680                           ; BSR set to: 0
  7681  002390  0E8E               	movlw	142
  7682  002392  0100               	movlb	0	; () banked
  7683  002394  5F93               	subwf	___fttol@exp1& (0+255),f,b
  7684                           
  7685                           ; BSR set to: 0
  7686  002396  0100               	movlb	0	; () banked
  7687  002398  AF93               	btfss	___fttol@exp1& (0+255),7,b
  7688  00239A  D01A               	goto	l658
  7689                           
  7690                           ; BSR set to: 0
  7691  00239C  0100               	movlb	0	; () banked
  7692  00239E  5193               	movf	___fttol@exp1& (0+255),w,b
  7693  0023A0  0A80               	xorlw	128
  7694  0023A2  0F8F               	addlw	143
  7695  0023A4  B0D8               	btfsc	status,0,c
  7696  0023A6  D00A               	goto	l659
  7697                           
  7698                           ; BSR set to: 0
  7699  0023A8  0E00               	movlw	0
  7700  0023AA  0100               	movlb	0	; () banked
  7701  0023AC  6F85               	movwf	?___fttol& (0+255),b
  7702  0023AE  0E00               	movlw	0
  7703  0023B0  6F86               	movwf	(?___fttol+1)& (0+255),b
  7704  0023B2  0E00               	movlw	0
  7705  0023B4  6F87               	movwf	(?___fttol+2)& (0+255),b
  7706  0023B6  0E00               	movlw	0
  7707  0023B8  6F88               	movwf	(?___fttol+3)& (0+255),b
  7708                           
  7709                           ; BSR set to: 0
  7710  0023BA  0012               	return	
  7711  0023BC                     l659:
  7712                           
  7713                           ; BSR set to: 0
  7714                           
  7715                           ; BSR set to: 0
  7716                           
  7717                           ; BSR set to: 0
  7718  0023BC  0100               	movlb	0	; () banked
  7719  0023BE  90D8               	bcf	status,0,c
  7720  0023C0  3392               	rrcf	(___fttol@lval+3)& (0+255),f,b
  7721  0023C2  3391               	rrcf	(___fttol@lval+2)& (0+255),f,b
  7722  0023C4  3390               	rrcf	(___fttol@lval+1)& (0+255),f,b
  7723  0023C6  338F               	rrcf	___fttol@lval& (0+255),f,b
  7724                           
  7725                           ; BSR set to: 0
  7726  0023C8  0100               	movlb	0	; () banked
  7727  0023CA  3F93               	incfsz	___fttol@exp1& (0+255),f,b
  7728  0023CC  D7F7               	goto	l659
  7729                           
  7730                           ; BSR set to: 0
  7731  0023CE  D01B               	goto	u2750
  7732  0023D0                     l658:
  7733                           
  7734                           ; BSR set to: 0
  7735                           
  7736                           ; BSR set to: 0
  7737  0023D0  0E17               	movlw	23
  7738  0023D2  0100               	movlb	0	; () banked
  7739  0023D4  6593               	cpfsgt	___fttol@exp1& (0+255),b
  7740  0023D6  D012               	goto	l664
  7741                           
  7742                           ; BSR set to: 0
  7743  0023D8  0E00               	movlw	0
  7744  0023DA  0100               	movlb	0	; () banked
  7745  0023DC  6F85               	movwf	?___fttol& (0+255),b
  7746  0023DE  0E00               	movlw	0
  7747  0023E0  6F86               	movwf	(?___fttol+1)& (0+255),b
  7748  0023E2  0E00               	movlw	0
  7749  0023E4  6F87               	movwf	(?___fttol+2)& (0+255),b
  7750  0023E6  0E00               	movlw	0
  7751  0023E8  6F88               	movwf	(?___fttol+3)& (0+255),b
  7752                           
  7753                           ; BSR set to: 0
  7754  0023EA  0012               	return	
  7755  0023EC                     
  7756                           ; BSR set to: 0
  7757                           
  7758                           ; BSR set to: 0
  7759  0023EC  0100               	movlb	0	; () banked
  7760  0023EE  90D8               	bcf	status,0,c
  7761  0023F0  378F               	rlcf	___fttol@lval& (0+255),f,b
  7762  0023F2  3790               	rlcf	(___fttol@lval+1)& (0+255),f,b
  7763  0023F4  3791               	rlcf	(___fttol@lval+2)& (0+255),f,b
  7764  0023F6  3792               	rlcf	(___fttol@lval+3)& (0+255),f,b
  7765  0023F8  0100               	movlb	0	; () banked
  7766  0023FA  0793               	decf	___fttol@exp1& (0+255),f,b
  7767  0023FC                     l664:
  7768                           
  7769                           ; BSR set to: 0
  7770                           
  7771                           ; BSR set to: 0
  7772  0023FC  0100               	movlb	0	; () banked
  7773  0023FE  5193               	movf	___fttol@exp1& (0+255),w,b
  7774  002400  0100               	movlb	0	; () banked
  7775  002402  A4D8               	btfss	status,2,c
  7776  002404  D7F3               	goto	l665
  7777  002406                     u2750:
  7778                           
  7779                           ; BSR set to: 0
  7780                           
  7781                           ; BSR set to: 0
  7782                           
  7783                           ; BSR set to: 0
  7784  002406  0100               	movlb	0	; () banked
  7785  002408  518E               	movf	___fttol@sign1& (0+255),w,b
  7786  00240A  0100               	movlb	0	; () banked
  7787  00240C  B4D8               	btfsc	status,2,c
  7788  00240E  D009               	goto	l667
  7789                           
  7790                           ; BSR set to: 0
  7791  002410  0100               	movlb	0	; () banked
  7792  002412  1F92               	comf	(___fttol@lval+3)& (0+255),f,b
  7793  002414  1F91               	comf	(___fttol@lval+2)& (0+255),f,b
  7794  002416  1F90               	comf	(___fttol@lval+1)& (0+255),f,b
  7795  002418  6D8F               	negf	___fttol@lval& (0+255),b
  7796  00241A  0E00               	movlw	0
  7797  00241C  2390               	addwfc	(___fttol@lval+1)& (0+255),f,b
  7798  00241E  2391               	addwfc	(___fttol@lval+2)& (0+255),f,b
  7799  002420  2392               	addwfc	(___fttol@lval+3)& (0+255),f,b
  7800  002422                     l667:
  7801                           
  7802                           ; BSR set to: 0
  7803                           
  7804                           ; BSR set to: 0
  7805  002422  C08F  F085         	movff	___fttol@lval,?___fttol
  7806  002426  C090  F086         	movff	___fttol@lval+1,?___fttol+1
  7807  00242A  C091  F087         	movff	___fttol@lval+2,?___fttol+2
  7808  00242E  C092  F088         	movff	___fttol@lval+3,?___fttol+3
  7809  002432  0012               	return	
  7810  002434                     __end_of___fttol:
  7811                           	opt stack 0
  7812                           tblptru	equ	0xFF8
  7813                           tblptrh	equ	0xFF7
  7814                           tblptrl	equ	0xFF6
  7815                           tablat	equ	0xFF5
  7816                           prodh	equ	0xFF4
  7817                           prodl	equ	0xFF3
  7818                           intcon	equ	0xFF2
  7819                           intcon2	equ	0xFF1
  7820                           indf0	equ	0xFEF
  7821                           postinc0	equ	0xFEE
  7822                           fsr0h	equ	0xFEA
  7823                           fsr0l	equ	0xFE9
  7824                           wreg	equ	0xFE8
  7825                           indf2	equ	0xFDF
  7826                           postinc2	equ	0xFDE
  7827                           postdec2	equ	0xFDD
  7828                           fsr2h	equ	0xFDA
  7829                           fsr2l	equ	0xFD9
  7830                           status	equ	0xFD8
  7831                           
  7832 ;; *************** function ___ftsub *****************
  7833 ;; Defined at:
  7834 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\ftsub.c"
  7835 ;; Parameters:    Size  Location     Type
  7836 ;;  f1              3    0[BANK0 ] float 
  7837 ;;  f2              3    3[BANK0 ] float 
  7838 ;; Auto vars:     Size  Location     Type
  7839 ;;		None
  7840 ;; Return value:  Size  Location     Type
  7841 ;;                  3    0[BANK0 ] float 
  7842 ;; Registers used:
  7843 ;;		wreg, status,2, status,0, cstack
  7844 ;; Tracked objects:
  7845 ;;		On entry : 0/0
  7846 ;;		On exit  : 0/0
  7847 ;;		Unchanged: 0/0
  7848 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7849 ;;      Params:         0       6       0       0       0       0       0
  7850 ;;      Locals:         0       0       0       0       0       0       0
  7851 ;;      Temps:          0       0       0       0       0       0       0
  7852 ;;      Totals:         0       6       0       0       0       0       0
  7853 ;;Total ram usage:        6 bytes
  7854 ;; Hardware stack levels used:    1
  7855 ;; Hardware stack levels required when called:    5
  7856 ;; This function calls:
  7857 ;;		___ftadd
  7858 ;; This function is called by:
  7859 ;;		_sprintf
  7860 ;; This function uses a non-reentrant model
  7861 ;;
  7862                           
  7863                           	psect	text27
  7864  002E30                     __ptext27:
  7865                           	opt stack 0
  7866  002E30                     ___ftsub:
  7867                           	opt stack 23
  7868                           
  7869                           ; BSR set to: 0
  7870                           ;incstack = 0
  7871  002E30  0100               	movlb	0	; () banked
  7872  002E32  5163               	movf	___ftsub@f2& (0+255),w,b
  7873  002E34  0100               	movlb	0	; () banked
  7874  002E36  1164               	iorwf	(___ftsub@f2+1)& (0+255),w,b
  7875  002E38  0100               	movlb	0	; () banked
  7876  002E3A  1165               	iorwf	(___ftsub@f2+2)& (0+255),w,b
  7877  002E3C  B4D8               	btfsc	status,2,c
  7878  002E3E  D009               	goto	l652
  7879                           
  7880                           ; BSR set to: 0
  7881  002E40  0E00               	movlw	0
  7882  002E42  0100               	movlb	0	; () banked
  7883  002E44  1B63               	xorwf	___ftsub@f2& (0+255),f,b
  7884  002E46  0E00               	movlw	0
  7885  002E48  0100               	movlb	0	; () banked
  7886  002E4A  1B64               	xorwf	(___ftsub@f2+1)& (0+255),f,b
  7887  002E4C  0E80               	movlw	128
  7888  002E4E  0100               	movlb	0	; () banked
  7889  002E50  1B65               	xorwf	(___ftsub@f2+2)& (0+255),f,b
  7890  002E52                     l652:
  7891                           
  7892                           ; BSR set to: 0
  7893                           
  7894                           ; BSR set to: 0
  7895  002E52  C060  F02B         	movff	___ftsub@f1,___ftadd@f1
  7896  002E56  C061  F02C         	movff	___ftsub@f1+1,___ftadd@f1+1
  7897  002E5A  C062  F02D         	movff	___ftsub@f1+2,___ftadd@f1+2
  7898  002E5E  C063  F02E         	movff	___ftsub@f2,___ftadd@f2
  7899  002E62  C064  F02F         	movff	___ftsub@f2+1,___ftadd@f2+1
  7900  002E66  C065  F030         	movff	___ftsub@f2+2,___ftadd@f2+2
  7901  002E6A  ECF6  F00C         	call	___ftadd	;wreg free
  7902  002E6E  C02B  F060         	movff	?___ftadd,?___ftsub
  7903  002E72  C02C  F061         	movff	?___ftadd+1,?___ftsub+1
  7904  002E76  C02D  F062         	movff	?___ftadd+2,?___ftsub+2
  7905  002E7A  0012               	return	
  7906  002E7C                     __end_of___ftsub:
  7907                           	opt stack 0
  7908                           tblptru	equ	0xFF8
  7909                           tblptrh	equ	0xFF7
  7910                           tblptrl	equ	0xFF6
  7911                           tablat	equ	0xFF5
  7912                           prodh	equ	0xFF4
  7913                           prodl	equ	0xFF3
  7914                           intcon	equ	0xFF2
  7915                           intcon2	equ	0xFF1
  7916                           indf0	equ	0xFEF
  7917                           postinc0	equ	0xFEE
  7918                           fsr0h	equ	0xFEA
  7919                           fsr0l	equ	0xFE9
  7920                           wreg	equ	0xFE8
  7921                           indf2	equ	0xFDF
  7922                           postinc2	equ	0xFDE
  7923                           postdec2	equ	0xFDD
  7924                           fsr2h	equ	0xFDA
  7925                           fsr2l	equ	0xFD9
  7926                           status	equ	0xFD8
  7927                           
  7928 ;; *************** function ___ftadd *****************
  7929 ;; Defined at:
  7930 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\ftadd.c"
  7931 ;; Parameters:    Size  Location     Type
  7932 ;;  f1              3   42[COMRAM] float 
  7933 ;;  f2              3   45[COMRAM] float 
  7934 ;; Auto vars:     Size  Location     Type
  7935 ;;  exp1            1   53[COMRAM] unsigned char 
  7936 ;;  exp2            1   52[COMRAM] unsigned char 
  7937 ;;  sign            1   51[COMRAM] unsigned char 
  7938 ;; Return value:  Size  Location     Type
  7939 ;;                  3   42[COMRAM] float 
  7940 ;; Registers used:
  7941 ;;		wreg, status,2, status,0, cstack
  7942 ;; Tracked objects:
  7943 ;;		On entry : 0/0
  7944 ;;		On exit  : 0/0
  7945 ;;		Unchanged: 0/0
  7946 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7947 ;;      Params:         6       0       0       0       0       0       0
  7948 ;;      Locals:         3       0       0       0       0       0       0
  7949 ;;      Temps:          3       0       0       0       0       0       0
  7950 ;;      Totals:        12       0       0       0       0       0       0
  7951 ;;Total ram usage:       12 bytes
  7952 ;; Hardware stack levels used:    1
  7953 ;; Hardware stack levels required when called:    4
  7954 ;; This function calls:
  7955 ;;		___ftpack
  7956 ;; This function is called by:
  7957 ;;		_temperatureMeasurementC
  7958 ;;		_temperatureMeasurementF
  7959 ;;		_carbonMeasurement
  7960 ;;		_salinityMeasurement
  7961 ;;		_sprintf
  7962 ;;		___ftsub
  7963 ;; This function uses a non-reentrant model
  7964 ;;
  7965                           
  7966                           	psect	text28
  7967  0019EC                     __ptext28:
  7968                           	opt stack 0
  7969  0019EC                     ___ftadd:
  7970                           	opt stack 23
  7971                           
  7972                           ;incstack = 0
  7973  0019EC  C02D  F031         	movff	___ftadd@f1+2,??___ftadd
  7974  0019F0  6A32               	clrf	(??___ftadd+1)& (0+255),c
  7975  0019F2  6A33               	clrf	(??___ftadd+2)& (0+255),c
  7976  0019F4  342C               	rlcf	___ftadd@f1+1,w,c
  7977  0019F6  3631               	rlcf	??___ftadd& (0+255),f,c
  7978  0019F8  E301               	bnc	u3811
  7979  0019FA  8032               	bsf	(??___ftadd+1)& (0+255),0,c
  7980  0019FC                     u3811:
  7981  0019FC  5031               	movf	??___ftadd,w,c
  7982  0019FE  6E36               	movwf	___ftadd@exp1,c
  7983  001A00  C030  F031         	movff	___ftadd@f2+2,??___ftadd
  7984  001A04  6A32               	clrf	(??___ftadd+1)& (0+255),c
  7985  001A06  6A33               	clrf	(??___ftadd+2)& (0+255),c
  7986  001A08  342F               	rlcf	___ftadd@f2+1,w,c
  7987  001A0A  3631               	rlcf	??___ftadd& (0+255),f,c
  7988  001A0C  E301               	bnc	u3821
  7989  001A0E  8032               	bsf	(??___ftadd+1)& (0+255),0,c
  7990  001A10                     u3821:
  7991  001A10  5031               	movf	??___ftadd,w,c
  7992  001A12  6E35               	movwf	___ftadd@exp2,c
  7993  001A14  5036               	movf	___ftadd@exp1,w,c
  7994  001A16  B4D8               	btfsc	status,2,c
  7995  001A18  D00B               	goto	u3850
  7996  001A1A  5035               	movf	___ftadd@exp2,w,c
  7997  001A1C  5C36               	subwf	___ftadd@exp1,w,c
  7998  001A1E  B0D8               	btfsc	status,0,c
  7999  001A20  D00E               	goto	l570
  8000  001A22  5036               	movf	___ftadd@exp1,w,c
  8001  001A24  0800               	sublw	0
  8002  001A26  2435               	addwf	___ftadd@exp2,w,c
  8003  001A28  6E31               	movwf	??___ftadd& (0+255),c
  8004  001A2A  0E18               	movlw	24
  8005  001A2C  6431               	cpfsgt	??___ftadd,c
  8006  001A2E  D007               	goto	l570
  8007  001A30                     u3850:
  8008  001A30  C02E  F02B         	movff	___ftadd@f2,?___ftadd
  8009  001A34  C02F  F02C         	movff	___ftadd@f2+1,?___ftadd+1
  8010  001A38  C030  F02D         	movff	___ftadd@f2+2,?___ftadd+2
  8011  001A3C  0012               	return	
  8012  001A3E                     l570:
  8013  001A3E  5035               	movf	___ftadd@exp2,w,c
  8014  001A40  B4D8               	btfsc	status,2,c
  8015  001A42  D00B               	goto	u3880
  8016  001A44  5036               	movf	___ftadd@exp1,w,c
  8017  001A46  5C35               	subwf	___ftadd@exp2,w,c
  8018  001A48  B0D8               	btfsc	status,0,c
  8019  001A4A  D00E               	goto	l574
  8020  001A4C  5035               	movf	___ftadd@exp2,w,c
  8021  001A4E  0800               	sublw	0
  8022  001A50  2436               	addwf	___ftadd@exp1,w,c
  8023  001A52  6E31               	movwf	??___ftadd& (0+255),c
  8024  001A54  0E18               	movlw	24
  8025  001A56  6431               	cpfsgt	??___ftadd,c
  8026  001A58  D007               	goto	l574
  8027  001A5A                     u3880:
  8028  001A5A  C02B  F02B         	movff	___ftadd@f1,?___ftadd
  8029  001A5E  C02C  F02C         	movff	___ftadd@f1+1,?___ftadd+1
  8030  001A62  C02D  F02D         	movff	___ftadd@f1+2,?___ftadd+2
  8031  001A66  0012               	return	
  8032  001A68                     l574:
  8033  001A68  0E06               	movlw	6
  8034  001A6A  6E34               	movwf	___ftadd@sign,c
  8035  001A6C  BE2D               	btfsc	___ftadd@f1+2,7,c
  8036  001A6E  8E34               	bsf	___ftadd@sign,7,c
  8037  001A70  BE30               	btfsc	___ftadd@f2+2,7,c
  8038  001A72  8C34               	bsf	___ftadd@sign,6,c
  8039  001A74  8E2C               	bsf	___ftadd@f1+1,7,c
  8040  001A76  0EFF               	movlw	255
  8041  001A78  162B               	andwf	___ftadd@f1,f,c
  8042  001A7A  0EFF               	movlw	255
  8043  001A7C  162C               	andwf	___ftadd@f1+1,f,c
  8044  001A7E  0E00               	movlw	0
  8045  001A80  162D               	andwf	___ftadd@f1+2,f,c
  8046  001A82  8E2F               	bsf	___ftadd@f2+1,7,c
  8047  001A84  0EFF               	movlw	255
  8048  001A86  162E               	andwf	___ftadd@f2,f,c
  8049  001A88  0EFF               	movlw	255
  8050  001A8A  162F               	andwf	___ftadd@f2+1,f,c
  8051  001A8C  0E00               	movlw	0
  8052  001A8E  1630               	andwf	___ftadd@f2+2,f,c
  8053  001A90  5035               	movf	___ftadd@exp2,w,c
  8054  001A92  5C36               	subwf	___ftadd@exp1,w,c
  8055  001A94  B0D8               	btfsc	status,0,c
  8056  001A96  D01B               	goto	l579
  8057  001A98                     u3910:
  8058  001A98  90D8               	bcf	status,0,c
  8059  001A9A  362E               	rlcf	___ftadd@f2,f,c
  8060  001A9C  362F               	rlcf	___ftadd@f2+1,f,c
  8061  001A9E  3630               	rlcf	___ftadd@f2+2,f,c
  8062  001AA0  0635               	decf	___ftadd@exp2,f,c
  8063  001AA2  5036               	movf	___ftadd@exp1,w,c
  8064  001AA4  1835               	xorwf	___ftadd@exp2,w,c
  8065  001AA6  B4D8               	btfsc	status,2,c
  8066  001AA8  D00D               	goto	l584
  8067  001AAA  0634               	decf	___ftadd@sign,f,c
  8068  001AAC  C034  F031         	movff	___ftadd@sign,??___ftadd
  8069  001AB0  0E07               	movlw	7
  8070  001AB2  1631               	andwf	??___ftadd,f,c
  8071  001AB4  B4D8               	btfsc	status,2,c
  8072  001AB6  D006               	goto	l584
  8073  001AB8  D7EF               	goto	u3910
  8074  001ABA  90D8               	bcf	status,0,c
  8075  001ABC  322D               	rrcf	___ftadd@f1+2,f,c
  8076  001ABE  322C               	rrcf	___ftadd@f1+1,f,c
  8077  001AC0  322B               	rrcf	___ftadd@f1,f,c
  8078  001AC2  2A36               	incf	___ftadd@exp1,f,c
  8079  001AC4                     l584:
  8080  001AC4  5035               	movf	___ftadd@exp2,w,c
  8081  001AC6  1836               	xorwf	___ftadd@exp1,w,c
  8082  001AC8  B4D8               	btfsc	status,2,c
  8083  001ACA  D01F               	goto	u3980
  8084  001ACC  D7F6               	goto	l585
  8085  001ACE                     l579:
  8086  001ACE  5036               	movf	___ftadd@exp1,w,c
  8087  001AD0  5C35               	subwf	___ftadd@exp2,w,c
  8088  001AD2  B0D8               	btfsc	status,0,c
  8089  001AD4  D01A               	goto	u3980
  8090  001AD6                     u3950:
  8091  001AD6  90D8               	bcf	status,0,c
  8092  001AD8  362B               	rlcf	___ftadd@f1,f,c
  8093  001ADA  362C               	rlcf	___ftadd@f1+1,f,c
  8094  001ADC  362D               	rlcf	___ftadd@f1+2,f,c
  8095  001ADE  0636               	decf	___ftadd@exp1,f,c
  8096  001AE0  5036               	movf	___ftadd@exp1,w,c
  8097  001AE2  1835               	xorwf	___ftadd@exp2,w,c
  8098  001AE4  B4D8               	btfsc	status,2,c
  8099  001AE6  D00D               	goto	l593
  8100  001AE8  0634               	decf	___ftadd@sign,f,c
  8101  001AEA  C034  F031         	movff	___ftadd@sign,??___ftadd
  8102  001AEE  0E07               	movlw	7
  8103  001AF0  1631               	andwf	??___ftadd,f,c
  8104  001AF2  B4D8               	btfsc	status,2,c
  8105  001AF4  D006               	goto	l593
  8106  001AF6  D7EF               	goto	u3950
  8107  001AF8  90D8               	bcf	status,0,c
  8108  001AFA  3230               	rrcf	___ftadd@f2+2,f,c
  8109  001AFC  322F               	rrcf	___ftadd@f2+1,f,c
  8110  001AFE  322E               	rrcf	___ftadd@f2,f,c
  8111  001B00  2A35               	incf	___ftadd@exp2,f,c
  8112  001B02                     l593:
  8113  001B02  5035               	movf	___ftadd@exp2,w,c
  8114  001B04  1836               	xorwf	___ftadd@exp1,w,c
  8115  001B06  A4D8               	btfss	status,2,c
  8116  001B08  D7F7               	goto	l594
  8117  001B0A                     u3980:
  8118  001B0A  AE34               	btfss	___ftadd@sign,7,c
  8119  001B0C  D00C               	goto	l596
  8120  001B0E  0EFF               	movlw	255
  8121  001B10  1A2B               	xorwf	___ftadd@f1,f,c
  8122  001B12  0EFF               	movlw	255
  8123  001B14  1A2C               	xorwf	___ftadd@f1+1,f,c
  8124  001B16  0EFF               	movlw	255
  8125  001B18  1A2D               	xorwf	___ftadd@f1+2,f,c
  8126  001B1A  0E01               	movlw	1
  8127  001B1C  262B               	addwf	___ftadd@f1,f,c
  8128  001B1E  0E00               	movlw	0
  8129  001B20  222C               	addwfc	___ftadd@f1+1,f,c
  8130  001B22  0E00               	movlw	0
  8131  001B24  222D               	addwfc	___ftadd@f1+2,f,c
  8132  001B26                     l596:
  8133  001B26  AC34               	btfss	___ftadd@sign,6,c
  8134  001B28  D00C               	goto	l597
  8135  001B2A  0EFF               	movlw	255
  8136  001B2C  1A2E               	xorwf	___ftadd@f2,f,c
  8137  001B2E  0EFF               	movlw	255
  8138  001B30  1A2F               	xorwf	___ftadd@f2+1,f,c
  8139  001B32  0EFF               	movlw	255
  8140  001B34  1A30               	xorwf	___ftadd@f2+2,f,c
  8141  001B36  0E01               	movlw	1
  8142  001B38  262E               	addwf	___ftadd@f2,f,c
  8143  001B3A  0E00               	movlw	0
  8144  001B3C  222F               	addwfc	___ftadd@f2+1,f,c
  8145  001B3E  0E00               	movlw	0
  8146  001B40  2230               	addwfc	___ftadd@f2+2,f,c
  8147  001B42                     l597:
  8148  001B42  0E00               	movlw	0
  8149  001B44  6E34               	movwf	___ftadd@sign,c
  8150  001B46  502B               	movf	___ftadd@f1,w,c
  8151  001B48  262E               	addwf	___ftadd@f2,f,c
  8152  001B4A  502C               	movf	___ftadd@f1+1,w,c
  8153  001B4C  222F               	addwfc	___ftadd@f2+1,f,c
  8154  001B4E  502D               	movf	___ftadd@f1+2,w,c
  8155  001B50  2230               	addwfc	___ftadd@f2+2,f,c
  8156  001B52  AE30               	btfss	___ftadd@f2+2,7,c
  8157  001B54  D00E               	goto	l598
  8158  001B56  0EFF               	movlw	255
  8159  001B58  1A2E               	xorwf	___ftadd@f2,f,c
  8160  001B5A  0EFF               	movlw	255
  8161  001B5C  1A2F               	xorwf	___ftadd@f2+1,f,c
  8162  001B5E  0EFF               	movlw	255
  8163  001B60  1A30               	xorwf	___ftadd@f2+2,f,c
  8164  001B62  0E01               	movlw	1
  8165  001B64  262E               	addwf	___ftadd@f2,f,c
  8166  001B66  0E00               	movlw	0
  8167  001B68  222F               	addwfc	___ftadd@f2+1,f,c
  8168  001B6A  0E00               	movlw	0
  8169  001B6C  2230               	addwfc	___ftadd@f2+2,f,c
  8170  001B6E  0E01               	movlw	1
  8171  001B70  6E34               	movwf	___ftadd@sign,c
  8172  001B72                     l598:
  8173  001B72  C02E  F017         	movff	___ftadd@f2,___ftpack@arg
  8174  001B76  C02F  F018         	movff	___ftadd@f2+1,___ftpack@arg+1
  8175  001B7A  C030  F019         	movff	___ftadd@f2+2,___ftpack@arg+2
  8176  001B7E  C036  F01A         	movff	___ftadd@exp1,___ftpack@exp
  8177  001B82  C034  F01B         	movff	___ftadd@sign,___ftpack@sign
  8178  001B86  EC74  F014         	call	___ftpack	;wreg free
  8179  001B8A  C017  F02B         	movff	?___ftpack,?___ftadd
  8180  001B8E  C018  F02C         	movff	?___ftpack+1,?___ftadd+1
  8181  001B92  C019  F02D         	movff	?___ftpack+2,?___ftadd+2
  8182  001B96  0012               	return	
  8183  001B98                     __end_of___ftadd:
  8184                           	opt stack 0
  8185                           tblptru	equ	0xFF8
  8186                           tblptrh	equ	0xFF7
  8187                           tblptrl	equ	0xFF6
  8188                           tablat	equ	0xFF5
  8189                           prodh	equ	0xFF4
  8190                           prodl	equ	0xFF3
  8191                           intcon	equ	0xFF2
  8192                           intcon2	equ	0xFF1
  8193                           indf0	equ	0xFEF
  8194                           postinc0	equ	0xFEE
  8195                           fsr0h	equ	0xFEA
  8196                           fsr0l	equ	0xFE9
  8197                           wreg	equ	0xFE8
  8198                           indf2	equ	0xFDF
  8199                           postinc2	equ	0xFDE
  8200                           postdec2	equ	0xFDD
  8201                           fsr2h	equ	0xFDA
  8202                           fsr2l	equ	0xFD9
  8203                           status	equ	0xFD8
  8204                           
  8205 ;; *************** function ___ftneg *****************
  8206 ;; Defined at:
  8207 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\ftneg.c"
  8208 ;; Parameters:    Size  Location     Type
  8209 ;;  f1              3   22[COMRAM] float 
  8210 ;; Auto vars:     Size  Location     Type
  8211 ;;		None
  8212 ;; Return value:  Size  Location     Type
  8213 ;;                  3   22[COMRAM] float 
  8214 ;; Registers used:
  8215 ;;		wreg, status,2, status,0
  8216 ;; Tracked objects:
  8217 ;;		On entry : 0/0
  8218 ;;		On exit  : 0/0
  8219 ;;		Unchanged: 0/0
  8220 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8221 ;;      Params:         3       0       0       0       0       0       0
  8222 ;;      Locals:         0       0       0       0       0       0       0
  8223 ;;      Temps:          0       0       0       0       0       0       0
  8224 ;;      Totals:         3       0       0       0       0       0       0
  8225 ;;Total ram usage:        3 bytes
  8226 ;; Hardware stack levels used:    1
  8227 ;; Hardware stack levels required when called:    3
  8228 ;; This function calls:
  8229 ;;		Nothing
  8230 ;; This function is called by:
  8231 ;;		_sprintf
  8232 ;; This function uses a non-reentrant model
  8233 ;;
  8234                           
  8235                           	psect	text29
  8236  002FAE                     __ptext29:
  8237                           	opt stack 0
  8238  002FAE                     ___ftneg:
  8239                           	opt stack 25
  8240                           
  8241                           ;incstack = 0
  8242  002FAE  5017               	movf	___ftneg@f1,w,c
  8243  002FB0  1018               	iorwf	___ftneg@f1+1,w,c
  8244  002FB2  1019               	iorwf	___ftneg@f1+2,w,c
  8245  002FB4  B4D8               	btfsc	status,2,c
  8246  002FB6  D006               	goto	l646
  8247  002FB8  0E00               	movlw	0
  8248  002FBA  1A17               	xorwf	___ftneg@f1,f,c
  8249  002FBC  0E00               	movlw	0
  8250  002FBE  1A18               	xorwf	___ftneg@f1+1,f,c
  8251  002FC0  0E80               	movlw	128
  8252  002FC2  1A19               	xorwf	___ftneg@f1+2,f,c
  8253  002FC4                     l646:
  8254  002FC4  C017  F017         	movff	___ftneg@f1,?___ftneg
  8255  002FC8  C018  F018         	movff	___ftneg@f1+1,?___ftneg+1
  8256  002FCC  C019  F019         	movff	___ftneg@f1+2,?___ftneg+2
  8257  002FD0  0012               	return		;funcret
  8258  002FD2                     __end_of___ftneg:
  8259                           	opt stack 0
  8260                           tblptru	equ	0xFF8
  8261                           tblptrh	equ	0xFF7
  8262                           tblptrl	equ	0xFF6
  8263                           tablat	equ	0xFF5
  8264                           prodh	equ	0xFF4
  8265                           prodl	equ	0xFF3
  8266                           intcon	equ	0xFF2
  8267                           intcon2	equ	0xFF1
  8268                           indf0	equ	0xFEF
  8269                           postinc0	equ	0xFEE
  8270                           fsr0h	equ	0xFEA
  8271                           fsr0l	equ	0xFE9
  8272                           wreg	equ	0xFE8
  8273                           indf2	equ	0xFDF
  8274                           postinc2	equ	0xFDE
  8275                           postdec2	equ	0xFDD
  8276                           fsr2h	equ	0xFDA
  8277                           fsr2l	equ	0xFD9
  8278                           status	equ	0xFD8
  8279                           
  8280 ;; *************** function ___ftge *****************
  8281 ;; Defined at:
  8282 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\ftge.c"
  8283 ;; Parameters:    Size  Location     Type
  8284 ;;  ff1             3   22[COMRAM] float 
  8285 ;;  ff2             3   25[COMRAM] float 
  8286 ;; Auto vars:     Size  Location     Type
  8287 ;;		None
  8288 ;; Return value:  Size  Location     Type
  8289 ;;		None               void
  8290 ;; Registers used:
  8291 ;;		wreg, status,2, status,0
  8292 ;; Tracked objects:
  8293 ;;		On entry : 0/0
  8294 ;;		On exit  : 0/0
  8295 ;;		Unchanged: 0/0
  8296 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8297 ;;      Params:         6       0       0       0       0       0       0
  8298 ;;      Locals:         0       0       0       0       0       0       0
  8299 ;;      Temps:          3       0       0       0       0       0       0
  8300 ;;      Totals:         9       0       0       0       0       0       0
  8301 ;;Total ram usage:        9 bytes
  8302 ;; Hardware stack levels used:    1
  8303 ;; Hardware stack levels required when called:    3
  8304 ;; This function calls:
  8305 ;;		Nothing
  8306 ;; This function is called by:
  8307 ;;		_sprintf
  8308 ;; This function uses a non-reentrant model
  8309 ;;
  8310                           
  8311                           	psect	text30
  8312  002996                     __ptext30:
  8313                           	opt stack 0
  8314  002996                     ___ftge:
  8315                           	opt stack 25
  8316                           
  8317                           ;incstack = 0
  8318  002996  AE19               	btfss	___ftge@ff1+2,7,c
  8319  002998  D016               	goto	l628
  8320  00299A  C017  F01D         	movff	___ftge@ff1,??___ftge
  8321  00299E  C018  F01E         	movff	___ftge@ff1+1,??___ftge+1
  8322  0029A2  C019  F01F         	movff	___ftge@ff1+2,??___ftge+2
  8323  0029A6  1E1D               	comf	??___ftge,f,c
  8324  0029A8  1E1E               	comf	??___ftge+1,f,c
  8325  0029AA  1E1F               	comf	??___ftge+2,f,c
  8326  0029AC  2A1D               	incf	??___ftge,f,c
  8327  0029AE  0E00               	movlw	0
  8328  0029B0  221E               	addwfc	??___ftge+1,f,c
  8329  0029B2  221F               	addwfc	??___ftge+2,f,c
  8330  0029B4  0E00               	movlw	0
  8331  0029B6  241D               	addwf	??___ftge,w,c
  8332  0029B8  6E17               	movwf	___ftge@ff1,c
  8333  0029BA  0E00               	movlw	0
  8334  0029BC  201E               	addwfc	??___ftge+1,w,c
  8335  0029BE  6E18               	movwf	___ftge@ff1+1,c
  8336  0029C0  0E80               	movlw	128
  8337  0029C2  201F               	addwfc	??___ftge+2,w,c
  8338  0029C4  6E19               	movwf	___ftge@ff1+2,c
  8339  0029C6                     l628:
  8340  0029C6  AE1C               	btfss	___ftge@ff2+2,7,c
  8341  0029C8  D016               	goto	l629
  8342  0029CA  C01A  F01D         	movff	___ftge@ff2,??___ftge
  8343  0029CE  C01B  F01E         	movff	___ftge@ff2+1,??___ftge+1
  8344  0029D2  C01C  F01F         	movff	___ftge@ff2+2,??___ftge+2
  8345  0029D6  1E1D               	comf	??___ftge,f,c
  8346  0029D8  1E1E               	comf	??___ftge+1,f,c
  8347  0029DA  1E1F               	comf	??___ftge+2,f,c
  8348  0029DC  2A1D               	incf	??___ftge,f,c
  8349  0029DE  0E00               	movlw	0
  8350  0029E0  221E               	addwfc	??___ftge+1,f,c
  8351  0029E2  221F               	addwfc	??___ftge+2,f,c
  8352  0029E4  0E00               	movlw	0
  8353  0029E6  241D               	addwf	??___ftge,w,c
  8354  0029E8  6E1A               	movwf	___ftge@ff2,c
  8355  0029EA  0E00               	movlw	0
  8356  0029EC  201E               	addwfc	??___ftge+1,w,c
  8357  0029EE  6E1B               	movwf	___ftge@ff2+1,c
  8358  0029F0  0E80               	movlw	128
  8359  0029F2  201F               	addwfc	??___ftge+2,w,c
  8360  0029F4  6E1C               	movwf	___ftge@ff2+2,c
  8361  0029F6                     l629:
  8362  0029F6  0E00               	movlw	0
  8363  0029F8  1A17               	xorwf	___ftge@ff1,f,c
  8364  0029FA  0E00               	movlw	0
  8365  0029FC  1A18               	xorwf	___ftge@ff1+1,f,c
  8366  0029FE  0E80               	movlw	128
  8367  002A00  1A19               	xorwf	___ftge@ff1+2,f,c
  8368  002A02  0E00               	movlw	0
  8369  002A04  1A1A               	xorwf	___ftge@ff2,f,c
  8370  002A06  0E00               	movlw	0
  8371  002A08  1A1B               	xorwf	___ftge@ff2+1,f,c
  8372  002A0A  0E80               	movlw	128
  8373  002A0C  1A1C               	xorwf	___ftge@ff2+2,f,c
  8374  002A0E  501A               	movf	___ftge@ff2,w,c
  8375  002A10  5C17               	subwf	___ftge@ff1,w,c
  8376  002A12  501B               	movf	___ftge@ff2+1,w,c
  8377  002A14  5818               	subwfb	___ftge@ff1+1,w,c
  8378  002A16  501C               	movf	___ftge@ff2+2,w,c
  8379  002A18  5819               	subwfb	___ftge@ff1+2,w,c
  8380  002A1A  B0D8               	btfsc	status,0,c
  8381  002A1C  D002               	goto	l2230
  8382  002A1E  90D8               	bcf	status,0,c
  8383  002A20  0012               	return	
  8384  002A22                     l2230:
  8385  002A22  80D8               	bsf	status,0,c
  8386  002A24  0012               	return	
  8387  002A26                     __end_of___ftge:
  8388                           	opt stack 0
  8389                           tblptru	equ	0xFF8
  8390                           tblptrh	equ	0xFF7
  8391                           tblptrl	equ	0xFF6
  8392                           tablat	equ	0xFF5
  8393                           prodh	equ	0xFF4
  8394                           prodl	equ	0xFF3
  8395                           intcon	equ	0xFF2
  8396                           intcon2	equ	0xFF1
  8397                           indf0	equ	0xFEF
  8398                           postinc0	equ	0xFEE
  8399                           fsr0h	equ	0xFEA
  8400                           fsr0l	equ	0xFE9
  8401                           wreg	equ	0xFE8
  8402                           indf2	equ	0xFDF
  8403                           postinc2	equ	0xFDE
  8404                           postdec2	equ	0xFDD
  8405                           fsr2h	equ	0xFDA
  8406                           fsr2l	equ	0xFD9
  8407                           status	equ	0xFD8
  8408                           
  8409 ;; *************** function ___ftdiv *****************
  8410 ;; Defined at:
  8411 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\ftdiv.c"
  8412 ;; Parameters:    Size  Location     Type
  8413 ;;  f1              3    0[BANK0 ] float 
  8414 ;;  f2              3    3[BANK0 ] float 
  8415 ;; Auto vars:     Size  Location     Type
  8416 ;;  f3              3   10[BANK0 ] float 
  8417 ;;  sign            1   14[BANK0 ] unsigned char 
  8418 ;;  exp             1   13[BANK0 ] unsigned char 
  8419 ;;  cntr            1    9[BANK0 ] unsigned char 
  8420 ;; Return value:  Size  Location     Type
  8421 ;;                  3    0[BANK0 ] float 
  8422 ;; Registers used:
  8423 ;;		wreg, status,2, status,0, cstack
  8424 ;; Tracked objects:
  8425 ;;		On entry : 0/0
  8426 ;;		On exit  : 0/0
  8427 ;;		Unchanged: 0/0
  8428 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8429 ;;      Params:         0       6       0       0       0       0       0
  8430 ;;      Locals:         0       6       0       0       0       0       0
  8431 ;;      Temps:          0       3       0       0       0       0       0
  8432 ;;      Totals:         0      15       0       0       0       0       0
  8433 ;;Total ram usage:       15 bytes
  8434 ;; Hardware stack levels used:    1
  8435 ;; Hardware stack levels required when called:    4
  8436 ;; This function calls:
  8437 ;;		___ftpack
  8438 ;; This function is called by:
  8439 ;;		_temperatureMeasurementC
  8440 ;;		_temperatureMeasurementF
  8441 ;;		_carbonMeasurement
  8442 ;;		_salinityMeasurement
  8443 ;; This function uses a non-reentrant model
  8444 ;;
  8445                           
  8446                           	psect	text31
  8447  0021A4                     __ptext31:
  8448                           	opt stack 0
  8449  0021A4                     ___ftdiv:
  8450                           	opt stack 25
  8451                           
  8452                           ;incstack = 0
  8453  0021A4  C062  F066         	movff	___ftdiv@f1+2,??___ftdiv
  8454  0021A8  0100               	movlb	0	; () banked
  8455  0021AA  6B67               	clrf	(??___ftdiv+1)& (0+255),b
  8456  0021AC  6B68               	clrf	(??___ftdiv+2)& (0+255),b
  8457  0021AE  0100               	movlb	0	; () banked
  8458  0021B0  3561               	rlcf	(___ftdiv@f1+1)& (0+255),w,b
  8459  0021B2  0100               	movlb	0	; () banked
  8460  0021B4  3766               	rlcf	??___ftdiv& (0+255),f,b
  8461  0021B6  E301               	bnc	u4741
  8462  0021B8  8167               	bsf	(??___ftdiv+1)& (0+255),0,b
  8463  0021BA                     u4741:
  8464  0021BA  0100               	movlb	0	; () banked
  8465  0021BC  5166               	movf	??___ftdiv& (0+255),w,b
  8466  0021BE  0100               	movlb	0	; () banked
  8467  0021C0  6F6D               	movwf	___ftdiv@exp& (0+255),b
  8468  0021C2  0100               	movlb	0	; () banked
  8469  0021C4  516D               	movf	___ftdiv@exp& (0+255),w,b
  8470  0021C6  A4D8               	btfss	status,2,c
  8471  0021C8  D00A               	goto	l603
  8472                           
  8473                           ; BSR set to: 0
  8474  0021CA  0E00               	movlw	0
  8475  0021CC  0100               	movlb	0	; () banked
  8476  0021CE  6F60               	movwf	?___ftdiv& (0+255),b
  8477  0021D0  0E00               	movlw	0
  8478  0021D2  0100               	movlb	0	; () banked
  8479  0021D4  6F61               	movwf	(?___ftdiv+1)& (0+255),b
  8480  0021D6  0E00               	movlw	0
  8481  0021D8  0100               	movlb	0	; () banked
  8482  0021DA  6F62               	movwf	(?___ftdiv+2)& (0+255),b
  8483                           
  8484                           ; BSR set to: 0
  8485  0021DC  0012               	return	
  8486  0021DE                     l603:
  8487                           
  8488                           ; BSR set to: 0
  8489                           
  8490                           ; BSR set to: 0
  8491  0021DE  C065  F066         	movff	___ftdiv@f2+2,??___ftdiv
  8492  0021E2  0100               	movlb	0	; () banked
  8493  0021E4  6B67               	clrf	(??___ftdiv+1)& (0+255),b
  8494  0021E6  6B68               	clrf	(??___ftdiv+2)& (0+255),b
  8495  0021E8  0100               	movlb	0	; () banked
  8496  0021EA  3564               	rlcf	(___ftdiv@f2+1)& (0+255),w,b
  8497  0021EC  0100               	movlb	0	; () banked
  8498  0021EE  3766               	rlcf	??___ftdiv& (0+255),f,b
  8499  0021F0  E301               	bnc	u4761
  8500  0021F2  8167               	bsf	(??___ftdiv+1)& (0+255),0,b
  8501  0021F4                     u4761:
  8502  0021F4  0100               	movlb	0	; () banked
  8503  0021F6  5166               	movf	??___ftdiv& (0+255),w,b
  8504  0021F8  0100               	movlb	0	; () banked
  8505  0021FA  6F6E               	movwf	___ftdiv@sign& (0+255),b
  8506  0021FC  0100               	movlb	0	; () banked
  8507  0021FE  516E               	movf	___ftdiv@sign& (0+255),w,b
  8508  002200  A4D8               	btfss	status,2,c
  8509  002202  D00A               	goto	l605
  8510                           
  8511                           ; BSR set to: 0
  8512  002204  0E00               	movlw	0
  8513  002206  0100               	movlb	0	; () banked
  8514  002208  6F60               	movwf	?___ftdiv& (0+255),b
  8515  00220A  0E00               	movlw	0
  8516  00220C  0100               	movlb	0	; () banked
  8517  00220E  6F61               	movwf	(?___ftdiv+1)& (0+255),b
  8518  002210  0E00               	movlw	0
  8519  002212  0100               	movlb	0	; () banked
  8520  002214  6F62               	movwf	(?___ftdiv+2)& (0+255),b
  8521                           
  8522                           ; BSR set to: 0
  8523  002216  0012               	return	
  8524  002218                     l605:
  8525                           
  8526                           ; BSR set to: 0
  8527                           
  8528                           ; BSR set to: 0
  8529  002218  0E00               	movlw	0
  8530  00221A  0100               	movlb	0	; () banked
  8531  00221C  6F6A               	movwf	___ftdiv@f3& (0+255),b
  8532  00221E  0E00               	movlw	0
  8533  002220  0100               	movlb	0	; () banked
  8534  002222  6F6B               	movwf	(___ftdiv@f3+1)& (0+255),b
  8535  002224  0E00               	movlw	0
  8536  002226  0100               	movlb	0	; () banked
  8537  002228  6F6C               	movwf	(___ftdiv@f3+2)& (0+255),b
  8538                           
  8539                           ; BSR set to: 0
  8540  00222A  0100               	movlb	0	; () banked
  8541  00222C  516E               	movf	___ftdiv@sign& (0+255),w,b
  8542  00222E  0F89               	addlw	137
  8543  002230  0100               	movlb	0	; () banked
  8544  002232  5F6D               	subwf	___ftdiv@exp& (0+255),f,b
  8545                           
  8546                           ; BSR set to: 0
  8547  002234  C062  F06E         	movff	___ftdiv@f1+2,___ftdiv@sign
  8548                           
  8549                           ; BSR set to: 0
  8550  002238  0100               	movlb	0	; () banked
  8551  00223A  5165               	movf	(___ftdiv@f2+2)& (0+255),w,b
  8552  00223C  0100               	movlb	0	; () banked
  8553  00223E  1B6E               	xorwf	___ftdiv@sign& (0+255),f,b
  8554                           
  8555                           ; BSR set to: 0
  8556  002240  0E80               	movlw	128
  8557  002242  0100               	movlb	0	; () banked
  8558  002244  176E               	andwf	___ftdiv@sign& (0+255),f,b
  8559                           
  8560                           ; BSR set to: 0
  8561  002246  0100               	movlb	0	; () banked
  8562  002248  8F61               	bsf	(___ftdiv@f1+1)& (0+255),7,b
  8563                           
  8564                           ; BSR set to: 0
  8565  00224A  0EFF               	movlw	255
  8566  00224C  0100               	movlb	0	; () banked
  8567  00224E  1760               	andwf	___ftdiv@f1& (0+255),f,b
  8568  002250  0EFF               	movlw	255
  8569  002252  0100               	movlb	0	; () banked
  8570  002254  1761               	andwf	(___ftdiv@f1+1)& (0+255),f,b
  8571  002256  0E00               	movlw	0
  8572  002258  0100               	movlb	0	; () banked
  8573  00225A  1762               	andwf	(___ftdiv@f1+2)& (0+255),f,b
  8574                           
  8575                           ; BSR set to: 0
  8576  00225C  0100               	movlb	0	; () banked
  8577  00225E  8F64               	bsf	(___ftdiv@f2+1)& (0+255),7,b
  8578                           
  8579                           ; BSR set to: 0
  8580  002260  0EFF               	movlw	255
  8581  002262  0100               	movlb	0	; () banked
  8582  002264  1763               	andwf	___ftdiv@f2& (0+255),f,b
  8583  002266  0EFF               	movlw	255
  8584  002268  0100               	movlb	0	; () banked
  8585  00226A  1764               	andwf	(___ftdiv@f2+1)& (0+255),f,b
  8586  00226C  0E00               	movlw	0
  8587  00226E  0100               	movlb	0	; () banked
  8588  002270  1765               	andwf	(___ftdiv@f2+2)& (0+255),f,b
  8589                           
  8590                           ; BSR set to: 0
  8591  002272  0E18               	movlw	24
  8592  002274  0100               	movlb	0	; () banked
  8593  002276  6F69               	movwf	___ftdiv@cntr& (0+255),b
  8594  002278                     
  8595                           ; BSR set to: 0
  8596                           
  8597                           ; BSR set to: 0
  8598  002278  0100               	movlb	0	; () banked
  8599  00227A  90D8               	bcf	status,0,c
  8600  00227C  376A               	rlcf	___ftdiv@f3& (0+255),f,b
  8601  00227E  376B               	rlcf	(___ftdiv@f3+1)& (0+255),f,b
  8602  002280  376C               	rlcf	(___ftdiv@f3+2)& (0+255),f,b
  8603                           
  8604                           ; BSR set to: 0
  8605  002282  0100               	movlb	0	; () banked
  8606  002284  5163               	movf	___ftdiv@f2& (0+255),w,b
  8607  002286  0100               	movlb	0	; () banked
  8608  002288  5D60               	subwf	___ftdiv@f1& (0+255),w,b
  8609  00228A  0100               	movlb	0	; () banked
  8610  00228C  5164               	movf	(___ftdiv@f2+1)& (0+255),w,b
  8611  00228E  0100               	movlb	0	; () banked
  8612  002290  5961               	subwfb	(___ftdiv@f1+1)& (0+255),w,b
  8613  002292  0100               	movlb	0	; () banked
  8614  002294  5165               	movf	(___ftdiv@f2+2)& (0+255),w,b
  8615  002296  0100               	movlb	0	; () banked
  8616  002298  5962               	subwfb	(___ftdiv@f1+2)& (0+255),w,b
  8617  00229A  A0D8               	btfss	status,0,c
  8618  00229C  D00E               	goto	l607
  8619                           
  8620                           ; BSR set to: 0
  8621  00229E  0100               	movlb	0	; () banked
  8622  0022A0  5163               	movf	___ftdiv@f2& (0+255),w,b
  8623  0022A2  0100               	movlb	0	; () banked
  8624  0022A4  5F60               	subwf	___ftdiv@f1& (0+255),f,b
  8625  0022A6  0100               	movlb	0	; () banked
  8626  0022A8  5164               	movf	(___ftdiv@f2+1)& (0+255),w,b
  8627  0022AA  0100               	movlb	0	; () banked
  8628  0022AC  5B61               	subwfb	(___ftdiv@f1+1)& (0+255),f,b
  8629  0022AE  0100               	movlb	0	; () banked
  8630  0022B0  5165               	movf	(___ftdiv@f2+2)& (0+255),w,b
  8631  0022B2  0100               	movlb	0	; () banked
  8632  0022B4  5B62               	subwfb	(___ftdiv@f1+2)& (0+255),f,b
  8633                           
  8634                           ; BSR set to: 0
  8635  0022B6  0100               	movlb	0	; () banked
  8636  0022B8  816A               	bsf	___ftdiv@f3& (0+255),0,b
  8637  0022BA                     l607:
  8638                           
  8639                           ; BSR set to: 0
  8640  0022BA  0100               	movlb	0	; () banked
  8641  0022BC  90D8               	bcf	status,0,c
  8642  0022BE  3760               	rlcf	___ftdiv@f1& (0+255),f,b
  8643  0022C0  3761               	rlcf	(___ftdiv@f1+1)& (0+255),f,b
  8644  0022C2  3762               	rlcf	(___ftdiv@f1+2)& (0+255),f,b
  8645                           
  8646                           ; BSR set to: 0
  8647  0022C4  0100               	movlb	0	; () banked
  8648  0022C6  2F69               	decfsz	___ftdiv@cntr& (0+255),f,b
  8649  0022C8  D7D7               	goto	l606
  8650                           
  8651                           ; BSR set to: 0
  8652                           
  8653                           ; BSR set to: 0
  8654  0022CA  C06A  F017         	movff	___ftdiv@f3,___ftpack@arg
  8655  0022CE  C06B  F018         	movff	___ftdiv@f3+1,___ftpack@arg+1
  8656  0022D2  C06C  F019         	movff	___ftdiv@f3+2,___ftpack@arg+2
  8657  0022D6  C06D  F01A         	movff	___ftdiv@exp,___ftpack@exp
  8658  0022DA  C06E  F01B         	movff	___ftdiv@sign,___ftpack@sign
  8659  0022DE  EC74  F014         	call	___ftpack	;wreg free
  8660  0022E2  C017  F060         	movff	?___ftpack,?___ftdiv
  8661  0022E6  C018  F061         	movff	?___ftpack+1,?___ftdiv+1
  8662  0022EA  C019  F062         	movff	?___ftpack+2,?___ftdiv+2
  8663  0022EE  0012               	return	
  8664  0022F0                     __end_of___ftdiv:
  8665                           	opt stack 0
  8666                           tblptru	equ	0xFF8
  8667                           tblptrh	equ	0xFF7
  8668                           tblptrl	equ	0xFF6
  8669                           tablat	equ	0xFF5
  8670                           prodh	equ	0xFF4
  8671                           prodl	equ	0xFF3
  8672                           intcon	equ	0xFF2
  8673                           intcon2	equ	0xFF1
  8674                           indf0	equ	0xFEF
  8675                           postinc0	equ	0xFEE
  8676                           fsr0h	equ	0xFEA
  8677                           fsr0l	equ	0xFE9
  8678                           wreg	equ	0xFE8
  8679                           indf2	equ	0xFDF
  8680                           postinc2	equ	0xFDE
  8681                           postdec2	equ	0xFDD
  8682                           fsr2h	equ	0xFDA
  8683                           fsr2l	equ	0xFD9
  8684                           status	equ	0xFD8
  8685                           
  8686 ;; *************** function ___awtoft *****************
  8687 ;; Defined at:
  8688 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\awtoft.c"
  8689 ;; Parameters:    Size  Location     Type
  8690 ;;  c               2   30[COMRAM] int 
  8691 ;; Auto vars:     Size  Location     Type
  8692 ;;  sign            1   33[COMRAM] unsigned char 
  8693 ;; Return value:  Size  Location     Type
  8694 ;;                  3   30[COMRAM] float 
  8695 ;; Registers used:
  8696 ;;		wreg, status,2, status,0, cstack
  8697 ;; Tracked objects:
  8698 ;;		On entry : 0/0
  8699 ;;		On exit  : 0/0
  8700 ;;		Unchanged: 0/0
  8701 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8702 ;;      Params:         3       0       0       0       0       0       0
  8703 ;;      Locals:         1       0       0       0       0       0       0
  8704 ;;      Temps:          0       0       0       0       0       0       0
  8705 ;;      Totals:         4       0       0       0       0       0       0
  8706 ;;Total ram usage:        4 bytes
  8707 ;; Hardware stack levels used:    1
  8708 ;; Hardware stack levels required when called:    4
  8709 ;; This function calls:
  8710 ;;		___ftpack
  8711 ;; This function is called by:
  8712 ;;		_temperatureMeasurementC
  8713 ;;		_temperatureMeasurementF
  8714 ;;		_carbonMeasurement
  8715 ;;		_salinityMeasurement
  8716 ;; This function uses a non-reentrant model
  8717 ;;
  8718                           
  8719                           	psect	text32
  8720  002EEE                     __ptext32:
  8721                           	opt stack 0
  8722  002EEE                     ___awtoft:
  8723                           	opt stack 25
  8724                           
  8725                           ;incstack = 0
  8726  002EEE  0E00               	movlw	0
  8727  002EF0  6E22               	movwf	___awtoft@sign,c
  8728  002EF2  AE20               	btfss	___awtoft@c+1,7,c
  8729  002EF4  D006               	goto	l503
  8730  002EF6  6C1F               	negf	___awtoft@c,c
  8731  002EF8  1E20               	comf	___awtoft@c+1,f,c
  8732  002EFA  B0D8               	btfsc	status,0,c
  8733  002EFC  2A20               	incf	___awtoft@c+1,f,c
  8734  002EFE  0E01               	movlw	1
  8735  002F00  6E22               	movwf	___awtoft@sign,c
  8736  002F02                     l503:
  8737  002F02  C01F  F017         	movff	___awtoft@c,___ftpack@arg
  8738  002F06  C020  F018         	movff	___awtoft@c+1,___ftpack@arg+1
  8739  002F0A  6A19               	clrf	___ftpack@arg+2,c
  8740  002F0C  0E8E               	movlw	142
  8741  002F0E  6E1A               	movwf	___ftpack@exp,c
  8742  002F10  C022  F01B         	movff	___awtoft@sign,___ftpack@sign
  8743  002F14  EC74  F014         	call	___ftpack	;wreg free
  8744  002F18  C017  F01F         	movff	?___ftpack,?___awtoft
  8745  002F1C  C018  F020         	movff	?___ftpack+1,?___awtoft+1
  8746  002F20  C019  F021         	movff	?___ftpack+2,?___awtoft+2
  8747  002F24  0012               	return	
  8748  002F26                     __end_of___awtoft:
  8749                           	opt stack 0
  8750                           tblptru	equ	0xFF8
  8751                           tblptrh	equ	0xFF7
  8752                           tblptrl	equ	0xFF6
  8753                           tablat	equ	0xFF5
  8754                           prodh	equ	0xFF4
  8755                           prodl	equ	0xFF3
  8756                           intcon	equ	0xFF2
  8757                           intcon2	equ	0xFF1
  8758                           indf0	equ	0xFEF
  8759                           postinc0	equ	0xFEE
  8760                           fsr0h	equ	0xFEA
  8761                           fsr0l	equ	0xFE9
  8762                           wreg	equ	0xFE8
  8763                           indf2	equ	0xFDF
  8764                           postinc2	equ	0xFDE
  8765                           postdec2	equ	0xFDD
  8766                           fsr2h	equ	0xFDA
  8767                           fsr2l	equ	0xFD9
  8768                           status	equ	0xFD8
  8769                           
  8770 ;; *************** function ___ftpack *****************
  8771 ;; Defined at:
  8772 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\float.c"
  8773 ;; Parameters:    Size  Location     Type
  8774 ;;  arg             3   22[COMRAM] unsigned um
  8775 ;;  exp             1   25[COMRAM] unsigned char 
  8776 ;;  sign            1   26[COMRAM] unsigned char 
  8777 ;; Auto vars:     Size  Location     Type
  8778 ;;		None
  8779 ;; Return value:  Size  Location     Type
  8780 ;;                  3   22[COMRAM] float 
  8781 ;; Registers used:
  8782 ;;		wreg, status,2, status,0
  8783 ;; Tracked objects:
  8784 ;;		On entry : 0/0
  8785 ;;		On exit  : 0/0
  8786 ;;		Unchanged: 0/0
  8787 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8788 ;;      Params:         5       0       0       0       0       0       0
  8789 ;;      Locals:         0       0       0       0       0       0       0
  8790 ;;      Temps:          3       0       0       0       0       0       0
  8791 ;;      Totals:         8       0       0       0       0       0       0
  8792 ;;Total ram usage:        8 bytes
  8793 ;; Hardware stack levels used:    1
  8794 ;; Hardware stack levels required when called:    3
  8795 ;; This function calls:
  8796 ;;		Nothing
  8797 ;; This function is called by:
  8798 ;;		___awtoft
  8799 ;;		___ftadd
  8800 ;;		___ftdiv
  8801 ;;		___ftmul
  8802 ;;		___lltoft
  8803 ;; This function uses a non-reentrant model
  8804 ;;
  8805                           
  8806                           	psect	text33
  8807  0028E8                     __ptext33:
  8808                           	opt stack 0
  8809  0028E8                     ___ftpack:
  8810                           	opt stack 23
  8811                           
  8812                           ;incstack = 0
  8813  0028E8  501A               	movf	___ftpack@exp,w,c
  8814  0028EA  B4D8               	btfsc	status,2,c
  8815  0028EC  D005               	goto	u3740
  8816  0028EE  5017               	movf	___ftpack@arg,w,c
  8817  0028F0  1018               	iorwf	___ftpack@arg+1,w,c
  8818  0028F2  1019               	iorwf	___ftpack@arg+2,w,c
  8819  0028F4  A4D8               	btfss	status,2,c
  8820  0028F6  D00C               	goto	l539
  8821  0028F8                     u3740:
  8822  0028F8  0E00               	movlw	0
  8823  0028FA  6E17               	movwf	?___ftpack,c
  8824  0028FC  0E00               	movlw	0
  8825  0028FE  6E18               	movwf	?___ftpack+1,c
  8826  002900  0E00               	movlw	0
  8827  002902  6E19               	movwf	?___ftpack+2,c
  8828  002904  0012               	return	
  8829  002906  2A1A               	incf	___ftpack@exp,f,c
  8830  002908  90D8               	bcf	status,0,c
  8831  00290A  3219               	rrcf	___ftpack@arg+2,f,c
  8832  00290C  3218               	rrcf	___ftpack@arg+1,f,c
  8833  00290E  3217               	rrcf	___ftpack@arg,f,c
  8834  002910                     l539:
  8835  002910  0E00               	movlw	0
  8836  002912  1417               	andwf	___ftpack@arg,w,c
  8837  002914  6E1C               	movwf	??___ftpack& (0+255),c
  8838  002916  0E00               	movlw	0
  8839  002918  1418               	andwf	___ftpack@arg+1,w,c
  8840  00291A  6E1D               	movwf	(??___ftpack+1)& (0+255),c
  8841  00291C  0EFE               	movlw	254
  8842  00291E  1419               	andwf	___ftpack@arg+2,w,c
  8843  002920  6E1E               	movwf	(??___ftpack+2)& (0+255),c
  8844  002922  501C               	movf	??___ftpack,w,c
  8845  002924  101D               	iorwf	??___ftpack+1,w,c
  8846  002926  101E               	iorwf	??___ftpack+2,w,c
  8847  002928  B4D8               	btfsc	status,2,c
  8848  00292A  D00C               	goto	l542
  8849  00292C  D7EC               	goto	l540
  8850  00292E  2A1A               	incf	___ftpack@exp,f,c
  8851  002930  0E01               	movlw	1
  8852  002932  2617               	addwf	___ftpack@arg,f,c
  8853  002934  0E00               	movlw	0
  8854  002936  2218               	addwfc	___ftpack@arg+1,f,c
  8855  002938  0E00               	movlw	0
  8856  00293A  2219               	addwfc	___ftpack@arg+2,f,c
  8857  00293C  90D8               	bcf	status,0,c
  8858  00293E  3219               	rrcf	___ftpack@arg+2,f,c
  8859  002940  3218               	rrcf	___ftpack@arg+1,f,c
  8860  002942  3217               	rrcf	___ftpack@arg,f,c
  8861  002944                     l542:
  8862  002944  0E00               	movlw	0
  8863  002946  1417               	andwf	___ftpack@arg,w,c
  8864  002948  6E1C               	movwf	??___ftpack& (0+255),c
  8865  00294A  0E00               	movlw	0
  8866  00294C  1418               	andwf	___ftpack@arg+1,w,c
  8867  00294E  6E1D               	movwf	(??___ftpack+1)& (0+255),c
  8868  002950  0EFF               	movlw	255
  8869  002952  1419               	andwf	___ftpack@arg+2,w,c
  8870  002954  6E1E               	movwf	(??___ftpack+2)& (0+255),c
  8871  002956  501C               	movf	??___ftpack,w,c
  8872  002958  101D               	iorwf	??___ftpack+1,w,c
  8873  00295A  101E               	iorwf	??___ftpack+2,w,c
  8874  00295C  B4D8               	btfsc	status,2,c
  8875  00295E  D006               	goto	l545
  8876  002960  D7E6               	goto	l543
  8877  002962  061A               	decf	___ftpack@exp,f,c
  8878  002964  90D8               	bcf	status,0,c
  8879  002966  3617               	rlcf	___ftpack@arg,f,c
  8880  002968  3618               	rlcf	___ftpack@arg+1,f,c
  8881  00296A  3619               	rlcf	___ftpack@arg+2,f,c
  8882  00296C                     l545:
  8883  00296C  BE18               	btfsc	___ftpack@arg+1,7,c
  8884  00296E  D003               	goto	u3780
  8885  002970  0E02               	movlw	2
  8886  002972  601A               	cpfslt	___ftpack@exp,c
  8887  002974  D7F6               	goto	l546
  8888  002976                     u3780:
  8889  002976  A01A               	btfss	___ftpack@exp,0,c
  8890  002978  9E18               	bcf	___ftpack@arg+1,7,c
  8891  00297A  90D8               	bcf	status,0,c
  8892  00297C  321A               	rrcf	___ftpack@exp,f,c
  8893  00297E  501A               	movf	___ftpack@exp,w,c
  8894  002980  1219               	iorwf	___ftpack@arg+2,f,c
  8895  002982  501B               	movf	___ftpack@sign,w,c
  8896  002984  A4D8               	btfss	status,2,c
  8897  002986  8E19               	bsf	___ftpack@arg+2,7,c
  8898  002988  C017  F017         	movff	___ftpack@arg,?___ftpack
  8899  00298C  C018  F018         	movff	___ftpack@arg+1,?___ftpack+1
  8900  002990  C019  F019         	movff	___ftpack@arg+2,?___ftpack+2
  8901  002994  0012               	return	
  8902  002996                     __end_of___ftpack:
  8903                           	opt stack 0
  8904                           tblptru	equ	0xFF8
  8905                           tblptrh	equ	0xFF7
  8906                           tblptrl	equ	0xFF6
  8907                           tablat	equ	0xFF5
  8908                           prodh	equ	0xFF4
  8909                           prodl	equ	0xFF3
  8910                           intcon	equ	0xFF2
  8911                           intcon2	equ	0xFF1
  8912                           indf0	equ	0xFEF
  8913                           postinc0	equ	0xFEE
  8914                           fsr0h	equ	0xFEA
  8915                           fsr0l	equ	0xFE9
  8916                           wreg	equ	0xFE8
  8917                           indf2	equ	0xFDF
  8918                           postinc2	equ	0xFDE
  8919                           postdec2	equ	0xFDD
  8920                           fsr2h	equ	0xFDA
  8921                           fsr2l	equ	0xFD9
  8922                           status	equ	0xFD8
  8923                           
  8924 ;; *************** function _isr *****************
  8925 ;; Defined at:
  8926 ;;		line 224 in file "temp.c"
  8927 ;; Parameters:    Size  Location     Type
  8928 ;;		None
  8929 ;; Auto vars:     Size  Location     Type
  8930 ;;		None
  8931 ;; Return value:  Size  Location     Type
  8932 ;;                  1    wreg      void 
  8933 ;; Registers used:
  8934 ;;		wreg, status,2, status,0, cstack
  8935 ;; Tracked objects:
  8936 ;;		On entry : 0/0
  8937 ;;		On exit  : 0/0
  8938 ;;		Unchanged: 0/0
  8939 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8940 ;;      Params:         0       0       0       0       0       0       0
  8941 ;;      Locals:         0       0       0       0       0       0       0
  8942 ;;      Temps:         18       0       0       0       0       0       0
  8943 ;;      Totals:        18       0       0       0       0       0       0
  8944 ;;Total ram usage:       18 bytes
  8945 ;; Hardware stack levels used:    1
  8946 ;; Hardware stack levels required when called:    2
  8947 ;; This function calls:
  8948 ;;		_read_2bytes
  8949 ;;		_write_slave
  8950 ;; This function is called by:
  8951 ;;		Interrupt level 2
  8952 ;; This function uses a non-reentrant model
  8953 ;;
  8954                           
  8955                           	psect	intcode
  8956  000008                     __pintcode:
  8957                           	opt stack 0
  8958  000008                     _isr:
  8959                           	opt stack 23
  8960                           
  8961                           ;incstack = 0
  8962  000008  8247               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  8963  00000A  CFFA F005          	movff	pclath,??_isr
  8964  00000E  CFFB F006          	movff	pclatu,??_isr+1
  8965  000012  CFE9 F007          	movff	fsr0l,??_isr+2
  8966  000016  CFEA F008          	movff	fsr0h,??_isr+3
  8967  00001A  CFE1 F009          	movff	fsr1l,??_isr+4
  8968  00001E  CFE2 F00A          	movff	fsr1h,??_isr+5
  8969  000022  CFD9 F00B          	movff	fsr2l,??_isr+6
  8970  000026  CFDA F00C          	movff	fsr2h,??_isr+7
  8971  00002A  CFF3 F00D          	movff	prodl,??_isr+8
  8972  00002E  CFF4 F00E          	movff	prodh,??_isr+9
  8973  000032  CFF6 F00F          	movff	tblptrl,??_isr+10
  8974  000036  CFF7 F010          	movff	tblptrh,??_isr+11
  8975  00003A  CFF8 F011          	movff	tblptru,??_isr+12
  8976  00003E  CFF5 F012          	movff	tablat,??_isr+13
  8977  000042  C047  F013         	movff	btemp,??_isr+14
  8978  000046  C048  F014         	movff	btemp+1,??_isr+15
  8979  00004A  C049  F015         	movff	btemp+2,??_isr+16
  8980  00004E  C04A  F016         	movff	btemp+3,??_isr+17
  8981                           
  8982                           ;temp.c: 225: if(INTCONbits.INT0IF){
  8983  000052  A2F2               	btfss	intcon,1,c	;volatile
  8984  000054  D00D               	goto	i2l140
  8985                           
  8986                           ;temp.c: 226: INTCONbits.INT0IF=0;
  8987  000056  92F2               	bcf	intcon,1,c	;volatile
  8988                           
  8989                           ;temp.c: 227: count++;
  8990  000058  4A43               	infsnz	_count,f,c
  8991  00005A  2A44               	incf	_count+1,f,c
  8992                           
  8993                           ;temp.c: 228: if(count>=5){
  8994  00005C  5044               	movf	_count+1,w,c
  8995  00005E  E104               	bnz	i2u359_40
  8996  000060  0E05               	movlw	5
  8997  000062  5C43               	subwf	_count,w,c
  8998  000064  A0D8               	btfss	status,0,c
  8999  000066  D004               	goto	i2l140
  9000  000068                     i2u359_40:
  9001                           
  9002                           ;temp.c: 229: count=0;
  9003  000068  0E00               	movlw	0
  9004  00006A  6E44               	movwf	_count+1,c
  9005  00006C  0E00               	movlw	0
  9006  00006E  6E43               	movwf	_count,c
  9007  000070                     i2l140:
  9008                           
  9009                           ;temp.c: 230: }
  9010                           ;temp.c: 231: }
  9011                           ;temp.c: 233: if(PIR1bits.SSPIF==1){
  9012  000070  A69E               	btfss	3998,3,c	;volatile
  9013  000072  D045               	goto	i2l154
  9014                           
  9015                           ;temp.c: 234: SSP1CON1bits.CKP=0;
  9016  000074  98C6               	bcf	4038,4,c	;volatile
  9017                           
  9018                           ;temp.c: 235: if((SSP1CON1bits.WCOL==1) || (SSP1CON1bits.SSPOV==1)){
  9019  000076  BEC6               	btfsc	4038,7,c	;volatile
  9020  000078  D002               	goto	i2u362_40
  9021  00007A  ACC6               	btfss	4038,6,c	;volatile
  9022  00007C  D006               	goto	i2l142
  9023  00007E                     i2u362_40:
  9024                           
  9025                           ;temp.c: 236: n=SSP1BUF;
  9026  00007E  CFC9 F03F          	movff	4041,_n	;volatile
  9027  000082  6A40               	clrf	_n+1,c
  9028                           
  9029                           ;temp.c: 237: SSP1CON1bits.WCOL=0;
  9030  000084  9EC6               	bcf	4038,7,c	;volatile
  9031                           
  9032                           ;temp.c: 238: SSP1CON1bits.SSPOV=0;
  9033  000086  9CC6               	bcf	4038,6,c	;volatile
  9034                           
  9035                           ;temp.c: 239: SSP1CON1bits.CKP=0;
  9036  000088  98C6               	bcf	4038,4,c	;volatile
  9037  00008A                     i2l142:
  9038                           
  9039                           ;temp.c: 240: }
  9040                           ;temp.c: 241: if(!SSP1STATbits.READ_WRITE){
  9041  00008A  B4C7               	btfsc	4039,2,c	;volatile
  9042  00008C  D007               	goto	i2l145
  9043                           
  9044                           ;temp.c: 242: CMD=write_slave();
  9045  00008E  EC09  F018         	call	_write_slave	;wreg free
  9046  000092  C001  F041         	movff	?_write_slave,_CMD
  9047  000096  C002  F042         	movff	?_write_slave+1,_CMD+1
  9048                           
  9049                           ;temp.c: 243: } else if (SSP1STATbits.READ_WRITE==1){
  9050  00009A  D031               	goto	i2l154
  9051  00009C                     i2l145:
  9052  00009C  A4C7               	btfss	4039,2,c	;volatile
  9053  00009E  D02F               	goto	i2l154
  9054                           
  9055                           ;temp.c: 244: if(CMD == 2)
  9056  0000A0  0E02               	movlw	2
  9057  0000A2  1841               	xorwf	_CMD,w,c
  9058  0000A4  1042               	iorwf	_CMD+1,w,c
  9059  0000A6  A4D8               	btfss	status,2,c
  9060  0000A8  D007               	goto	i2l148
  9061                           
  9062                           ;temp.c: 245: {
  9063                           ;temp.c: 246: read_2bytes(temperC_F);
  9064  0000AA  C03D  F003         	movff	_temperC_F,read_2bytes@data
  9065  0000AE  C03E  F004         	movff	_temperC_F+1,read_2bytes@data+1
  9066  0000B2  EC3E  F017         	call	_read_2bytes	;wreg free
  9067                           
  9068                           ;temp.c: 247: }
  9069  0000B6  D023               	goto	i2l154
  9070  0000B8                     i2l148:
  9071                           
  9072                           ;temp.c: 248: else if(CMD == 3)
  9073  0000B8  0E03               	movlw	3
  9074  0000BA  1841               	xorwf	_CMD,w,c
  9075  0000BC  1042               	iorwf	_CMD+1,w,c
  9076  0000BE  A4D8               	btfss	status,2,c
  9077  0000C0  D007               	goto	i2l150
  9078                           
  9079                           ;temp.c: 249: {
  9080                           ;temp.c: 250: read_2bytes(temperC_F);
  9081  0000C2  C03D  F003         	movff	_temperC_F,read_2bytes@data
  9082  0000C6  C03E  F004         	movff	_temperC_F+1,read_2bytes@data+1
  9083  0000CA  EC3E  F017         	call	_read_2bytes	;wreg free
  9084                           
  9085                           ;temp.c: 251: }
  9086  0000CE  D017               	goto	i2l154
  9087  0000D0                     i2l150:
  9088                           
  9089                           ;temp.c: 252: else if(CMD == 4)
  9090  0000D0  0E04               	movlw	4
  9091  0000D2  1841               	xorwf	_CMD,w,c
  9092  0000D4  1042               	iorwf	_CMD+1,w,c
  9093  0000D6  A4D8               	btfss	status,2,c
  9094  0000D8  D007               	goto	i2l152
  9095                           
  9096                           ;temp.c: 253: {
  9097                           ;temp.c: 254: read_2bytes(carbon);
  9098  0000DA  C03B  F003         	movff	_carbon,read_2bytes@data
  9099  0000DE  C03C  F004         	movff	_carbon+1,read_2bytes@data+1
  9100  0000E2  EC3E  F017         	call	_read_2bytes	;wreg free
  9101                           
  9102                           ;temp.c: 255: }
  9103  0000E6  D00B               	goto	i2l154
  9104  0000E8                     i2l152:
  9105                           
  9106                           ;temp.c: 256: else if(CMD == 5)
  9107  0000E8  0E05               	movlw	5
  9108  0000EA  1841               	xorwf	_CMD,w,c
  9109  0000EC  1042               	iorwf	_CMD+1,w,c
  9110  0000EE  A4D8               	btfss	status,2,c
  9111  0000F0  D006               	goto	i2l154
  9112                           
  9113                           ;temp.c: 257: {
  9114                           ;temp.c: 258: read_2bytes(salinity);
  9115  0000F2  C039  F003         	movff	_salinity,read_2bytes@data
  9116  0000F6  C03A  F004         	movff	_salinity+1,read_2bytes@data+1
  9117  0000FA  EC3E  F017         	call	_read_2bytes	;wreg free
  9118  0000FE                     i2l154:
  9119                           
  9120                           ;temp.c: 259: }
  9121                           ;temp.c: 261: }
  9122                           ;temp.c: 262: }
  9123                           ;temp.c: 267: PIR1bits.SSPIF=0;
  9124  0000FE  969E               	bcf	3998,3,c	;volatile
  9125  000100  C016  F04A         	movff	??_isr+17,btemp+3
  9126  000104  C015  F049         	movff	??_isr+16,btemp+2
  9127  000108  C014  F048         	movff	??_isr+15,btemp+1
  9128  00010C  C013  F047         	movff	??_isr+14,btemp
  9129  000110  C012  FFF5         	movff	??_isr+13,tablat
  9130  000114  C011  FFF8         	movff	??_isr+12,tblptru
  9131  000118  C010  FFF7         	movff	??_isr+11,tblptrh
  9132  00011C  C00F  FFF6         	movff	??_isr+10,tblptrl
  9133  000120  C00E  FFF4         	movff	??_isr+9,prodh
  9134  000124  C00D  FFF3         	movff	??_isr+8,prodl
  9135  000128  C00C  FFDA         	movff	??_isr+7,fsr2h
  9136  00012C  C00B  FFD9         	movff	??_isr+6,fsr2l
  9137  000130  C00A  FFE2         	movff	??_isr+5,fsr1h
  9138  000134  C009  FFE1         	movff	??_isr+4,fsr1l
  9139  000138  C008  FFEA         	movff	??_isr+3,fsr0h
  9140  00013C  C007  FFE9         	movff	??_isr+2,fsr0l
  9141  000140  C006  FFFB         	movff	??_isr+1,pclatu
  9142  000144  C005  FFFA         	movff	??_isr,pclath
  9143  000148  9247               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  9144  00014A  0011               	retfie		f
  9145  00014C                     __end_of_isr:
  9146                           	opt stack 0
  9147                           pclatu	equ	0xFFB
  9148                           pclath	equ	0xFFA
  9149                           tblptru	equ	0xFF8
  9150                           tblptrh	equ	0xFF7
  9151                           tblptrl	equ	0xFF6
  9152                           tablat	equ	0xFF5
  9153                           prodh	equ	0xFF4
  9154                           prodl	equ	0xFF3
  9155                           intcon	equ	0xFF2
  9156                           intcon2	equ	0xFF1
  9157                           indf0	equ	0xFEF
  9158                           postinc0	equ	0xFEE
  9159                           fsr0h	equ	0xFEA
  9160                           fsr0l	equ	0xFE9
  9161                           wreg	equ	0xFE8
  9162                           fsr1h	equ	0xFE2
  9163                           fsr1l	equ	0xFE1
  9164                           indf2	equ	0xFDF
  9165                           postinc2	equ	0xFDE
  9166                           postdec2	equ	0xFDD
  9167                           fsr2h	equ	0xFDA
  9168                           fsr2l	equ	0xFD9
  9169                           status	equ	0xFD8
  9170                           
  9171 ;; *************** function _write_slave *****************
  9172 ;; Defined at:
  9173 ;;		line 194 in file "temp.c"
  9174 ;; Parameters:    Size  Location     Type
  9175 ;;		None
  9176 ;; Auto vars:     Size  Location     Type
  9177 ;;  temp            2    2[COMRAM] unsigned int 
  9178 ;; Return value:  Size  Location     Type
  9179 ;;                  2    0[COMRAM] unsigned int 
  9180 ;; Registers used:
  9181 ;;		None
  9182 ;; Tracked objects:
  9183 ;;		On entry : 0/0
  9184 ;;		On exit  : 0/0
  9185 ;;		Unchanged: 0/0
  9186 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9187 ;;      Params:         2       0       0       0       0       0       0
  9188 ;;      Locals:         2       0       0       0       0       0       0
  9189 ;;      Temps:          0       0       0       0       0       0       0
  9190 ;;      Totals:         4       0       0       0       0       0       0
  9191 ;;Total ram usage:        4 bytes
  9192 ;; Hardware stack levels used:    1
  9193 ;; This function calls:
  9194 ;;		Nothing
  9195 ;; This function is called by:
  9196 ;;		_isr
  9197 ;; This function uses a non-reentrant model
  9198 ;;
  9199                           
  9200                           	psect	text35
  9201  003012                     __ptext35:
  9202                           	opt stack 0
  9203  003012                     _write_slave:
  9204                           	opt stack 24
  9205                           
  9206                           ;temp.c: 195: unsigned int temp;
  9207                           ;temp.c: 196: n=SSP1BUF;
  9208                           
  9209                           ;incstack = 0
  9210  003012  CFC9 F03F          	movff	4041,_n	;volatile
  9211  003016  6A40               	clrf	_n+1,c
  9212                           
  9213                           ;temp.c: 198: SSP1CON1bits.CKP=1;
  9214  003018  88C6               	bsf	4038,4,c	;volatile
  9215  00301A  A0C7               	btfss	4039,0,c	;volatile
  9216  00301C  D7FE               	goto	i2l120
  9217                           
  9218                           ;temp.c: 201: temp=SSP1BUF;
  9219  00301E  CFC9 F003          	movff	4041,write_slave@temp	;volatile
  9220  003022  6A04               	clrf	write_slave@temp+1,c
  9221                           
  9222                           ;temp.c: 202: SSP1CON1bits.CKP=1;
  9223  003024  88C6               	bsf	4038,4,c	;volatile
  9224                           
  9225                           ;temp.c: 203: return temp;
  9226  003026  C003  F001         	movff	write_slave@temp,?_write_slave
  9227  00302A  C004  F002         	movff	write_slave@temp+1,?_write_slave+1
  9228  00302E  0012               	return		;funcret
  9229  003030                     __end_of_write_slave:
  9230                           	opt stack 0
  9231                           pclatu	equ	0xFFB
  9232                           pclath	equ	0xFFA
  9233                           tblptru	equ	0xFF8
  9234                           tblptrh	equ	0xFF7
  9235                           tblptrl	equ	0xFF6
  9236                           tablat	equ	0xFF5
  9237                           prodh	equ	0xFF4
  9238                           prodl	equ	0xFF3
  9239                           intcon	equ	0xFF2
  9240                           intcon2	equ	0xFF1
  9241                           indf0	equ	0xFEF
  9242                           postinc0	equ	0xFEE
  9243                           fsr0h	equ	0xFEA
  9244                           fsr0l	equ	0xFE9
  9245                           wreg	equ	0xFE8
  9246                           fsr1h	equ	0xFE2
  9247                           fsr1l	equ	0xFE1
  9248                           indf2	equ	0xFDF
  9249                           postinc2	equ	0xFDE
  9250                           postdec2	equ	0xFDD
  9251                           fsr2h	equ	0xFDA
  9252                           fsr2l	equ	0xFD9
  9253                           status	equ	0xFD8
  9254                           
  9255 ;; *************** function _read_2bytes *****************
  9256 ;; Defined at:
  9257 ;;		line 215 in file "temp.c"
  9258 ;; Parameters:    Size  Location     Type
  9259 ;;  data            2    2[COMRAM] unsigned int 
  9260 ;; Auto vars:     Size  Location     Type
  9261 ;;		None
  9262 ;; Return value:  Size  Location     Type
  9263 ;;                  1    wreg      void 
  9264 ;; Registers used:
  9265 ;;		wreg, status,2, status,0, cstack
  9266 ;; Tracked objects:
  9267 ;;		On entry : 0/0
  9268 ;;		On exit  : 0/0
  9269 ;;		Unchanged: 0/0
  9270 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9271 ;;      Params:         2       0       0       0       0       0       0
  9272 ;;      Locals:         0       0       0       0       0       0       0
  9273 ;;      Temps:          0       0       0       0       0       0       0
  9274 ;;      Totals:         2       0       0       0       0       0       0
  9275 ;;Total ram usage:        2 bytes
  9276 ;; Hardware stack levels used:    1
  9277 ;; Hardware stack levels required when called:    1
  9278 ;; This function calls:
  9279 ;;		_read_slave
  9280 ;; This function is called by:
  9281 ;;		_isr
  9282 ;; This function uses a non-reentrant model
  9283 ;;
  9284                           
  9285                           	psect	text36
  9286  002E7C                     __ptext36:
  9287                           	opt stack 0
  9288  002E7C                     _read_2bytes:
  9289                           	opt stack 23
  9290                           
  9291                           ;temp.c: 216: if(index==0){
  9292                           
  9293                           ;incstack = 0
  9294  002E7C  5037               	movf	_index,w,c
  9295  002E7E  1038               	iorwf	_index+1,w,c
  9296  002E80  A4D8               	btfss	status,2,c
  9297  002E82  D00B               	goto	i2l131
  9298                           
  9299                           ;temp.c: 217: read_slave(data);
  9300  002E84  C003  F001         	movff	read_2bytes@data,read_slave@byte1
  9301  002E88  C004  F002         	movff	read_2bytes@data+1,read_slave@byte1+1
  9302  002E8C  EC18  F018         	call	_read_slave	;wreg free
  9303                           
  9304                           ;temp.c: 218: index=1;
  9305  002E90  0E00               	movlw	0
  9306  002E92  6E38               	movwf	_index+1,c
  9307  002E94  0E01               	movlw	1
  9308  002E96  6E37               	movwf	_index,c
  9309                           
  9310                           ;temp.c: 219: }else if (index==1){
  9311  002E98  0012               	return	
  9312  002E9A                     i2l131:
  9313  002E9A  0437               	decf	_index,w,c
  9314  002E9C  1038               	iorwf	_index+1,w,c
  9315  002E9E  A4D8               	btfss	status,2,c
  9316  002EA0  0012               	return	
  9317                           
  9318                           ;temp.c: 220: read_slave(data>>8);
  9319  002EA2  5004               	movf	read_2bytes@data+1,w,c
  9320  002EA4  6E01               	movwf	read_slave@byte1,c
  9321  002EA6  6A02               	clrf	read_slave@byte1+1,c
  9322  002EA8  EC18  F018         	call	_read_slave	;wreg free
  9323                           
  9324                           ;temp.c: 221: index=0;
  9325  002EAC  0E00               	movlw	0
  9326  002EAE  6E38               	movwf	_index+1,c
  9327  002EB0  0E00               	movlw	0
  9328  002EB2  6E37               	movwf	_index,c
  9329  002EB4  0012               	return	
  9330  002EB6                     __end_of_read_2bytes:
  9331                           	opt stack 0
  9332                           pclatu	equ	0xFFB
  9333                           pclath	equ	0xFFA
  9334                           tblptru	equ	0xFF8
  9335                           tblptrh	equ	0xFF7
  9336                           tblptrl	equ	0xFF6
  9337                           tablat	equ	0xFF5
  9338                           prodh	equ	0xFF4
  9339                           prodl	equ	0xFF3
  9340                           intcon	equ	0xFF2
  9341                           intcon2	equ	0xFF1
  9342                           indf0	equ	0xFEF
  9343                           postinc0	equ	0xFEE
  9344                           fsr0h	equ	0xFEA
  9345                           fsr0l	equ	0xFE9
  9346                           wreg	equ	0xFE8
  9347                           fsr1h	equ	0xFE2
  9348                           fsr1l	equ	0xFE1
  9349                           indf2	equ	0xFDF
  9350                           postinc2	equ	0xFDE
  9351                           postdec2	equ	0xFDD
  9352                           fsr2h	equ	0xFDA
  9353                           fsr2l	equ	0xFD9
  9354                           status	equ	0xFD8
  9355                           
  9356 ;; *************** function _read_slave *****************
  9357 ;; Defined at:
  9358 ;;		line 206 in file "temp.c"
  9359 ;; Parameters:    Size  Location     Type
  9360 ;;  byte1           2    0[COMRAM] unsigned int 
  9361 ;; Auto vars:     Size  Location     Type
  9362 ;;		None
  9363 ;; Return value:  Size  Location     Type
  9364 ;;                  1    wreg      void 
  9365 ;; Registers used:
  9366 ;;		None
  9367 ;; Tracked objects:
  9368 ;;		On entry : 0/0
  9369 ;;		On exit  : 0/0
  9370 ;;		Unchanged: 0/0
  9371 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9372 ;;      Params:         2       0       0       0       0       0       0
  9373 ;;      Locals:         0       0       0       0       0       0       0
  9374 ;;      Temps:          0       0       0       0       0       0       0
  9375 ;;      Totals:         2       0       0       0       0       0       0
  9376 ;;Total ram usage:        2 bytes
  9377 ;; Hardware stack levels used:    1
  9378 ;; This function calls:
  9379 ;;		Nothing
  9380 ;; This function is called by:
  9381 ;;		_read_2bytes
  9382 ;; This function uses a non-reentrant model
  9383 ;;
  9384                           
  9385                           	psect	text37
  9386  003030                     __ptext37:
  9387                           	opt stack 0
  9388  003030                     _read_slave:
  9389                           	opt stack 23
  9390                           
  9391                           ;temp.c: 207: SSP1CON1bits.CKP=0;
  9392                           
  9393                           ;incstack = 0
  9394  003030  98C6               	bcf	4038,4,c	;volatile
  9395                           
  9396                           ;temp.c: 208: n=SSP1BUF;
  9397  003032  CFC9 F03F          	movff	4041,_n	;volatile
  9398  003036  6A40               	clrf	_n+1,c
  9399                           
  9400                           ;temp.c: 209: PIR1bits.SSPIF=0;
  9401  003038  969E               	bcf	3998,3,c	;volatile
  9402                           
  9403                           ;temp.c: 210: SSP1BUF=byte1;
  9404  00303A  C001  FFC9         	movff	read_slave@byte1,4041	;volatile
  9405                           
  9406                           ;temp.c: 211: SSP1CON1bits.CKP=1;
  9407  00303E  88C6               	bsf	4038,4,c	;volatile
  9408  003040  A0C7               	btfss	4039,0,c	;volatile
  9409  003042  0012               	return	
  9410  003044  D7FD               	goto	i2l126
  9411  003046                     __end_of_read_slave:
  9412                           	opt stack 0
  9413                           pclatu	equ	0xFFB
  9414                           pclath	equ	0xFFA
  9415                           tblptru	equ	0xFF8
  9416                           tblptrh	equ	0xFF7
  9417                           tblptrl	equ	0xFF6
  9418                           tablat	equ	0xFF5
  9419                           prodh	equ	0xFF4
  9420                           prodl	equ	0xFF3
  9421                           intcon	equ	0xFF2
  9422                           intcon2	equ	0xFF1
  9423                           indf0	equ	0xFEF
  9424                           postinc0	equ	0xFEE
  9425                           fsr0h	equ	0xFEA
  9426                           fsr0l	equ	0xFE9
  9427                           wreg	equ	0xFE8
  9428                           fsr1h	equ	0xFE2
  9429                           fsr1l	equ	0xFE1
  9430                           indf2	equ	0xFDF
  9431                           postinc2	equ	0xFDE
  9432                           postdec2	equ	0xFDD
  9433                           fsr2h	equ	0xFDA
  9434                           fsr2l	equ	0xFD9
  9435                           status	equ	0xFD8
  9436                           pclatu	equ	0xFFB
  9437                           pclath	equ	0xFFA
  9438                           tblptru	equ	0xFF8
  9439                           tblptrh	equ	0xFF7
  9440                           tblptrl	equ	0xFF6
  9441                           tablat	equ	0xFF5
  9442                           prodh	equ	0xFF4
  9443                           prodl	equ	0xFF3
  9444                           intcon	equ	0xFF2
  9445                           intcon2	equ	0xFF1
  9446                           indf0	equ	0xFEF
  9447                           postinc0	equ	0xFEE
  9448                           fsr0h	equ	0xFEA
  9449                           fsr0l	equ	0xFE9
  9450                           wreg	equ	0xFE8
  9451                           fsr1h	equ	0xFE2
  9452                           fsr1l	equ	0xFE1
  9453                           indf2	equ	0xFDF
  9454                           postinc2	equ	0xFDE
  9455                           postdec2	equ	0xFDD
  9456                           fsr2h	equ	0xFDA
  9457                           fsr2l	equ	0xFD9
  9458                           status	equ	0xFD8
  9459                           
  9460                           	psect	rparam
  9461  0000                     pclatu	equ	0xFFB
  9462                           pclath	equ	0xFFA
  9463                           tblptru	equ	0xFF8
  9464                           tblptrh	equ	0xFF7
  9465                           tblptrl	equ	0xFF6
  9466                           tablat	equ	0xFF5
  9467                           prodh	equ	0xFF4
  9468                           prodl	equ	0xFF3
  9469                           intcon	equ	0xFF2
  9470                           intcon2	equ	0xFF1
  9471                           indf0	equ	0xFEF
  9472                           postinc0	equ	0xFEE
  9473                           fsr0h	equ	0xFEA
  9474                           fsr0l	equ	0xFE9
  9475                           wreg	equ	0xFE8
  9476                           fsr1h	equ	0xFE2
  9477                           fsr1l	equ	0xFE1
  9478                           indf2	equ	0xFDF
  9479                           postinc2	equ	0xFDE
  9480                           postdec2	equ	0xFDD
  9481                           fsr2h	equ	0xFDA
  9482                           fsr2l	equ	0xFD9
  9483                           status	equ	0xFD8
  9484                           
  9485                           	psect	temp
  9486  000047                     btemp:
  9487                           	opt stack 0
  9488  000047                     	ds	1
  9489  0000                     int$flags	set	btemp
  9490  0000                     wtemp6	set	btemp+1
  9491                           pclatu	equ	0xFFB
  9492                           pclath	equ	0xFFA
  9493                           tblptru	equ	0xFF8
  9494                           tblptrh	equ	0xFF7
  9495                           tblptrl	equ	0xFF6
  9496                           tablat	equ	0xFF5
  9497                           prodh	equ	0xFF4
  9498                           prodl	equ	0xFF3
  9499                           intcon	equ	0xFF2
  9500                           intcon2	equ	0xFF1
  9501                           indf0	equ	0xFEF
  9502                           postinc0	equ	0xFEE
  9503                           fsr0h	equ	0xFEA
  9504                           fsr0l	equ	0xFE9
  9505                           wreg	equ	0xFE8
  9506                           fsr1h	equ	0xFE2
  9507                           fsr1l	equ	0xFE1
  9508                           indf2	equ	0xFDF
  9509                           postinc2	equ	0xFDE
  9510                           postdec2	equ	0xFDD
  9511                           fsr2h	equ	0xFDA
  9512                           fsr2l	equ	0xFD9
  9513                           status	equ	0xFD8


Data Sizes:
    Strings     129
    Constant    118
    Data        2
    BSS         14
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     54      70
    BANK0           160    147     147
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(2) Largest target is 16
		 -> STR_13(CODE[12]), salinityMeasurement@str2(BANK0[16]), salinityMeasurement@str1(BANK0[16]), salinityMeasurement@str(BANK0[16]), 
		 -> carbonMeasurement@str2(BANK0[16]), carbonMeasurement@str1(BANK0[16]), carbonMeasurement@str(BANK0[16]), temperatureMeasurementF@str2(BANK0[16]), 
		 -> temperatureMeasurementF@str1(BANK0[16]), temperatureMeasurementF@str(BANK0[16]), temperatureMeasurementC@str2(BANK0[16]), temperatureMeasurementC@str1(BANK0[16]), 
		 -> temperatureMeasurementC@str(BANK0[16]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 16
		 -> STR_13(CODE[12]), salinityMeasurement@str2(BANK0[16]), salinityMeasurement@str1(BANK0[16]), salinityMeasurement@str(BANK0[16]), 
		 -> carbonMeasurement@str2(BANK0[16]), carbonMeasurement@str1(BANK0[16]), carbonMeasurement@str(BANK0[16]), temperatureMeasurementF@str2(BANK0[16]), 
		 -> temperatureMeasurementF@str1(BANK0[16]), temperatureMeasurementF@str(BANK0[16]), temperatureMeasurementC@str2(BANK0[16]), temperatureMeasurementC@str1(BANK0[16]), 
		 -> temperatureMeasurementC@str(BANK0[16]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_12(CODE[14]), STR_10(CODE[17]), STR_9(CODE[14]), STR_7(CODE[16]), 
		 -> STR_6(CODE[15]), STR_4(CODE[17]), STR_3(CODE[15]), STR_1(CODE[17]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 16
		 -> salinityMeasurement@str2(BANK0[16]), salinityMeasurement@str(BANK0[16]), carbonMeasurement@str2(BANK0[16]), carbonMeasurement@str(BANK0[16]), 
		 -> temperatureMeasurementF@str2(BANK0[16]), temperatureMeasurementF@str(BANK0[16]), temperatureMeasurementC@str2(BANK0[16]), temperatureMeasurementC@str(BANK0[16]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 16
		 -> salinityMeasurement@str2(BANK0[16]), salinityMeasurement@str(BANK0[16]), carbonMeasurement@str2(BANK0[16]), carbonMeasurement@str(BANK0[16]), 
		 -> temperatureMeasurementF@str2(BANK0[16]), temperatureMeasurementF@str(BANK0[16]), temperatureMeasurementC@str2(BANK0[16]), temperatureMeasurementC@str(BANK0[16]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_11(CODE[6]), STR_8(CODE[6]), STR_5(CODE[3]), STR_2(CODE[3]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 16
		 -> salinityMeasurement@str1(BANK0[16]), carbonMeasurement@str1(BANK0[16]), temperatureMeasurementF@str1(BANK0[16]), temperatureMeasurementC@str1(BANK0[16]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 16
		 -> salinityMeasurement@str2(BANK0[16]), salinityMeasurement@str(BANK0[16]), carbonMeasurement@str2(BANK0[16]), carbonMeasurement@str(BANK0[16]), 
		 -> temperatureMeasurementF@str2(BANK0[16]), temperatureMeasurementF@str(BANK0[16]), temperatureMeasurementC@str2(BANK0[16]), temperatureMeasurementC@str(BANK0[16]), 

    writeString@str	PTR unsigned char  size(2) Largest target is 16
		 -> STR_13(CODE[12]), salinityMeasurement@str2(BANK0[16]), salinityMeasurement@str1(BANK0[16]), salinityMeasurement@str(BANK0[16]), 
		 -> carbonMeasurement@str2(BANK0[16]), carbonMeasurement@str1(BANK0[16]), carbonMeasurement@str(BANK0[16]), temperatureMeasurementF@str2(BANK0[16]), 
		 -> temperatureMeasurementF@str1(BANK0[16]), temperatureMeasurementF@str(BANK0[16]), temperatureMeasurementC@str2(BANK0[16]), temperatureMeasurementC@str1(BANK0[16]), 
		 -> temperatureMeasurementC@str(BANK0[16]), 


Critical Paths under _main in COMRAM

    _temperatureMeasurementF->___ftadd
    _temperatureMeasurementC->___ftadd
    _salinityMeasurement->___ftadd
    _initialize->_writeCMD
    _carbonMeasurement->___ftadd
    _writeString->_strlen
    _writeString->_writeChar
    _writeChar->_switchE
    _writeCMD->_switchE
    _sprintf->___ftadd
    _fround->___ftadd
    ___wmul->___awdiv
    ___ftmul->___ftadd
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___llmod->___lldiv
    ___fttol->___ftadd
    ___ftsub->___ftadd
    ___ftadd->___wmul
    ___ftdiv->___ftadd
    ___awtoft->___ftpack

Critical Paths under _isr in COMRAM

    _isr->_read_2bytes
    _isr->_write_slave
    _read_2bytes->_read_slave

Critical Paths under _main in BANK0

    _main->_temperatureMeasurementF
    _temperatureMeasurementF->_sprintf
    _temperatureMeasurementC->_sprintf
    _salinityMeasurement->_sprintf
    _carbonMeasurement->_sprintf
    _sprintf->___fttol
    _scale->___ftmul
    _fround->___ftmul
    ___ftmul->___ftdiv
    ___fttol->_scale

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  369619
                  _carbonMeasurement
                            _chanSel
                         _initialize
                _salinityMeasurement
            _temperatureMeasurementC
            _temperatureMeasurementF
                           _writeCMD
                          _writeChar
                        _writeString
 ---------------------------------------------------------------------------------
 (1) _temperatureMeasurementF                             57    55      2   92343
                                             90 BANK0     57    55      2
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___fttol
                            _sprintf
                             _strcpy
                           _writeCMD
                          _writeChar
                        _writeString
 ---------------------------------------------------------------------------------
 (1) _temperatureMeasurementC                             55    53      2   92309
                                             90 BANK0     55    53      2
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___fttol
                            _sprintf
                             _strcpy
                           _writeCMD
                          _writeChar
                        _writeString
 ---------------------------------------------------------------------------------
 (1) _salinityMeasurement                                 56    54      2   91545
                                             90 BANK0     56    54      2
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            _sprintf
                             _strcpy
                           _writeCMD
                        _writeString
 ---------------------------------------------------------------------------------
 (1) _initialize                                           1     1      0      90
                                             28 COMRAM     1     1      0
                           _writeCMD
 ---------------------------------------------------------------------------------
 (1) _chanSel                                              6     4      2     273
                                             22 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (1) _carbonMeasurement                                   56    54      2   91545
                                             90 BANK0     56    54      2
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            _sprintf
                             _strcpy
                           _writeCMD
                        _writeString
 ---------------------------------------------------------------------------------
 (1) _writeString                                          6     4      2    1334
                                             28 COMRAM     6     4      2
                             _strlen
                          _writeChar
 ---------------------------------------------------------------------------------
 (2) _writeChar                                            5     5      0      90
                                             23 COMRAM     5     5      0
                            _switchE
 ---------------------------------------------------------------------------------
 (2) _strlen                                               6     4      2     166
                                             22 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (1) _writeCMD                                             5     5      0      90
                                             23 COMRAM     5     5      0
                            _switchE
 ---------------------------------------------------------------------------------
 (3) _switchE                                              1     1      0       0
                                             22 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _strcpy                                               6     2      4    1291
                                             22 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             44    37      7   66147
                                             52 BANK0     38    31      7
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _scale
 ---------------------------------------------------------------------------------
 (3) _scale                                               10     7      3   14797
                                             30 BANK0      7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              3     3      0      68
                                             22 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (3) _fround                                              13    10      3   14518
                                             30 BANK0     10     7      3
                            ___awdiv
                            ___awmod
                            ___ftadd (ARG)
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    2895
                                             36 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftmul                                             15     9      6    7721
                                             15 BANK0     15     9      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              6     2      4    1664
                                             22 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4    1820
                                             28 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) __tdiv_to_l_                                         15     9      6     455
                                             22 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (3) __div_to_l_                                          12     6      6     598
                                             22 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (3) ___lltoft                                             9     5      4    3145
                                             30 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___llmod                                              9     1      8     767
                                             35 COMRAM     9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8     618
                                             22 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             15    11      4     708
                                             37 BANK0     15    11      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftsub                                              6     0      6    6354
                                              0 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftadd                                             12     6      6    5938
                                             42 COMRAM    12     6      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___awtoft (ARG)
                           ___ftpack
                           ___ftpack (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftneg                                              3     0      3     121
                                             22 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               9     3      6     592
                                             22 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    4953
                                              0 BANK0     15     9      6
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                           ___ftpack
                           ___ftpack (ARG)
 ---------------------------------------------------------------------------------
 (2) ___awtoft                                             4     1      3    3536
                                             30 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) ___ftpack                                             8     3      5    2953
                                             22 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _isr                                                 18    18      0     545
                                              4 COMRAM    18    18      0
                        _read_2bytes
                        _write_slave
 ---------------------------------------------------------------------------------
 (7) _write_slave                                          4     2      2      23
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (7) _read_2bytes                                          2     0      2     522
                                              2 COMRAM     2     0      2
                         _read_slave
 ---------------------------------------------------------------------------------
 (8) _read_slave                                           2     0      2     174
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _carbonMeasurement
     ___awtoft
       ___ftpack
     ___ftadd
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _sprintf
       ___awdiv
         ___awmod (ARG)
       ___ftadd
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftge
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg
       ___ftsub
         ___ftadd
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lldiv
       ___llmod
         ___lldiv (ARG)
       ___lltoft
         ___ftpack
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       __div_to_l_
       __tdiv_to_l_
       _fround
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftadd (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _isdigit
       _scale
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     _strcpy
     _writeCMD
       _switchE
     _writeString
       _strlen
       _writeChar
         _switchE
   _chanSel
   _initialize
     _writeCMD
       _switchE
   _salinityMeasurement
     ___awtoft
       ___ftpack
     ___ftadd
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _sprintf
       ___awdiv
         ___awmod (ARG)
       ___ftadd
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftge
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg
       ___ftsub
         ___ftadd
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lldiv
       ___llmod
         ___lldiv (ARG)
       ___lltoft
         ___ftpack
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       __div_to_l_
       __tdiv_to_l_
       _fround
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftadd (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _isdigit
       _scale
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     _strcpy
     _writeCMD
       _switchE
     _writeString
       _strlen
       _writeChar
         _switchE
   _temperatureMeasurementC
     ___awtoft
       ___ftpack
     ___ftadd
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     _sprintf
       ___awdiv
         ___awmod (ARG)
       ___ftadd
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftge
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg
       ___ftsub
         ___ftadd
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lldiv
       ___llmod
         ___lldiv (ARG)
       ___lltoft
         ___ftpack
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       __div_to_l_
       __tdiv_to_l_
       _fround
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftadd (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _isdigit
       _scale
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     _strcpy
     _writeCMD
       _switchE
     _writeChar
       _switchE
     _writeString
       _strlen
       _writeChar
         _switchE
   _temperatureMeasurementF
     ___awtoft
       ___ftpack
     ___ftadd
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     _sprintf
       ___awdiv
         ___awmod (ARG)
       ___ftadd
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftge
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg
       ___ftsub
         ___ftadd
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lldiv
       ___llmod
         ___lldiv (ARG)
       ___lltoft
         ___ftpack
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       __div_to_l_
       __tdiv_to_l_
       _fround
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftadd (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _isdigit
       _scale
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     _strcpy
     _writeCMD
       _switchE
     _writeChar
       _switchE
     _writeString
       _strlen
       _writeChar
         _switchE
   _writeCMD
     _switchE
   _writeChar
     _switchE
   _writeString
     _strlen
     _writeChar
       _switchE

 _isr (ROOT)
   _read_2bytes
     _read_slave
   _write_slave

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0       0       8        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0       0       6        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     93      93       4       91.9%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     36      46       1       74.5%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      D9       9        0.0%
DATA                 0      0      D9      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.43 build -156212558 
Symbol Table                                                                                   Mon Nov 06 05:47:01 2017

                               _n 003F                                l95 2D24  
                              l96 2CF0                      ___awdiv@sign 0022  
             ___wmul@multiplicand 0027                      __CFG_CP0$OFF 000000  
                    __CFG_CP1$OFF 000000                      __CFG_CP2$OFF 000000  
                    __CFG_CP3$OFF 000000                      ___ftadd@exp1 0036  
                    ___ftadd@exp2 0035                       __CFG_LVP$ON 000000  
                    ___ftadd@sign 0034                               l200 16A4  
                             l202 175A                               l210 0740  
                             l114 2ECC                               l230 0FFA  
                             l222 087E                               l206 070A  
                             l303 1310                               l231 08CC  
                             l215 077A                               l207 072A  
                             l304 1280                               l232 0912  
                             l160 270C                               l225 0878  
                             l217 0868                               l209 074A  
                             l161 2766                               l242 0B1A  
                             l234 09C0                               l226 08B2  
                             l218 0852                               l235 0A28  
                             l219 0816                               l163 2784  
                             l260 0D26                               l252 0C7A  
                             l261 0D0C                               l253 0CA2  
                             l237 0A4E                               l165 27A2  
                             l510 283E                               l270 0E58  
                             l238 0A94                               l503 2F02  
                             l511 286E                               l271 0E5C  
                             l239 0B78                               l520 28C4  
                             l192 19A4                               l280 1064  
                             l272 0E8C                               l264 0DFE  
                             l256 0CF6                               l248 0BDE  
                             l513 28AC                               l273 0FC4  
                             l265 0D66                               l257 0CDC  
                             l514 289C                               l290 117E  
                             l274 0EDE                               l603 21DE  
                             l507 27DE                               l611 2460  
                             l195 1570                               l291 11B6  
                             l267 0E26                               l540 2906  
                             l196 1494                               l292 11C0  
                             l284 10D8                               l276 0FEC  
                             l268 0E0C                               l605 2218  
                             l701 2B94                               l509 27FC  
                             l613 248C                               l189 18D0  
                             l293 1220                               l277 0FD2  
                             l542 2944                               l606 2278  
                             l702 2BA2                               l614 24C6  
                             l294 11F8                               l286 1108  
                             l543 292E                               l607 22BA  
                             l711 2C6A                               l519 28D0  
                             l623 254E                               l615 24EE  
                             l199 154A                               l287 113C  
                             l279 103E                               l712 2C78  
                             l624 2542                               l545 296C  
                             l617 252A                               l641 2146  
                             l289 1174                               l546 2962  
                             l570 1A3E                               l618 251A  
                             l482 2B10                               l642 2164  
                             l539 2910                               l707 2C42  
                             l483 2B1A                               l475 2AC2  
                             l491 2BEA                               l635 2080  
                             l628 29C6                               l652 2E52  
                             l708 2C36                               l484 2B28  
                             l476 2AD2                               l492 2BE2  
                             l629 29F6                               l637 20BA  
                             l646 2FC4                               l574 1A68  
                             l718 2C9C                               l478 2AF0  
                             l638 2108                               l719 2C90  
                             l479 2AE8                               l495 2C02  
                             l639 2126                               l671 300A  
                             l584 1AC4                               l664 23FC  
                             l656 232A                               l496 2C0C  
                             l488 2BC8                               l904 2D9E  
                             l593 1B02                               l585 1ABA  
                             l665 23EC                               l497 2C1A  
                             l489 2BD4                               l905 2D9A  
                             l594 1AF8                               l658 23D0  
                             l579 1ACE                               l667 2422  
                             l659 23BC                               l596 1B26  
                             l597 1B42                               l598 1B72  
                             l697 2B60                               l698 2B54  
                             _CMD 0041                               l898 2F6A  
                             l899 2F62                      __CFG_CPB$OFF 000000  
                    __CFG_CPD$OFF 000000                               _isr 0008  
                    ___awmod@sign 001C                               wreg 000FE8  
 __end_of_temperatureMeasurementC 2696   __end_of_temperatureMeasurementF 1D2A  
                    ___ftdiv@cntr 0069                      ___ftdiv@sign 006E  
                            l2230 2A22                              l4022 130A  
                            l4018 1280                              l2484 2D4C  
                            l2826 2DF2                              l3806 0AF4  
                            l3826 0BE4                              l3862 0D0C  
                            l3854 0CDC                              l3948 106A  
                            l3886 0E0C                              l3798 0A94  
                            ?_isr 0001                              STR_1 0677  
                            STR_2 06F5                              STR_3 06A9  
                            STR_4 0677                              STR_5 06F5  
                            STR_6 06B8                              STR_7 0699  
                            STR_8 06EF                              STR_9 06C7  
                            u2310 2BEE                              u2250 2AF4  
                            u2501 2470                              u4021 205C  
                            u2360 2D8A                              u4041 2096  
                            u2370 2DBE                              u2354 2D60  
                            u2355 2D5C                              u4300 0A64  
                            u2710 2350                              u2630 28D6  
                            u4310 0AAA                              u2560 2554  
                            u2481 2444                              u2377 2DB4  
                            u2810 2C46                              u2715 2346  
                            u4340 0AF4                              u4260 0958  
                            u2750 2406                              u4190 07EE  
                            u4440 0D3A                              u4265 094C  
                            u3811 19FC                              u2691 2306  
                            u3740 28F8                              u2780 2B64  
                            u4700 1252                              u4380 0C2A  
                            u2860 2E28                              u3821 1A10  
                            u3910 1A98                              u4470 0E3A  
                            u2854 2E06                              u2870 2D1C  
                            u2855 2E02                              u4720 1326  
                            u4480 0E50                              u3850 1A30  
                            u4730 1344                              u4570 10B0  
                            u3780 2976                              u4741 21BA  
                            u2877 2D12                              u3950 1AD6  
                            u3880 1A5A                              u4761 21F4  
                            u4690 122C                              u4907 2AA4  
                            u3980 1B0A                              u4917 2D7C  
                            u4927 2FDA                              u4847 2A2C  
                            u4937 2FEA                              u4857 2A3A  
                            u4867 2A54                              u4877 2A68  
                            u4887 2A7C                              u4897 2A90  
                            _main 2696                      ___ftpack@arg 0017  
                    ___ftpack@exp 001A                              fsr0h 000FEA  
                            fsr1h 000FE2                              indf0 000FEF  
                            fsr2h 000FDA                              fsr0l 000FE9  
                            indf2 000FDF                              fsr1l 000FE1  
                            fsr2l 000FD9                              btemp 0047  
                   __CFG_BORV$190 000000                              prodh 000FF4  
                            prodl 000FF3                              start 014C  
                   __CFG_IESO$OFF 000000                      _sprintf$1527 00A1  
                    ___ftmul@cntr 007C                      ___param_bank 000000  
                    ___ftmul@sign 007D                    writeString@str 001D  
                    ?_read_2bytes 0003                 _carbonMeasurement 1EB8  
                    ___fttol@exp1 0093                      ___fttol@lval 008F  
                           ??_isr 0005                ?_carbonMeasurement 00BA  
                           ?_main 0001                   __end_of___awdiv 2B32  
                 __end_of___ftadd 1B98                             STR_10 0688  
                           STR_11 06EF                             STR_12 06D5  
                           STR_13 06E3                   __end_of___awmod 2C24  
                 __end_of___ftdiv 22F0                   __end_of___ftneg 2FD2  
                 __end_of___lldiv 2BB4                   __end_of___ftmul 21A4  
                 ___awdiv@divisor 001F                   __end_of___llmod 2C8A  
                 __end_of___ftsub 2E7C                   __end_of___fttol 2434  
                           i2l120 301A                             i2l131 2E9A  
                           i2l140 0070                             i2l126 3040  
                           i2l150 00D0                             i2l142 008A  
                           i2l152 00E8                             i2l145 009C  
                           i2l154 00FE                             i2l148 00B8  
                 ___awdiv@counter 0021                   __end_of_chanSel 2EEE  
                           _TRISA 000F92                             _TRISB 000F93  
                           _TRISC 000F94                       _writeString 2CE6  
                   __CFG_WRT0$OFF 000000                     __CFG_WRT1$OFF 000000  
                   __CFG_WRT2$OFF 000000                     __CFG_WRT3$OFF 000000  
             ??_carbonMeasurement 0037                      ___lltoft@exp 0027  
                  __CFG_EBTR0$OFF 000000                    __CFG_FCMEN$OFF 000000  
                  __CFG_EBTR1$OFF 000000                    __CFG_EBTR2$OFF 000000  
                  __CFG_EBTR3$OFF 000000                       _write_slave 3012  
                   __CFG_WRTB$OFF 000000                     __CFG_WRTC$OFF 000000  
                   __CFG_WRTD$OFF 000000                    __CFG_EBTRB$OFF 000000  
                   ___awtoft@sign 0022                   __end_of_dpowers 0629  
                           _count 0043                             _index 0037  
                           _scale 1352                   __end_of_isdigit 3012  
              __CFG_MCLRE$EXTMCLR 000000                     ___ftpack@sign 001B  
                  __CFG_BOREN$OFF 000000                             pclath 000FFA  
                           tablat 000FF5                             status 000FD8  
                           wtemp6 0048                   __end_of_sprintf 1352  
                 __end_of_switchE 2FF4                    __CFG_HFOFST$ON 000000  
                  __CFG_PBADEN$ON 000000         __end_of_carbonMeasurement 2046  
                 __initialization 2F26                      __end_of_main 27C0  
                          ??_main 0037                     ___fttol@sign1 008E  
                   __activetblptr 000002              __size_of__tdiv_to_l_ 0132  
                ___llmod@dividend 0024                            ?_scale 007E  
                          _ADRESH 000FC4                            _ADRESL 000FC3  
                ___awdiv@dividend 001D                  __end_of___awtoft 2F26  
                          _ANSELA 000F38                            _ANSELB 000F39  
                          _ANSELC 000F3A                  __end_of___ftpack 2996  
                __end_of___lltoft 2CE6                    __CFG_WDTEN$OFF 000000  
     __end_of_salinityMeasurement 1EB8                    __CFG_XINST$OFF 000000  
                __end_of__powers_ 0650                            ___ftge 2996  
                          ___wmul 2F88                         ??___awdiv 0021  
                       ??___ftadd 0031                    __CFG_STVREN$ON 000000  
                       ??___awmod 001B                            _carbon 003B  
                       ??___ftdiv 0066                         ??___ftneg 001A  
                       ??___lldiv 001F                         ??___ftmul 0075  
                       ??___llmod 002C                         ??___ftsub 0037  
                       ??___fttol 0089                         ??_chanSel 0019  
                          _fround 1780                            clear_0 2F44  
                          _random 0045                  ___awdiv@quotient 0023  
                 ___awmod@divisor 0019                   ___awmod@counter 001B  
                          _strcpy 2F58                            _strlen 2D90  
           ___ftmul@f3_as_product 0079                      __pdataCOMRAM 0045  
                       ??_isdigit 0017                      __mediumconst 0000  
                          tblptrh 000FF7                            tblptrl 000FF6  
                          tblptru 000FF8                         ??_sprintf 009B  
                       ??_switchE 0017                  __end_of_writeCMD 2E30  
                      __accesstop 0060           __end_of__initialization 2F4A  
                      ___ftadd@f1 002B                        ___ftadd@f2 002E  
                      ___ftge@ff1 0017                        ___ftge@ff2 001A  
                  chanSel@digital 001B                     ___rparam_used 000001  
                      ___ftdiv@f1 0060                        ___ftdiv@f2 0063  
                      ___ftdiv@f3 006A           salinityMeasurement@str1 00DC  
         salinityMeasurement@str2 00CC                        ___ftneg@f1 0017  
                      ___awtoft@c 001F        __size_of_carbonMeasurement 018E  
                      ___ftmul@f1 006F                        ___ftmul@f2 0072  
                      ___ftsub@f1 0060                        ___ftsub@f2 0063  
                      ___fttol@f1 0085                    __pcstackCOMRAM 0001  
                      ___lltoft@c 001F                     __end_of_scale 1780  
            __size_of_read_2bytes 003A                        __div_to_l_ 27C0  
                 write_slave@temp 0003                   __div_to_l_@exp1 0022  
                 __div_to_l_@cntr 0021                           ??_scale 0037  
                 __div_to_l_@quot 001D                      sprintf@width 00B2  
      temperatureMeasurementC@Vin 00EC        temperatureMeasurementF@Vin 00EC  
      temperatureMeasurementC@str 00BC        temperatureMeasurementF@str 00BC  
                 __CFG_PLLCFG$OFF 000000                     __div_to_l_@f1 0017  
                   __div_to_l_@f2 001A          ?_temperatureMeasurementC 00BA  
        ?_temperatureMeasurementF 00BA                __CFG_CCP2MX$PORTC1 000000  
                         ?___ftge 0017                           ?___wmul 0025  
              __CFG_CCP3MX$PORTB5 000000                           ?_fround 007E  
                       ?___awtoft 001F                         ?___ftpack 0017  
                       ?___lltoft 001F                           ?_strcpy 0017  
                         ?_strlen 0017                      ?_writeString 001D  
                    ?_write_slave 0001                           _SSP1ADD 000FC8  
                         _SSP1BUF 000FC9          temperatureMeasurementF@F 00F1  
        temperatureMeasurementC@x 00BA          temperatureMeasurementF@x 00BA  
              __size_of_writeChar 0052                   __CFG_PWRTEN$OFF 000000  
               __end_of__npowers_ 0677                           __Hparam 0000  
                      _scale$1526 0081                           __Lparam 0000  
                 __size_of___ftge 0090                           ___awdiv 2AAE  
                         ___ftadd 19EC                           ___awmod 2BB4  
                         ___ftdiv 21A4                           ___ftneg 2FAE  
                         ___lldiv 2B32                   __size_of___wmul 0026  
                         ___ftmul 2046                           ___llmod 2C24  
                         ___ftsub 2E30                           ___fttol 22F0  
                    __psmallconst 0600                           _chanSel 2EB6  
                         __pcinit 2F26                        ??___awtoft 0022  
                      ??___ftpack 001C                   __size_of_fround 026C  
                         __ramtop 0600                         ?_writeCMD 0001  
                      _initialize 2A26                        ??___lltoft 0023  
                         __ptext0 2696                           __ptext1 1B98  
                         __ptext2 2566                           __ptext3 1D2A  
                         __ptext4 2A26                           __ptext5 2EB6  
                         __ptext6 1EB8                           __ptext7 2CE6  
                         __ptext8 2D3E                           __ptext9 2D90  
                      _read_slave 3030                   __size_of_strcpy 0030  
                 __size_of_strlen 0052                       ?__div_to_l_ 0017  
                         _dpowers 0601                           _isdigit 2FF4  
                    __size_of_isr 0144                  ___awmod@dividend 0017  
                         _sprintf 06FA                           _switchE 2FD2  
            end_of_initialization 2F4A                     __Lmediumconst 0000  
                 ___lldiv@divisor 001B                   ___lldiv@counter 0023  
                         postdec2 000FDD                           postinc0 000FEE  
                         postinc2 000FDE                    __tdiv_to_l_@f1 0017  
                  __tdiv_to_l_@f2 001A                           strlen@s 0017  
                   ??__tdiv_to_l_ 001D                        ??_writeCMD 0018  
               __end_of_writeChar 2D90                         _TRISCbits 000F94  
           carbonMeasurement@str1 00DC             carbonMeasurement@str2 00CC  
                    writeString@i 0021                       ___ftdiv@exp 006D  
             __size_of__div_to_l_ 0128                       ___ftmul@exp 0078  
    __size_of_salinityMeasurement 018E                    __end_of___ftge 2A26  
                  __end_of___wmul 2FAE                     __pidataCOMRAM 3046  
                     ?_initialize 0001                       ?_read_slave 0001  
                  __end_of_fround 19EC                    __end_of_strcpy 2F88  
                  __end_of_strlen 2DE2               start_initialization 2F26  
             __end_of__tdiv_to_l_ 2566                       __end_of_isr 014C  
            __size_of_writeString 0058              __size_of_write_slave 001E  
                 ___llmod@divisor 0028                   ___llmod@counter 002C  
                   ??_read_2bytes 0005                          ??___ftge 001D  
                        ??___wmul 0029                          ??_fround 0037  
                   sprintf@tmpval 00A6  __size_of_temperatureMeasurementC 0130  
__size_of_temperatureMeasurementF 0192                          ??_strcpy 001B  
                        ??_strlen 0019       temperatureMeasurementC@str1 00DC  
     temperatureMeasurementC@temp 00EF       temperatureMeasurementC@str2 00CC  
                      fround@prec 0087       temperatureMeasurementF@str1 00DC  
     temperatureMeasurementF@temp 00EF       temperatureMeasurementF@str2 00CC  
               __size_of___awtoft 0038                 __size_of___ftpack 00AE  
          salinityMeasurement@Vin 00EF                 __size_of___lltoft 005C  
                     __pbssCOMRAM 0037            salinityMeasurement@str 00BC  
                   __pcstackBANK0 0060                      _isdigit$1161 0018  
                     sprintf@flag 00B0                       sprintf@fval 00B4  
                     sprintf@prec 00B7               __size_of_initialize 0088  
            salinityMeasurement@x 00BA               __size_of_read_slave 0016  
                       __pintcode 0008                          ?___awdiv 001D  
                        ?___ftadd 002B                          ?___awmod 0017  
                        ?___ftdiv 0060                          ?___ftneg 0017  
                        ?___lldiv 0017                          ?___ftmul 006F  
                        ?___llmod 0024                          ?___ftsub 0060  
                       __npowers_ 0650                          ?___fttol 0085  
                        ?_chanSel 0017                  __CFG_PRICLKEN$ON 000000  
                     __tdiv_to_l_ 2434               __end_of_read_2bytes 2EB6  
     salinityMeasurement@salinity 00EC                      ??__div_to_l_ 001D  
                     __smallconst 0600                 __size_of_writeCMD 004E  
                        ?_isdigit 0001                       writeCMD@cmd 001A  
                        ?_sprintf 0094                          ?_switchE 0001  
                  __size_of_scale 042E                    ___wmul@product 0029  
                        _LATBbits 000F8A                          _LATCbits 000F8B  
                        _PIE1bits 000F9D                       writeChar@ch 001A  
                        _PIR1bits 000F9E                __end_of__div_to_l_ 28E8  
                        i2u362_40 007E                          i2u359_40 0068  
                       _temperC_F 003D                  __CFG_WDTPS$32768 000000  
                        _SSP1CON1 000FC6                          _SSP1CON2 000FC5  
                        _SSP1STAT 000FC7              carbonMeasurement@Vin 00EF  
            carbonMeasurement@str 00BC                        _ADCON0bits 000FC2  
                      _ADCON1bits 000FC1                        _ADCON2bits 000FC0  
               ___wmul@multiplier 0025                         _writeChar 2D3E  
             _salinityMeasurement 1D2A                       _INTCON2bits 000FF1  
                     chanSel@chan 0017                          __Hrparam 0000  
                        __Lrparam 0000              ?_salinityMeasurement 00BA  
               __CFG_P2BMX$PORTB5 000000                       _read_2bytes 2E7C  
                __size_of___awdiv 0084                  __size_of___ftadd 01AC  
                __size_of___awmod 0070                  __size_of___ftdiv 014C  
                __size_of___ftneg 0024                  __size_of___lldiv 0082  
                __size_of___ftmul 015E                  __size_of___llmod 0066  
                __size_of___ftsub 004C                  __size_of___fttol 0144  
         _temperatureMeasurementC 2566           _temperatureMeasurementF 1B98  
                    ??_initialize 001D                          ___awtoft 2EEE  
                        ___ftpack 28E8                  __size_of_chanSel 0038  
                     _fround$1524 0084                       _fround$1525 0081  
                    ??_read_slave 0003                          ___lltoft 2C8A  
                      _ANSELCbits 000F3A                        sprintf@exp 00AE  
                      sprintf@val 00AA                  __size_of_isdigit 001E  
                      ?_writeChar 0001                          __ptext10 2DE2  
                        __ptext11 2FD2                          __ptext20 2AAE  
                        __ptext12 2F58                          __ptext21 2434  
                        __ptext13 06FA                          __ptext30 2996  
                        __ptext22 27C0                          __ptext14 1352  
                        __ptext31 21A4                          __ptext23 2C8A  
                        __ptext15 2FF4                          __ptext32 2EEE  
                        __ptext24 2C24                          __ptext16 1780  
                        __ptext33 28E8                          __ptext25 2B32  
                        __ptext17 2F88                          __ptext26 22F0  
                        __ptext18 2046                          __ptext35 3012  
                        __ptext27 2E30                          __ptext19 2BB4  
                        __ptext36 2E7C                          __ptext28 19EC  
                        __ptext37 3030                          __ptext29 2FAE  
                    _SSP1CON1bits 000FC6                          __powers_ 0629  
                __size_of_sprintf 0C58                  __size_of_switchE 0022  
                      strcpy@from 0019                     __size_of_main 012A  
              __end_of_initialize 2AAE                __end_of_read_slave 3046  
                        _salinity 0039                        writeChar@i 001B  
           ??_salinityMeasurement 0037                          int$flags 0047  
                 read_2bytes@data 0003                      _SSP1STATbits 000FC7  
                        _writeCMD 2DE2                     ??_writeString 001F  
                      _INTCONbits 000FF2                     ??_write_slave 0003  
                        isdigit@c 0019                          scale@scl 0084  
                        intlevel2 0000                         sprintf@ap 00A4  
                __tdiv_to_l_@exp1 0025                  __tdiv_to_l_@cntr 0024  
                       sprintf@sp 0094                  __tdiv_to_l_@quot 0020  
                ___lldiv@dividend 0017                         writeCMD@i 001B  
              carbonMeasurement@x 00BA         ??_temperatureMeasurementC 0037  
       ??_temperatureMeasurementF 0037                   read_slave@byte1 0001  
                    ?__tdiv_to_l_ 0017                          sprintf@c 00B9  
                        sprintf@f 0096                  ___lldiv@quotient 001F  
                        strcpy@cp 001B                          strlen@cp 001B  
                        strcpy@to 0017                 __CFG_T3CMX$PORTC0 000000  
                     ??_writeChar 0018               __end_of_writeString 2D3E  
             __end_of_write_slave 3030                 __CFG_FOSC$INTIO67 000000  
         carbonMeasurement@carbon 00EC  
