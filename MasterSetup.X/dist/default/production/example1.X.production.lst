

Microchip Technology PIC18 LITE Macro Assembler V1.43 build -156212558 
                                                                                               Mon Nov 06 03:53:45 2017

Microchip Technology Omniscient Code Generator v1.43 (Free mode) build 201707250354
     1                           	processor	18F25K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text16,global,reloc=2,class=CODE,delta=1
    29                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    31                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=1
    32                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=1
    33                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=1
    34                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=1
    35                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=1
    36                           	psect	text24,global,reloc=2,class=CODE,delta=1,group=1
    37                           	psect	text25,global,reloc=2,class=CODE,delta=1,group=1
    38                           	psect	text26,global,reloc=2,class=CODE,delta=1,group=1
    39                           	psect	text27,global,reloc=2,class=CODE,delta=1,group=1
    40                           	psect	text28,global,reloc=2,class=CODE,delta=1,group=1
    41                           	psect	text29,global,reloc=2,class=CODE,delta=1
    42                           	psect	text30,global,reloc=2,class=CODE,delta=1
    43                           	psect	text31,global,reloc=2,class=CODE,delta=1,group=1
    44                           	psect	text32,global,reloc=2,class=CODE,delta=1,group=1
    45                           	psect	text33,global,reloc=2,class=CODE,delta=1,group=1
    46                           	psect	text34,global,reloc=2,class=CODE,delta=1,group=1
    47                           	psect	text35,global,reloc=2,class=CODE,delta=1,group=1
    48                           	psect	text36,global,reloc=2,class=CODE,delta=1
    49                           	psect	text37,global,reloc=2,class=CODE,delta=1
    50                           	psect	text38,global,reloc=2,class=CODE,delta=1
    51                           	psect	text39,global,reloc=2,class=CODE,delta=1
    52                           	psect	text40,global,reloc=2,class=CODE,delta=1
    53                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    54                           	psect	text42,global,reloc=2,class=CODE,delta=1
    55                           	psect	text43,global,reloc=2,class=CODE,delta=1
    56                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    57                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    58                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    59  0000                     
    60                           ; Version 1.43
    61                           ; Generated 25/07/2017 GMT
    62                           ; 
    63                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    64                           ; All rights reserved.
    65                           ; 
    66                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    67                           ; 
    68                           ; Redistribution and use in source and binary forms, with or without modification, are
    69                           ; permitted provided that the following conditions are met:
    70                           ; 
    71                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    72                           ;        conditions and the following disclaimer.
    73                           ; 
    74                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    75                           ;        of conditions and the following disclaimer in the documentation and/or other
    76                           ;        materials provided with the distribution.
    77                           ; 
    78                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    79                           ;        software without specific prior written permission.
    80                           ; 
    81                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    82                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    83                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    84                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    85                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    86                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    87                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    88                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    89                           ; 
    90                           ; 
    91                           ; Code-generator required, PIC18F25K22 Definitions
    92                           ; 
    93                           ; SFR Addresses
    94  0000                     
    95                           	psect	smallconst
    96  000600                     __psmallconst:
    97                           	opt stack 0
    98  000600  00                 	db	0
    99  000601                     _dpowers:
   100                           	opt stack 0
   101  000601  0001               	dw	1
   102  000603  0000               	dw	0
   103  000605  000A               	dw	10
   104  000607  0000               	dw	0
   105  000609  0064               	dw	100
   106  00060B  0000               	dw	0
   107  00060D  03E8               	dw	1000
   108  00060F  0000               	dw	0
   109  000611  2710               	dw	10000
   110  000613  0000               	dw	0
   111  000615  86A0               	dw	34464
   112  000617  0001               	dw	1
   113  000619  4240               	dw	16960
   114  00061B  000F               	dw	15
   115  00061D  9680               	dw	38528
   116  00061F  0098               	dw	152
   117  000621  E100               	dw	57600
   118  000623  05F5               	dw	1525
   119  000625  CA00               	dw	51712
   120  000627  3B9A               	dw	15258
   121  000629                     __end_of_dpowers:
   122                           	opt stack 0
   123  000629                     __powers_:
   124                           	opt stack 0
   125  000629  00                 	db	0
   126  00062A  80                 	db	128
   127  00062B  3F                 	db	63
   128  00062C  00                 	db	0
   129  00062D  20                 	db	32
   130  00062E  41                 	db	65
   131  00062F  00                 	db	0
   132  000630  C8                 	db	200
   133  000631  42                 	db	66
   134  000632  00                 	db	0
   135  000633  7A                 	db	122
   136  000634  44                 	db	68
   137  000635  40                 	db	64
   138  000636  1C                 	db	28
   139  000637  46                 	db	70
   140  000638  50                 	db	80
   141  000639  C3                 	db	195
   142  00063A  47                 	db	71
   143  00063B  24                 	db	36
   144  00063C  74                 	db	116
   145  00063D  49                 	db	73
   146  00063E  97                 	db	151
   147  00063F  18                 	db	24
   148  000640  4B                 	db	75
   149  000641  BC                 	db	188
   150  000642  BE                 	db	190
   151  000643  4C                 	db	76
   152  000644  6B                 	db	107
   153  000645  6E                 	db	110
   154  000646  4E                 	db	78
   155  000647  03                 	db	3
   156  000648  15                 	db	21
   157  000649  50                 	db	80
   158  00064A  79                 	db	121
   159  00064B  AD                 	db	173
   160  00064C  60                 	db	96
   161  00064D  F3                 	db	243
   162  00064E  49                 	db	73
   163  00064F  71                 	db	113
   164  000650                     __end_of__powers_:
   165                           	opt stack 0
   166  000650                     __npowers_:
   167                           	opt stack 0
   168  000650  00                 	db	0
   169  000651  80                 	db	128
   170  000652  3F                 	db	63
   171  000653  CD                 	db	205
   172  000654  CC                 	db	204
   173  000655  3D                 	db	61
   174  000656  D7                 	db	215
   175  000657  23                 	db	35
   176  000658  3C                 	db	60
   177  000659  12                 	db	18
   178  00065A  83                 	db	131
   179  00065B  3A                 	db	58
   180  00065C  B7                 	db	183
   181  00065D  D1                 	db	209
   182  00065E  38                 	db	56
   183  00065F  C6                 	db	198
   184  000660  27                 	db	39
   185  000661  37                 	db	55
   186  000662  38                 	db	56
   187  000663  86                 	db	134
   188  000664  35                 	db	53
   189  000665  C0                 	db	192
   190  000666  D6                 	db	214
   191  000667  33                 	db	51
   192  000668  CC                 	db	204
   193  000669  2B                 	db	43
   194  00066A  32                 	db	50
   195  00066B  70                 	db	112
   196  00066C  89                 	db	137
   197  00066D  30                 	db	48
   198  00066E  E7                 	db	231
   199  00066F  DB                 	db	219
   200  000670  2E                 	db	46
   201  000671  E5                 	db	229
   202  000672  3C                 	db	60
   203  000673  1E                 	db	30
   204  000674  42                 	db	66
   205  000675  A2                 	db	162
   206  000676  0D                 	db	13
   207  000677                     __end_of__npowers_:
   208                           	opt stack 0
   209  000677                     STR_10:
   210  000677  0A                 	db	10
   211  000678  77                 	db	119	;'w'
   212  000679  72                 	db	114	;'r'
   213  00067A  6F                 	db	111	;'o'
   214  00067B  6E                 	db	110	;'n'
   215  00067C  67                 	db	103	;'g'
   216  00067D  20                 	db	32
   217  00067E  63                 	db	99	;'c'
   218  00067F  6F                 	db	111	;'o'
   219  000680  6D                 	db	109	;'m'
   220  000681  6D                 	db	109	;'m'
   221  000682  61                 	db	97	;'a'
   222  000683  6E                 	db	110	;'n'
   223  000684  64                 	db	100	;'d'
   224  000685  0A                 	db	10
   225  000686  00                 	db	0
   226  000687                     STR_11:
   227  000687  0A                 	db	10
   228  000688  44                 	db	68	;'D'
   229  000689  61                 	db	97	;'a'
   230  00068A  74                 	db	116	;'t'
   231  00068B  61                 	db	97	;'a'
   232  00068C  20                 	db	32
   233  00068D  3D                 	db	61	;'='
   234  00068E  20                 	db	32
   235  00068F  25                 	db	37
   236  000690  30                 	db	48	;'0'
   237  000691  2E                 	db	46
   238  000692  32                 	db	50	;'2'
   239  000693  66                 	db	102	;'f'
   240  000694  0A                 	db	10
   241  000695  00                 	db	0
   242  000696                     STR_1:
   243  000696  0A                 	db	10
   244  000697  43                 	db	67	;'C'
   245  000698  4D                 	db	77	;'M'
   246  000699  44                 	db	68	;'D'
   247  00069A  20                 	db	32
   248  00069B  3D                 	db	61	;'='
   249  00069C  20                 	db	32
   250  00069D  25                 	db	37
   251  00069E  64                 	db	100	;'d'
   252  00069F  0A                 	db	10
   253  0006A0  00                 	db	0
   254  0000                     
   255                           ; #config settings
   256  0006A1  00                 	db	0	; dummy byte at the end
   257  0000                     
   258                           	psect	nvCOMRAM
   259  00004B                     __pnvCOMRAM:
   260                           	opt stack 0
   261  00004B                     _eusart2TxBufferRemaining:
   262                           	opt stack 0
   263  00004B                     	ds	1
   264  0000                     _ANSELCbits	set	3898
   265  0000                     _ANSELA	set	3896
   266  0000                     _ANSELB	set	3897
   267  0000                     _ANSELC	set	3898
   268  0000                     _INTCON3bits	set	4080
   269  0000                     _SSP1STAT	set	4039
   270  0000                     _SSP1ADD	set	4040
   271  0000                     _SSP1CON2	set	4037
   272  0000                     _TRISCbits	set	3988
   273  0000                     _SSP1CON1bits	set	4038
   274  0000                     _OSCCONbits	set	4051
   275  0000                     _SSP1BUF	set	4041
   276  0000                     _PIR1bits	set	3998
   277  0000                     _SSP1CON2bits	set	4037
   278  0000                     _SSPCON2	set	4037
   279  0000                     _SSPSTAT	set	4039
   280  0000                     _INTCON2bits	set	4081
   281  0000                     _WPUB	set	3937
   282  0000                     _TRISC	set	3988
   283  0000                     _TRISB	set	3987
   284  0000                     _TRISA	set	3986
   285  0000                     _LATC	set	3979
   286  0000                     _LATB	set	3978
   287  0000                     _LATA	set	3977
   288  0000                     _OSCTUNE	set	3995
   289  0000                     _OSCCON2	set	4050
   290  0000                     _OSCCON	set	4051
   291  0000                     _PIR3bits	set	4004
   292  0000                     _INTCONbits	set	4082
   293  0000                     _RCONbits	set	4048
   294  0000                     _RCREG2	set	3956
   295  0000                     _RCSTA2bits	set	3953
   296  0000                     _TXREG2	set	3955
   297  0000                     _SPBRGH2	set	3958
   298  0000                     _SPBRG2	set	3957
   299  0000                     _TXSTA2	set	3954
   300  0000                     _RCSTA2	set	3953
   301  0000                     _BAUDCON2	set	3952
   302  0000                     _PIE3bits	set	4003
   303                           
   304                           	psect	cinit
   305  00302E                     __pcinit:
   306                           	opt stack 0
   307  00302E                     start_initialization:
   308                           	opt stack 0
   309  00302E                     __initialization:
   310                           	opt stack 0
   311                           
   312                           ; Clear objects allocated to BANK0 (19 bytes)
   313  00302E  EE00  F0B5         	lfsr	0,__pbssBANK0
   314  003032  0E13               	movlw	19
   315  003034                     clear_0:
   316  003034  6AEE               	clrf	postinc0,c
   317  003036  06E8               	decf	wreg,f,c
   318  003038  E1FD               	bnz	clear_0
   319                           
   320                           ; Clear objects allocated to COMRAM (18 bytes)
   321  00303A  EE00  F039         	lfsr	0,__pbssCOMRAM
   322  00303E  0E12               	movlw	18
   323  003040                     clear_1:
   324  003040  6AEE               	clrf	postinc0,c
   325  003042  06E8               	decf	wreg,f,c
   326  003044  E1FD               	bnz	clear_1
   327  003046                     end_of_initialization:
   328                           	opt stack 0
   329  003046                     __end_of__initialization:
   330                           	opt stack 0
   331  003046  904C               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   332  003048  924C               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   333  00304A  0E00               	movlw	low (__Lmediumconst shr (0+16))
   334  00304C  6EF8               	movwf	tblptru,c
   335  00304E  0100               	movlb	0
   336  003050  EFFA  F00D         	goto	_main	;jump to C main() function
   337                           tblptru	equ	0xFF8
   338                           postinc0	equ	0xFEE
   339                           wreg	equ	0xFE8
   340                           
   341                           	psect	bssCOMRAM
   342  000039                     __pbssCOMRAM:
   343                           	opt stack 0
   344  000039                     _part2:
   345                           	opt stack 0
   346  000039                     	ds	2
   347  00003B                     _part1:
   348                           	opt stack 0
   349  00003B                     	ds	2
   350  00003D                     _data:
   351                           	opt stack 0
   352  00003D                     	ds	2
   353  00003F                     _CMD:
   354                           	opt stack 0
   355  00003F                     	ds	2
   356  000041                     _ch:
   357                           	opt stack 0
   358  000041                     	ds	2
   359  000043                     _dSlave:
   360                           	opt stack 0
   361  000043                     	ds	2
   362  000045                     _temp:
   363                           	opt stack 0
   364  000045                     	ds	1
   365  000046                     _eusart2RxCount:
   366                           	opt stack 0
   367  000046                     	ds	1
   368  000047                     _eusart2RxTail:
   369                           	opt stack 0
   370  000047                     	ds	1
   371  000048                     _eusart2RxHead:
   372                           	opt stack 0
   373  000048                     	ds	1
   374  000049                     _eusart2TxTail:
   375                           	opt stack 0
   376  000049                     	ds	1
   377  00004A                     _eusart2TxHead:
   378                           	opt stack 0
   379  00004A                     	ds	1
   380                           tblptru	equ	0xFF8
   381                           postinc0	equ	0xFEE
   382                           wreg	equ	0xFE8
   383                           
   384                           	psect	bssBANK0
   385  0000B5                     __pbssBANK0:
   386                           	opt stack 0
   387  0000B5                     _eusart2RxBuffer:
   388                           	opt stack 0
   389  0000B5                     	ds	8
   390  0000BD                     _eusart2TxBuffer:
   391                           	opt stack 0
   392  0000BD                     	ds	8
   393  0000C5                     _value:
   394                           	opt stack 0
   395  0000C5                     	ds	3
   396                           tblptru	equ	0xFF8
   397                           postinc0	equ	0xFEE
   398                           wreg	equ	0xFE8
   399                           
   400                           	psect	cstackBANK0
   401  000060                     __pcstackBANK0:
   402                           	opt stack 0
   403  000060                     ??___ftdiv:
   404                           
   405                           ; 1 bytes @ 0x0
   406  000060                     	ds	3
   407  000063                     ___ftdiv@cntr:
   408                           	opt stack 0
   409                           
   410                           ; 1 bytes @ 0x3
   411  000063                     	ds	1
   412  000064                     ___ftdiv@f3:
   413                           	opt stack 0
   414                           
   415                           ; 3 bytes @ 0x4
   416  000064                     	ds	3
   417  000067                     ___ftdiv@exp:
   418                           	opt stack 0
   419                           
   420                           ; 1 bytes @ 0x7
   421  000067                     	ds	1
   422  000068                     ___ftdiv@sign:
   423                           	opt stack 0
   424                           
   425                           ; 1 bytes @ 0x8
   426  000068                     	ds	1
   427  000069                     ?___ftmul:
   428                           	opt stack 0
   429  000069                     ___ftmul@f1:
   430                           	opt stack 0
   431                           
   432                           ; 3 bytes @ 0x9
   433  000069                     	ds	3
   434  00006C                     ___ftmul@f2:
   435                           	opt stack 0
   436                           
   437                           ; 3 bytes @ 0xC
   438  00006C                     	ds	3
   439  00006F                     ??___ftmul:
   440                           
   441                           ; 1 bytes @ 0xF
   442  00006F                     	ds	3
   443  000072                     ___ftmul@exp:
   444                           	opt stack 0
   445                           
   446                           ; 1 bytes @ 0x12
   447  000072                     	ds	1
   448  000073                     ___ftmul@f3_as_product:
   449                           	opt stack 0
   450                           
   451                           ; 3 bytes @ 0x13
   452  000073                     	ds	3
   453  000076                     ___ftmul@cntr:
   454                           	opt stack 0
   455                           
   456                           ; 1 bytes @ 0x16
   457  000076                     	ds	1
   458  000077                     ___ftmul@sign:
   459                           	opt stack 0
   460                           
   461                           ; 1 bytes @ 0x17
   462  000077                     	ds	1
   463  000078                     ?_carbonMeasurement:
   464                           	opt stack 0
   465  000078                     ?_salinityMeasurement:
   466                           	opt stack 0
   467  000078                     ?_fround:
   468                           	opt stack 0
   469  000078                     ?_scale:
   470                           	opt stack 0
   471  000078                     carbonMeasurement@x:
   472                           	opt stack 0
   473  000078                     salinityMeasurement@x:
   474                           	opt stack 0
   475                           
   476                           ; 2 bytes @ 0x18
   477  000078                     	ds	3
   478  00007B                     carbonMeasurement@carbon:
   479                           	opt stack 0
   480  00007B                     salinityMeasurement@salinity:
   481                           	opt stack 0
   482  00007B                     _fround$1574:
   483                           	opt stack 0
   484  00007B                     _scale$1575:
   485                           	opt stack 0
   486                           
   487                           ; 3 bytes @ 0x1B
   488  00007B                     	ds	3
   489  00007E                     scale@scl:
   490                           	opt stack 0
   491  00007E                     carbonMeasurement@Vin:
   492                           	opt stack 0
   493  00007E                     salinityMeasurement@Vin:
   494                           	opt stack 0
   495  00007E                     _fround$1573:
   496                           	opt stack 0
   497                           
   498                           ; 3 bytes @ 0x1E
   499  00007E                     	ds	1
   500  00007F                     ?___fttol:
   501                           	opt stack 0
   502  00007F                     ___fttol@f1:
   503                           	opt stack 0
   504                           
   505                           ; 3 bytes @ 0x1F
   506  00007F                     	ds	2
   507  000081                     fround@prec:
   508                           	opt stack 0
   509                           
   510                           ; 1 bytes @ 0x21
   511  000081                     	ds	2
   512  000083                     ??___fttol:
   513                           
   514                           ; 1 bytes @ 0x23
   515  000083                     	ds	5
   516  000088                     ___fttol@sign1:
   517                           	opt stack 0
   518                           
   519                           ; 1 bytes @ 0x28
   520  000088                     	ds	1
   521  000089                     ___fttol@lval:
   522                           	opt stack 0
   523                           
   524                           ; 4 bytes @ 0x29
   525  000089                     	ds	4
   526  00008D                     ___fttol@exp1:
   527                           	opt stack 0
   528                           
   529                           ; 1 bytes @ 0x2D
   530  00008D                     	ds	1
   531  00008E                     ?_printf:
   532                           	opt stack 0
   533  00008E                     ?_temperatureMeasurementC:
   534                           	opt stack 0
   535  00008E                     ?_temperatureMeasurementF:
   536                           	opt stack 0
   537  00008E                     temperatureMeasurementC@x:
   538                           	opt stack 0
   539  00008E                     temperatureMeasurementF@x:
   540                           	opt stack 0
   541  00008E                     printf@f:
   542                           	opt stack 0
   543                           
   544                           ; 2 bytes @ 0x2E
   545  00008E                     	ds	3
   546  000091                     temperatureMeasurementC@Vin:
   547                           	opt stack 0
   548  000091                     temperatureMeasurementF@Vin:
   549                           	opt stack 0
   550                           
   551                           ; 3 bytes @ 0x31
   552  000091                     	ds	2
   553  000093                     ??_printf:
   554                           
   555                           ; 1 bytes @ 0x33
   556  000093                     	ds	1
   557  000094                     temperatureMeasurementC@temp:
   558                           	opt stack 0
   559  000094                     temperatureMeasurementF@temp:
   560                           	opt stack 0
   561                           
   562                           ; 2 bytes @ 0x34
   563  000094                     	ds	2
   564  000096                     temperatureMeasurementF@F:
   565                           	opt stack 0
   566                           
   567                           ; 2 bytes @ 0x36
   568  000096                     	ds	3
   569  000099                     _printf$1576:
   570                           	opt stack 0
   571                           
   572                           ; 3 bytes @ 0x39
   573  000099                     	ds	3
   574  00009C                     printf@ap:
   575                           	opt stack 0
   576                           
   577                           ; 2 bytes @ 0x3C
   578  00009C                     	ds	2
   579  00009E                     printf@tmpval:
   580                           	opt stack 0
   581                           
   582                           ; 4 bytes @ 0x3E
   583  00009E                     	ds	4
   584  0000A2                     printf@val:
   585                           	opt stack 0
   586                           
   587                           ; 4 bytes @ 0x42
   588  0000A2                     	ds	4
   589  0000A6                     printf@exp:
   590                           	opt stack 0
   591                           
   592                           ; 2 bytes @ 0x46
   593  0000A6                     	ds	2
   594  0000A8                     printf@flag:
   595                           	opt stack 0
   596                           
   597                           ; 2 bytes @ 0x48
   598  0000A8                     	ds	2
   599  0000AA                     printf@width:
   600                           	opt stack 0
   601                           
   602                           ; 2 bytes @ 0x4A
   603  0000AA                     	ds	2
   604  0000AC                     printf@fval:
   605                           	opt stack 0
   606                           
   607                           ; 3 bytes @ 0x4C
   608  0000AC                     	ds	3
   609  0000AF                     printf@prec:
   610                           	opt stack 0
   611                           
   612                           ; 2 bytes @ 0x4F
   613  0000AF                     	ds	2
   614  0000B1                     printf@c:
   615                           	opt stack 0
   616                           
   617                           ; 1 bytes @ 0x51
   618  0000B1                     	ds	1
   619  0000B2                     ??_checkValue:
   620                           
   621                           ; 1 bytes @ 0x52
   622  0000B2                     	ds	3
   623                           tblptru	equ	0xFF8
   624                           postinc0	equ	0xFEE
   625                           wreg	equ	0xFE8
   626                           
   627                           	psect	cstackCOMRAM
   628  000001                     __pcstackCOMRAM:
   629                           	opt stack 0
   630  000001                     ??_INTERRUPT_InterruptManager:
   631  000001                     
   632                           ; 1 bytes @ 0x0
   633  000001                     	ds	18
   634  000013                     ??_isdigit:
   635  000013                     ??_master_wait:
   636  000013                     ?_strcmp:
   637                           	opt stack 0
   638  000013                     ?___awmod:
   639                           	opt stack 0
   640  000013                     ?___ftpack:
   641                           	opt stack 0
   642  000013                     ?___ftneg:
   643                           	opt stack 0
   644  000013                     ?__tdiv_to_l_:
   645                           	opt stack 0
   646  000013                     ?__div_to_l_:
   647                           	opt stack 0
   648  000013                     ?___lldiv:
   649                           	opt stack 0
   650  000013                     EUSART2_Read@readValue:
   651                           	opt stack 0
   652  000013                     EUSART2_Write@txData:
   653                           	opt stack 0
   654  000013                     ___awmod@dividend:
   655                           	opt stack 0
   656  000013                     __div_to_l_@f1:
   657                           	opt stack 0
   658  000013                     ___ftpack@arg:
   659                           	opt stack 0
   660  000013                     __tdiv_to_l_@f1:
   661                           	opt stack 0
   662  000013                     ___ftge@ff1:
   663                           	opt stack 0
   664  000013                     ___ftneg@f1:
   665                           	opt stack 0
   666  000013                     strcmp@s1:
   667                           	opt stack 0
   668  000013                     ___lldiv@dividend:
   669                           	opt stack 0
   670                           
   671                           ; 4 bytes @ 0x12
   672  000013                     	ds	1
   673  000014                     ?_master_read:
   674                           	opt stack 0
   675  000014                     putch@txData:
   676                           	opt stack 0
   677  000014                     _isdigit$1199:
   678                           	opt stack 0
   679  000014                     master_write@addr:
   680                           	opt stack 0
   681  000014                     master_read@addr:
   682                           	opt stack 0
   683                           
   684                           ; 2 bytes @ 0x13
   685  000014                     	ds	1
   686  000015                     isdigit@c:
   687                           	opt stack 0
   688  000015                     ___awmod@divisor:
   689                           	opt stack 0
   690                           
   691                           ; 2 bytes @ 0x14
   692  000015                     	ds	1
   693  000016                     ___ftpack@exp:
   694                           	opt stack 0
   695  000016                     master_write@data:
   696                           	opt stack 0
   697  000016                     master_read@x:
   698                           	opt stack 0
   699  000016                     __div_to_l_@f2:
   700                           	opt stack 0
   701  000016                     __tdiv_to_l_@f2:
   702                           	opt stack 0
   703  000016                     ___ftge@ff2:
   704                           	opt stack 0
   705  000016                     strcmp@s2:
   706                           	opt stack 0
   707                           
   708                           ; 3 bytes @ 0x15
   709  000016                     	ds	1
   710  000017                     ___awmod@counter:
   711                           	opt stack 0
   712  000017                     ___ftpack@sign:
   713                           	opt stack 0
   714  000017                     ___lldiv@divisor:
   715                           	opt stack 0
   716                           
   717                           ; 4 bytes @ 0x16
   718  000017                     	ds	1
   719  000018                     ??___ftpack:
   720  000018                     ?_retrive_data:
   721                           	opt stack 0
   722  000018                     ___awmod@sign:
   723                           	opt stack 0
   724  000018                     retrive_data@command:
   725                           	opt stack 0
   726                           
   727                           ; 2 bytes @ 0x17
   728  000018                     	ds	1
   729  000019                     ??_strcmp:
   730  000019                     ??__tdiv_to_l_:
   731  000019                     ??___ftge:
   732  000019                     ?___awdiv:
   733                           	opt stack 0
   734  000019                     ___awdiv@dividend:
   735                           	opt stack 0
   736  000019                     __div_to_l_@quot:
   737                           	opt stack 0
   738                           
   739                           ; 4 bytes @ 0x18
   740  000019                     	ds	1
   741  00001A                     ??_retrive_data:
   742  00001A                     strcmp@r:
   743                           	opt stack 0
   744                           
   745                           ; 1 bytes @ 0x19
   746  00001A                     	ds	1
   747  00001B                     ?___awtoft:
   748                           	opt stack 0
   749  00001B                     ?___lltoft:
   750                           	opt stack 0
   751  00001B                     ?___lwtoft:
   752                           	opt stack 0
   753  00001B                     ___awdiv@divisor:
   754                           	opt stack 0
   755  00001B                     ___awtoft@c:
   756                           	opt stack 0
   757  00001B                     ___lwtoft@c:
   758                           	opt stack 0
   759  00001B                     ___lldiv@quotient:
   760                           	opt stack 0
   761  00001B                     ___lltoft@c:
   762                           	opt stack 0
   763                           
   764                           ; 4 bytes @ 0x1A
   765  00001B                     	ds	1
   766  00001C                     __tdiv_to_l_@quot:
   767                           	opt stack 0
   768                           
   769                           ; 4 bytes @ 0x1B
   770  00001C                     	ds	1
   771  00001D                     ___awdiv@counter:
   772                           	opt stack 0
   773  00001D                     __div_to_l_@cntr:
   774                           	opt stack 0
   775                           
   776                           ; 1 bytes @ 0x1C
   777  00001D                     	ds	1
   778  00001E                     ___awdiv@sign:
   779                           	opt stack 0
   780  00001E                     ___awtoft@sign:
   781                           	opt stack 0
   782  00001E                     __div_to_l_@exp1:
   783                           	opt stack 0
   784                           
   785                           ; 1 bytes @ 0x1D
   786  00001E                     	ds	1
   787  00001F                     ??___lltoft:
   788  00001F                     ___lldiv@counter:
   789                           	opt stack 0
   790  00001F                     ___awdiv@quotient:
   791                           	opt stack 0
   792                           
   793                           ; 2 bytes @ 0x1E
   794  00001F                     	ds	1
   795  000020                     ?___llmod:
   796                           	opt stack 0
   797  000020                     __tdiv_to_l_@cntr:
   798                           	opt stack 0
   799  000020                     ___llmod@dividend:
   800                           	opt stack 0
   801                           
   802                           ; 4 bytes @ 0x1F
   803  000020                     	ds	1
   804  000021                     ?___wmul:
   805                           	opt stack 0
   806  000021                     __tdiv_to_l_@exp1:
   807                           	opt stack 0
   808  000021                     ___wmul@multiplier:
   809                           	opt stack 0
   810                           
   811                           ; 2 bytes @ 0x20
   812  000021                     	ds	2
   813  000023                     ___lltoft@exp:
   814                           	opt stack 0
   815  000023                     ___wmul@multiplicand:
   816                           	opt stack 0
   817                           
   818                           ; 2 bytes @ 0x22
   819  000023                     	ds	1
   820  000024                     ___llmod@divisor:
   821                           	opt stack 0
   822                           
   823                           ; 4 bytes @ 0x23
   824  000024                     	ds	1
   825  000025                     ___wmul@product:
   826                           	opt stack 0
   827                           
   828                           ; 2 bytes @ 0x24
   829  000025                     	ds	2
   830  000027                     ?___ftadd:
   831                           	opt stack 0
   832  000027                     ___ftadd@f1:
   833                           	opt stack 0
   834                           
   835                           ; 3 bytes @ 0x26
   836  000027                     	ds	1
   837  000028                     ___llmod@counter:
   838                           	opt stack 0
   839                           
   840                           ; 1 bytes @ 0x27
   841  000028                     	ds	2
   842  00002A                     ___ftadd@f2:
   843                           	opt stack 0
   844                           
   845                           ; 3 bytes @ 0x29
   846  00002A                     	ds	3
   847  00002D                     ??___ftadd:
   848                           
   849                           ; 1 bytes @ 0x2C
   850  00002D                     	ds	3
   851  000030                     ___ftadd@sign:
   852                           	opt stack 0
   853                           
   854                           ; 1 bytes @ 0x2F
   855  000030                     	ds	1
   856  000031                     ___ftadd@exp2:
   857                           	opt stack 0
   858                           
   859                           ; 1 bytes @ 0x30
   860  000031                     	ds	1
   861  000032                     ___ftadd@exp1:
   862                           	opt stack 0
   863                           
   864                           ; 1 bytes @ 0x31
   865  000032                     	ds	1
   866  000033                     ?___ftdiv:
   867                           	opt stack 0
   868  000033                     ?___ftsub:
   869                           	opt stack 0
   870  000033                     ___ftdiv@f1:
   871                           	opt stack 0
   872  000033                     ___ftsub@f1:
   873                           	opt stack 0
   874                           
   875                           ; 3 bytes @ 0x32
   876  000033                     	ds	3
   877  000036                     ___ftdiv@f2:
   878                           	opt stack 0
   879  000036                     ___ftsub@f2:
   880                           	opt stack 0
   881                           
   882                           ; 3 bytes @ 0x35
   883  000036                     	ds	3
   884  000039                     tblptru	equ	0xFF8
   885                           postinc0	equ	0xFEE
   886                           wreg	equ	0xFE8
   887                           
   888                           ; 1 bytes @ 0x38
   889 ;;
   890 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   891 ;;
   892 ;; *************** function _main *****************
   893 ;; Defined at:
   894 ;;		line 238 in file "main.c"
   895 ;; Parameters:    Size  Location     Type
   896 ;;		None
   897 ;; Auto vars:     Size  Location     Type
   898 ;;		None
   899 ;; Return value:  Size  Location     Type
   900 ;;                  1    wreg      void 
   901 ;; Registers used:
   902 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   903 ;; Tracked objects:
   904 ;;		On entry : 0/0
   905 ;;		On exit  : 0/0
   906 ;;		Unchanged: 0/0
   907 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   908 ;;      Params:         0       0       0       0       0       0       0
   909 ;;      Locals:         0       0       0       0       0       0       0
   910 ;;      Temps:          0       0       0       0       0       0       0
   911 ;;      Totals:         0       0       0       0       0       0       0
   912 ;;Total ram usage:        0 bytes
   913 ;; Hardware stack levels required when called:    7
   914 ;; This function calls:
   915 ;;		_SYSTEM_Initialize
   916 ;;		_carbonMeasurement
   917 ;;		_checkValue
   918 ;;		_master_write
   919 ;;		_printf
   920 ;;		_retrive_data
   921 ;;		_salinityMeasurement
   922 ;;		_temperatureMeasurementC
   923 ;;		_temperatureMeasurementF
   924 ;; This function is called by:
   925 ;;		Startup code after reset
   926 ;; This function uses a non-reentrant model
   927 ;;
   928                           
   929                           	psect	text0
   930  001BF4                     __ptext0:
   931                           	opt stack 0
   932  001BF4                     _main:
   933                           	opt stack 24
   934                           
   935                           ;main.c: 241: SYSTEM_Initialize();
   936                           
   937                           ;incstack = 0
   938  001BF4  EC79  F018         	call	_SYSTEM_Initialize	;wreg free
   939                           
   940                           ;main.c: 260: (INTCONbits.GIE = 1);
   941  001BF8  8EF2               	bsf	intcon,7,c	;volatile
   942                           
   943                           ;main.c: 266: (INTCONbits.PEIE = 1);
   944  001BFA  8CF2               	bsf	intcon,6,c	;volatile
   945                           
   946                           ;main.c: 271: OSCCONbits.IRCF=0b110;
   947  001BFC  50D3               	movf	4051,w,c	;volatile
   948  001BFE  0B8F               	andlw	-113
   949  001C00  0960               	iorlw	96
   950  001C02  6ED3               	movwf	4051,c	;volatile
   951                           
   952                           ;main.c: 273: SSP1CON1bits.SSPEN=1;
   953  001C04  8AC6               	bsf	4038,5,c	;volatile
   954                           
   955                           ;main.c: 274: SSP1CON1bits.SSPM=0b1000;
   956  001C06  50C6               	movf	4038,w,c	;volatile
   957  001C08  0BF0               	andlw	-16
   958  001C0A  0908               	iorlw	8
   959  001C0C  6EC6               	movwf	4038,c	;volatile
   960                           
   961                           ;main.c: 275: SSP1CON1bits.WCOL=0;
   962  001C0E  9EC6               	bcf	4038,7,c	;volatile
   963                           
   964                           ;main.c: 276: ANSELCbits.ANSC3=0;
   965  001C10  010F               	movlb	15	; () banked
   966  001C12  973A               	bcf	58,3,b	;volatile
   967                           
   968                           ; BSR set to: 15
   969                           ;main.c: 277: ANSELCbits.ANSC4=0;
   970  001C14  010F               	movlb	15	; () banked
   971  001C16  993A               	bcf	58,4,b	;volatile
   972                           
   973                           ; BSR set to: 15
   974                           ;main.c: 278: TRISCbits.RC3=1;
   975  001C18  8694               	bsf	3988,3,c	;volatile
   976                           
   977                           ; BSR set to: 15
   978                           ;main.c: 279: TRISCbits.RC4=1;
   979  001C1A  8894               	bsf	3988,4,c	;volatile
   980                           
   981                           ; BSR set to: 15
   982                           ;main.c: 280: SSP1CON2=0;
   983  001C1C  0E00               	movlw	0
   984  001C1E  6EC5               	movwf	4037,c	;volatile
   985                           
   986                           ; BSR set to: 15
   987                           ;main.c: 281: SSP1ADD=(8000000/(4*100000))-1;
   988  001C20  0E13               	movlw	19
   989  001C22  6EC8               	movwf	4040,c	;volatile
   990                           
   991                           ; BSR set to: 15
   992                           ;main.c: 282: SSP1STAT=0;
   993  001C24  0E00               	movlw	0
   994  001C26  6EC7               	movwf	4039,c	;volatile
   995                           
   996                           ; BSR set to: 15
   997                           ;main.c: 284: INTCONbits.GIE=1;
   998  001C28  8EF2               	bsf	intcon,7,c	;volatile
   999                           
  1000                           ; BSR set to: 15
  1001                           ;main.c: 285: INTCONbits.INT0IE=1;
  1002  001C2A  88F2               	bsf	intcon,4,c	;volatile
  1003                           
  1004                           ; BSR set to: 15
  1005                           ;main.c: 286: INTCON3bits.INT1IE=1;
  1006  001C2C  86F0               	bsf	intcon3,3,c	;volatile
  1007                           
  1008                           ; BSR set to: 15
  1009                           ;main.c: 287: INTCONbits.INT0IF=0;
  1010  001C2E  92F2               	bcf	intcon,1,c	;volatile
  1011                           
  1012                           ; BSR set to: 15
  1013                           ;main.c: 288: INTCON3bits.INT1IF=0;
  1014  001C30  90F0               	bcf	intcon3,0,c	;volatile
  1015                           
  1016                           ; BSR set to: 15
  1017                           ;main.c: 289: INTCON2bits.INTEDG0=1;
  1018  001C32  8CF1               	bsf	intcon2,6,c	;volatile
  1019                           
  1020                           ; BSR set to: 15
  1021                           ;main.c: 290: INTCON2bits.INTEDG1=1;
  1022  001C34  8AF1               	bsf	intcon2,5,c	;volatile
  1023                           
  1024                           ; BSR set to: 15
  1025                           ;main.c: 292: TRISA=0x00;
  1026  001C36  0E00               	movlw	0
  1027  001C38  6E92               	movwf	3986,c	;volatile
  1028                           
  1029                           ; BSR set to: 15
  1030                           ;main.c: 293: ANSELA=0x00;
  1031  001C3A  0E00               	movlw	0
  1032  001C3C  010F               	movlb	15	; () banked
  1033  001C3E  6F38               	movwf	56,b	;volatile
  1034                           
  1035                           ; BSR set to: 15
  1036                           ;main.c: 294: TRISB=0b10000000;
  1037  001C40  0E80               	movlw	128
  1038  001C42  6E93               	movwf	3987,c	;volatile
  1039                           
  1040                           ; BSR set to: 15
  1041                           ;main.c: 295: ANSELB=0x00;
  1042  001C44  0E00               	movlw	0
  1043  001C46  010F               	movlb	15	; () banked
  1044  001C48  6F39               	movwf	57,b	;volatile
  1045  001C4A                     
  1046                           ;main.c: 298: {
  1047                           ;main.c: 299: checkValue();
  1048                           
  1049                           ; BSR set to: 15
  1050  001C4A  EC3C  F00B         	call	_checkValue	;wreg free
  1051                           
  1052                           ;main.c: 300: if(CMD==1){
  1053  001C4E  043F               	decf	_CMD,w,c
  1054  001C50  1040               	iorwf	_CMD+1,w,c
  1055  001C52  A4D8               	btfss	status,2,c
  1056  001C54  D00B               	goto	l280
  1057                           
  1058                           ;main.c: 301: master_write(0x80,1);
  1059  001C56  0E00               	movlw	0
  1060  001C58  6E15               	movwf	master_write@addr+1,c
  1061  001C5A  0E80               	movlw	128
  1062  001C5C  6E14               	movwf	master_write@addr,c
  1063  001C5E  0E00               	movlw	0
  1064  001C60  6E17               	movwf	master_write@data+1,c
  1065  001C62  0E01               	movlw	1
  1066  001C64  6E16               	movwf	master_write@data,c
  1067  001C66  ECBC  F017         	call	_master_write	;wreg free
  1068                           
  1069                           ;main.c: 302: }
  1070  001C6A  D0AF               	goto	l296
  1071  001C6C                     l280:
  1072                           
  1073                           ;main.c: 303: else if(CMD == 2)
  1074  001C6C  0E02               	movlw	2
  1075  001C6E  183F               	xorwf	_CMD,w,c
  1076  001C70  1040               	iorwf	_CMD+1,w,c
  1077  001C72  A4D8               	btfss	status,2,c
  1078  001C74  D017               	goto	l282
  1079                           
  1080                           ;main.c: 304: {
  1081                           ;main.c: 305: data = retrive_data(CMD);
  1082  001C76  C03F  F018         	movff	_CMD,retrive_data@command
  1083  001C7A  C040  F019         	movff	_CMD+1,retrive_data@command+1
  1084  001C7E  ECAC  F016         	call	_retrive_data	;wreg free
  1085  001C82  C018  F03D         	movff	?_retrive_data,_data
  1086  001C86  C019  F03E         	movff	?_retrive_data+1,_data+1
  1087                           
  1088                           ;main.c: 306: value = temperatureMeasurementC(data);
  1089  001C8A  C03D  F08E         	movff	_data,temperatureMeasurementC@x
  1090  001C8E  C03E  F08F         	movff	_data+1,temperatureMeasurementC@x+1
  1091  001C92  EC8A  F014         	call	_temperatureMeasurementC	;wreg free
  1092  001C96  C08E  F0C5         	movff	?_temperatureMeasurementC,_value
  1093  001C9A  C08F  F0C6         	movff	?_temperatureMeasurementC+1,_value+1
  1094  001C9E  C090  F0C7         	movff	?_temperatureMeasurementC+2,_value+2
  1095                           
  1096                           ;main.c: 307: }
  1097  001CA2  D093               	goto	l296
  1098  001CA4                     l282:
  1099                           
  1100                           ;main.c: 308: else if(CMD == 3)
  1101  001CA4  0E03               	movlw	3
  1102  001CA6  183F               	xorwf	_CMD,w,c
  1103  001CA8  1040               	iorwf	_CMD+1,w,c
  1104  001CAA  A4D8               	btfss	status,2,c
  1105  001CAC  D017               	goto	l284
  1106                           
  1107                           ;main.c: 309: {
  1108                           ;main.c: 310: data = retrive_data(CMD);
  1109  001CAE  C03F  F018         	movff	_CMD,retrive_data@command
  1110  001CB2  C040  F019         	movff	_CMD+1,retrive_data@command+1
  1111  001CB6  ECAC  F016         	call	_retrive_data	;wreg free
  1112  001CBA  C018  F03D         	movff	?_retrive_data,_data
  1113  001CBE  C019  F03E         	movff	?_retrive_data+1,_data+1
  1114                           
  1115                           ;main.c: 311: value = temperatureMeasurementF(data);
  1116  001CC2  C03D  F08E         	movff	_data,temperatureMeasurementF@x
  1117  001CC6  C03E  F08F         	movff	_data+1,temperatureMeasurementF@x+1
  1118  001CCA  EC5D  F012         	call	_temperatureMeasurementF	;wreg free
  1119  001CCE  C08E  F0C5         	movff	?_temperatureMeasurementF,_value
  1120  001CD2  C08F  F0C6         	movff	?_temperatureMeasurementF+1,_value+1
  1121  001CD6  C090  F0C7         	movff	?_temperatureMeasurementF+2,_value+2
  1122                           
  1123                           ;main.c: 312: }
  1124  001CDA  D077               	goto	l296
  1125  001CDC                     l284:
  1126                           
  1127                           ;main.c: 313: else if(CMD == 4)
  1128  001CDC  0E04               	movlw	4
  1129  001CDE  183F               	xorwf	_CMD,w,c
  1130  001CE0  1040               	iorwf	_CMD+1,w,c
  1131  001CE2  A4D8               	btfss	status,2,c
  1132  001CE4  D017               	goto	l286
  1133                           
  1134                           ;main.c: 314: {
  1135                           ;main.c: 315: data = retrive_data(CMD);
  1136  001CE6  C03F  F018         	movff	_CMD,retrive_data@command
  1137  001CEA  C040  F019         	movff	_CMD+1,retrive_data@command+1
  1138  001CEE  ECAC  F016         	call	_retrive_data	;wreg free
  1139  001CF2  C018  F03D         	movff	?_retrive_data,_data
  1140  001CF6  C019  F03E         	movff	?_retrive_data+1,_data+1
  1141                           
  1142                           ;main.c: 316: value = carbonMeasurement(data);
  1143  001CFA  C03D  F078         	movff	_data,carbonMeasurement@x
  1144  001CFE  C03E  F079         	movff	_data+1,carbonMeasurement@x+1
  1145  001D02  EC78  F013         	call	_carbonMeasurement	;wreg free
  1146  001D06  C078  F0C5         	movff	?_carbonMeasurement,_value
  1147  001D0A  C079  F0C6         	movff	?_carbonMeasurement+1,_value+1
  1148  001D0E  C07A  F0C7         	movff	?_carbonMeasurement+2,_value+2
  1149                           
  1150                           ;main.c: 317: }
  1151  001D12  D05B               	goto	l296
  1152  001D14                     l286:
  1153                           
  1154                           ;main.c: 318: else if(CMD == 5)
  1155  001D14  0E05               	movlw	5
  1156  001D16  183F               	xorwf	_CMD,w,c
  1157  001D18  1040               	iorwf	_CMD+1,w,c
  1158  001D1A  A4D8               	btfss	status,2,c
  1159  001D1C  D017               	goto	l288
  1160                           
  1161                           ;main.c: 319: {
  1162                           ;main.c: 320: data = retrive_data(CMD);
  1163  001D1E  C03F  F018         	movff	_CMD,retrive_data@command
  1164  001D22  C040  F019         	movff	_CMD+1,retrive_data@command+1
  1165  001D26  ECAC  F016         	call	_retrive_data	;wreg free
  1166  001D2A  C018  F03D         	movff	?_retrive_data,_data
  1167  001D2E  C019  F03E         	movff	?_retrive_data+1,_data+1
  1168                           
  1169                           ;main.c: 321: value = salinityMeasurement(data);
  1170  001D32  C03D  F078         	movff	_data,salinityMeasurement@x
  1171  001D36  C03E  F079         	movff	_data+1,salinityMeasurement@x+1
  1172  001D3A  ECEE  F012         	call	_salinityMeasurement	;wreg free
  1173  001D3E  C078  F0C5         	movff	?_salinityMeasurement,_value
  1174  001D42  C079  F0C6         	movff	?_salinityMeasurement+1,_value+1
  1175  001D46  C07A  F0C7         	movff	?_salinityMeasurement+2,_value+2
  1176                           
  1177                           ;main.c: 322: }
  1178  001D4A  D03F               	goto	l296
  1179  001D4C                     l288:
  1180                           
  1181                           ;main.c: 323: else if(CMD==6){
  1182  001D4C  0E06               	movlw	6
  1183  001D4E  183F               	xorwf	_CMD,w,c
  1184  001D50  1040               	iorwf	_CMD+1,w,c
  1185  001D52  A4D8               	btfss	status,2,c
  1186  001D54  D00B               	goto	l290
  1187                           
  1188                           ;main.c: 324: master_write(0x80,6);
  1189  001D56  0E00               	movlw	0
  1190  001D58  6E15               	movwf	master_write@addr+1,c
  1191  001D5A  0E80               	movlw	128
  1192  001D5C  6E14               	movwf	master_write@addr,c
  1193  001D5E  0E00               	movlw	0
  1194  001D60  6E17               	movwf	master_write@data+1,c
  1195  001D62  0E06               	movlw	6
  1196  001D64  6E16               	movwf	master_write@data,c
  1197  001D66  ECBC  F017         	call	_master_write	;wreg free
  1198                           
  1199                           ;main.c: 325: }
  1200  001D6A  D02F               	goto	l296
  1201  001D6C                     l290:
  1202                           
  1203                           ;main.c: 326: else if(CMD==7){
  1204  001D6C  0E07               	movlw	7
  1205  001D6E  183F               	xorwf	_CMD,w,c
  1206  001D70  1040               	iorwf	_CMD+1,w,c
  1207  001D72  A4D8               	btfss	status,2,c
  1208  001D74  D00B               	goto	l292
  1209                           
  1210                           ;main.c: 327: master_write(0x80,7);
  1211  001D76  0E00               	movlw	0
  1212  001D78  6E15               	movwf	master_write@addr+1,c
  1213  001D7A  0E80               	movlw	128
  1214  001D7C  6E14               	movwf	master_write@addr,c
  1215  001D7E  0E00               	movlw	0
  1216  001D80  6E17               	movwf	master_write@data+1,c
  1217  001D82  0E07               	movlw	7
  1218  001D84  6E16               	movwf	master_write@data,c
  1219  001D86  ECBC  F017         	call	_master_write	;wreg free
  1220                           
  1221                           ;main.c: 328: }
  1222  001D8A  D01F               	goto	l296
  1223  001D8C                     l292:
  1224                           
  1225                           ;main.c: 329: else if(CMD==8){
  1226  001D8C  0E08               	movlw	8
  1227  001D8E  183F               	xorwf	_CMD,w,c
  1228  001D90  1040               	iorwf	_CMD+1,w,c
  1229  001D92  A4D8               	btfss	status,2,c
  1230  001D94  D00B               	goto	l294
  1231                           
  1232                           ;main.c: 330: master_write(0x80,8);
  1233  001D96  0E00               	movlw	0
  1234  001D98  6E15               	movwf	master_write@addr+1,c
  1235  001D9A  0E80               	movlw	128
  1236  001D9C  6E14               	movwf	master_write@addr,c
  1237  001D9E  0E00               	movlw	0
  1238  001DA0  6E17               	movwf	master_write@data+1,c
  1239  001DA2  0E08               	movlw	8
  1240  001DA4  6E16               	movwf	master_write@data,c
  1241  001DA6  ECBC  F017         	call	_master_write	;wreg free
  1242                           
  1243                           ;main.c: 331: }
  1244  001DAA  D00F               	goto	l296
  1245  001DAC                     l294:
  1246                           
  1247                           ;main.c: 332: else if(CMD==9){
  1248  001DAC  0E09               	movlw	9
  1249  001DAE  183F               	xorwf	_CMD,w,c
  1250  001DB0  1040               	iorwf	_CMD+1,w,c
  1251  001DB2  A4D8               	btfss	status,2,c
  1252  001DB4  D00A               	goto	l296
  1253                           
  1254                           ;main.c: 333: master_write(0x80,9);
  1255  001DB6  0E00               	movlw	0
  1256  001DB8  6E15               	movwf	master_write@addr+1,c
  1257  001DBA  0E80               	movlw	128
  1258  001DBC  6E14               	movwf	master_write@addr,c
  1259  001DBE  0E00               	movlw	0
  1260  001DC0  6E17               	movwf	master_write@data+1,c
  1261  001DC2  0E09               	movlw	9
  1262  001DC4  6E16               	movwf	master_write@data,c
  1263  001DC6  ECBC  F017         	call	_master_write	;wreg free
  1264  001DCA                     l296:
  1265                           
  1266                           ;main.c: 334: }
  1267                           ;main.c: 335: if(value!=0){
  1268  001DCA  0100               	movlb	0	; () banked
  1269  001DCC  51C5               	movf	_value& (0+255),w,b
  1270  001DCE  0100               	movlb	0	; () banked
  1271  001DD0  11C6               	iorwf	(_value+1)& (0+255),w,b
  1272  001DD2  0100               	movlb	0	; () banked
  1273  001DD4  11C7               	iorwf	(_value+2)& (0+255),w,b
  1274  001DD6  B4D8               	btfsc	status,2,c
  1275  001DD8  D017               	goto	l297
  1276                           
  1277                           ; BSR set to: 0
  1278                           ;main.c: 336: printf("\nData = %0.2f\n", value);
  1279  001DDA  0E87               	movlw	low STR_11
  1280  001DDC  0100               	movlb	0	; () banked
  1281  001DDE  6F8E               	movwf	printf@f& (0+255),b
  1282  001DE0  0E06               	movlw	high STR_11
  1283  001DE2  0100               	movlb	0	; () banked
  1284  001DE4  6F8F               	movwf	(printf@f+1)& (0+255),b
  1285  001DE6  C0C5  F090         	movff	_value,?_printf+2
  1286  001DEA  C0C6  F091         	movff	_value+1,?_printf+3
  1287  001DEE  C0C7  F092         	movff	_value+2,?_printf+4
  1288  001DF2  EC51  F003         	call	_printf	;wreg free
  1289                           
  1290                           ;main.c: 337: value=0;
  1291  001DF6  0E00               	movlw	0
  1292  001DF8  0100               	movlb	0	; () banked
  1293  001DFA  6FC5               	movwf	_value& (0+255),b
  1294  001DFC  0E00               	movlw	0
  1295  001DFE  0100               	movlb	0	; () banked
  1296  001E00  6FC6               	movwf	(_value+1)& (0+255),b
  1297  001E02  0E00               	movlw	0
  1298  001E04  0100               	movlb	0	; () banked
  1299  001E06  6FC7               	movwf	(_value+2)& (0+255),b
  1300  001E08                     l297:
  1301                           
  1302                           ; BSR set to: 0
  1303                           ;main.c: 338: }
  1304                           ;main.c: 340: CMD=0;
  1305                           
  1306                           ; BSR set to: 0
  1307  001E08  0E00               	movlw	0
  1308  001E0A  6E40               	movwf	_CMD+1,c
  1309  001E0C  0E00               	movlw	0
  1310  001E0E  6E3F               	movwf	_CMD,c
  1311                           
  1312                           ; BSR set to: 0
  1313  001E10  D71C               	goto	l279
  1314  001E12                     __end_of_main:
  1315                           	opt stack 0
  1316                           tblptru	equ	0xFF8
  1317                           intcon	equ	0xFF2
  1318                           intcon2	equ	0xFF1
  1319                           intcon3	equ	0xFF0
  1320                           postinc0	equ	0xFEE
  1321                           wreg	equ	0xFE8
  1322                           status	equ	0xFD8
  1323                           
  1324 ;; *************** function _temperatureMeasurementF *****************
  1325 ;; Defined at:
  1326 ;;		line 195 in file "main.c"
  1327 ;; Parameters:    Size  Location     Type
  1328 ;;  x               2   46[BANK0 ] unsigned int 
  1329 ;; Auto vars:     Size  Location     Type
  1330 ;;  Vin             3   49[BANK0 ] float 
  1331 ;;  F               2   54[BANK0 ] unsigned int 
  1332 ;;  temp            2   52[BANK0 ] int 
  1333 ;; Return value:  Size  Location     Type
  1334 ;;                  3   46[BANK0 ] float 
  1335 ;; Registers used:
  1336 ;;		wreg, status,2, status,0, cstack
  1337 ;; Tracked objects:
  1338 ;;		On entry : 0/0
  1339 ;;		On exit  : 0/0
  1340 ;;		Unchanged: 0/0
  1341 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1342 ;;      Params:         0       3       0       0       0       0       0
  1343 ;;      Locals:         0       7       0       0       0       0       0
  1344 ;;      Temps:          0       0       0       0       0       0       0
  1345 ;;      Totals:         0      10       0       0       0       0       0
  1346 ;;Total ram usage:       10 bytes
  1347 ;; Hardware stack levels used:    1
  1348 ;; Hardware stack levels required when called:    4
  1349 ;; This function calls:
  1350 ;;		___awtoft
  1351 ;;		___ftadd
  1352 ;;		___ftdiv
  1353 ;;		___ftmul
  1354 ;;		___fttol
  1355 ;;		___lwtoft
  1356 ;; This function is called by:
  1357 ;;		_main
  1358 ;; This function uses a non-reentrant model
  1359 ;;
  1360                           
  1361                           	psect	text1
  1362  0024BA                     __ptext1:
  1363                           	opt stack 0
  1364  0024BA                     _temperatureMeasurementF:
  1365                           	opt stack 26
  1366                           
  1367                           ;main.c: 197: float Vin = ((float)x / 1023) * 4.75;
  1368                           
  1369                           ; BSR set to: 0
  1370                           ;incstack = 0
  1371  0024BA  0EC0               	movlw	192
  1372  0024BC  6E36               	movwf	___ftdiv@f2,c
  1373  0024BE  0E7F               	movlw	127
  1374  0024C0  6E37               	movwf	___ftdiv@f2+1,c
  1375  0024C2  0E44               	movlw	68
  1376  0024C4  6E38               	movwf	___ftdiv@f2+2,c
  1377  0024C6  C08E  F01B         	movff	temperatureMeasurementF@x,___lwtoft@c
  1378  0024CA  C08F  F01C         	movff	temperatureMeasurementF@x+1,___lwtoft@c+1
  1379  0024CE  EC4F  F018         	call	___lwtoft	;wreg free
  1380  0024D2  C01B  F033         	movff	?___lwtoft,___ftdiv@f1
  1381  0024D6  C01C  F034         	movff	?___lwtoft+1,___ftdiv@f1+1
  1382  0024DA  C01D  F035         	movff	?___lwtoft+2,___ftdiv@f1+2
  1383  0024DE  EC02  F014         	call	___ftdiv	;wreg free
  1384  0024E2  C033  F069         	movff	?___ftdiv,___ftmul@f1
  1385  0024E6  C034  F06A         	movff	?___ftdiv+1,___ftmul@f1+1
  1386  0024EA  C035  F06B         	movff	?___ftdiv+2,___ftmul@f1+2
  1387  0024EE  0E00               	movlw	0
  1388  0024F0  0100               	movlb	0	; () banked
  1389  0024F2  6F6C               	movwf	___ftmul@f2& (0+255),b
  1390  0024F4  0E98               	movlw	152
  1391  0024F6  0100               	movlb	0	; () banked
  1392  0024F8  6F6D               	movwf	(___ftmul@f2+1)& (0+255),b
  1393  0024FA  0E40               	movlw	64
  1394  0024FC  0100               	movlb	0	; () banked
  1395  0024FE  6F6E               	movwf	(___ftmul@f2+2)& (0+255),b
  1396  002500  ECDF  F00F         	call	___ftmul	;wreg free
  1397  002504  C069  F091         	movff	?___ftmul,temperatureMeasurementF@Vin
  1398  002508  C06A  F092         	movff	?___ftmul+1,temperatureMeasurementF@Vin+1
  1399  00250C  C06B  F093         	movff	?___ftmul+2,temperatureMeasurementF@Vin+2
  1400                           
  1401                           ;main.c: 198: int temp = (int)((Vin - 0.0023)/0.0394);
  1402  002510  0E62               	movlw	98
  1403  002512  6E36               	movwf	___ftdiv@f2,c
  1404  002514  0E21               	movlw	33
  1405  002516  6E37               	movwf	___ftdiv@f2+1,c
  1406  002518  0E3D               	movlw	61
  1407  00251A  6E38               	movwf	___ftdiv@f2+2,c
  1408  00251C  0EBC               	movlw	188
  1409  00251E  6E2A               	movwf	___ftadd@f2,c
  1410  002520  0E16               	movlw	22
  1411  002522  6E2B               	movwf	___ftadd@f2+1,c
  1412  002524  0EBB               	movlw	187
  1413  002526  6E2C               	movwf	___ftadd@f2+2,c
  1414  002528  C091  F027         	movff	temperatureMeasurementF@Vin,___ftadd@f1
  1415  00252C  C092  F028         	movff	temperatureMeasurementF@Vin+1,___ftadd@f1+1
  1416  002530  C093  F029         	movff	temperatureMeasurementF@Vin+2,___ftadd@f1+2
  1417  002534  EC09  F00F         	call	___ftadd	;wreg free
  1418  002538  C027  F033         	movff	?___ftadd,___ftdiv@f1
  1419  00253C  C028  F034         	movff	?___ftadd+1,___ftdiv@f1+1
  1420  002540  C029  F035         	movff	?___ftadd+2,___ftdiv@f1+2
  1421  002544  EC02  F014         	call	___ftdiv	;wreg free
  1422  002548  C033  F07F         	movff	?___ftdiv,___fttol@f1
  1423  00254C  C034  F080         	movff	?___ftdiv+1,___fttol@f1+1
  1424  002550  C035  F081         	movff	?___ftdiv+2,___fttol@f1+2
  1425  002554  EC8E  F010         	call	___fttol	;wreg free
  1426  002558  C07F  F094         	movff	?___fttol,temperatureMeasurementF@temp
  1427  00255C  C080  F095         	movff	?___fttol+1,temperatureMeasurementF@temp+1
  1428                           
  1429                           ;main.c: 199: unsigned int F = temp*1.8 + 32;
  1430  002560  0E00               	movlw	0
  1431  002562  6E2A               	movwf	___ftadd@f2,c
  1432  002564  0E00               	movlw	0
  1433  002566  6E2B               	movwf	___ftadd@f2+1,c
  1434  002568  0E42               	movlw	66
  1435  00256A  6E2C               	movwf	___ftadd@f2+2,c
  1436  00256C  0E66               	movlw	102
  1437  00256E  0100               	movlb	0	; () banked
  1438  002570  6F6C               	movwf	___ftmul@f2& (0+255),b
  1439  002572  0EE6               	movlw	230
  1440  002574  0100               	movlb	0	; () banked
  1441  002576  6F6D               	movwf	(___ftmul@f2+1)& (0+255),b
  1442  002578  0E3F               	movlw	63
  1443  00257A  0100               	movlb	0	; () banked
  1444  00257C  6F6E               	movwf	(___ftmul@f2+2)& (0+255),b
  1445  00257E  C094  F01B         	movff	temperatureMeasurementF@temp,___awtoft@c
  1446  002582  C095  F01C         	movff	temperatureMeasurementF@temp+1,___awtoft@c+1
  1447  002586  EC6C  F017         	call	___awtoft	;wreg free
  1448  00258A  C01B  F069         	movff	?___awtoft,___ftmul@f1
  1449  00258E  C01C  F06A         	movff	?___awtoft+1,___ftmul@f1+1
  1450  002592  C01D  F06B         	movff	?___awtoft+2,___ftmul@f1+2
  1451  002596  ECDF  F00F         	call	___ftmul	;wreg free
  1452  00259A  C069  F027         	movff	?___ftmul,___ftadd@f1
  1453  00259E  C06A  F028         	movff	?___ftmul+1,___ftadd@f1+1
  1454  0025A2  C06B  F029         	movff	?___ftmul+2,___ftadd@f1+2
  1455  0025A6  EC09  F00F         	call	___ftadd	;wreg free
  1456  0025AA  C027  F07F         	movff	?___ftadd,___fttol@f1
  1457  0025AE  C028  F080         	movff	?___ftadd+1,___fttol@f1+1
  1458  0025B2  C029  F081         	movff	?___ftadd+2,___fttol@f1+2
  1459  0025B6  EC8E  F010         	call	___fttol	;wreg free
  1460  0025BA  C07F  F096         	movff	?___fttol,temperatureMeasurementF@F
  1461  0025BE  C080  F097         	movff	?___fttol+1,temperatureMeasurementF@F+1
  1462                           
  1463                           ;main.c: 200: return F;
  1464  0025C2  C096  F01B         	movff	temperatureMeasurementF@F,___lwtoft@c
  1465  0025C6  C097  F01C         	movff	temperatureMeasurementF@F+1,___lwtoft@c+1
  1466  0025CA  EC4F  F018         	call	___lwtoft	;wreg free
  1467  0025CE  C01B  F08E         	movff	?___lwtoft,?_temperatureMeasurementF
  1468  0025D2  C01C  F08F         	movff	?___lwtoft+1,?_temperatureMeasurementF+1
  1469  0025D6  C01D  F090         	movff	?___lwtoft+2,?_temperatureMeasurementF+2
  1470  0025DA  0012               	return	
  1471  0025DC                     __end_of_temperatureMeasurementF:
  1472                           	opt stack 0
  1473                           tblptru	equ	0xFF8
  1474                           intcon	equ	0xFF2
  1475                           intcon2	equ	0xFF1
  1476                           intcon3	equ	0xFF0
  1477                           postinc0	equ	0xFEE
  1478                           wreg	equ	0xFE8
  1479                           status	equ	0xFD8
  1480                           
  1481 ;; *************** function ___awtoft *****************
  1482 ;; Defined at:
  1483 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\awtoft.c"
  1484 ;; Parameters:    Size  Location     Type
  1485 ;;  c               2   26[COMRAM] int 
  1486 ;; Auto vars:     Size  Location     Type
  1487 ;;  sign            1   29[COMRAM] unsigned char 
  1488 ;; Return value:  Size  Location     Type
  1489 ;;                  3   26[COMRAM] float 
  1490 ;; Registers used:
  1491 ;;		wreg, status,2, status,0, cstack
  1492 ;; Tracked objects:
  1493 ;;		On entry : 0/0
  1494 ;;		On exit  : 0/0
  1495 ;;		Unchanged: 0/0
  1496 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1497 ;;      Params:         3       0       0       0       0       0       0
  1498 ;;      Locals:         1       0       0       0       0       0       0
  1499 ;;      Temps:          0       0       0       0       0       0       0
  1500 ;;      Totals:         4       0       0       0       0       0       0
  1501 ;;Total ram usage:        4 bytes
  1502 ;; Hardware stack levels used:    1
  1503 ;; Hardware stack levels required when called:    3
  1504 ;; This function calls:
  1505 ;;		___ftpack
  1506 ;; This function is called by:
  1507 ;;		_temperatureMeasurementF
  1508 ;; This function uses a non-reentrant model
  1509 ;;
  1510                           
  1511                           	psect	text2
  1512  002ED8                     __ptext2:
  1513                           	opt stack 0
  1514  002ED8                     ___awtoft:
  1515                           	opt stack 26
  1516                           
  1517                           ;incstack = 0
  1518  002ED8  0E00               	movlw	0
  1519  002EDA  6E1E               	movwf	___awtoft@sign,c
  1520  002EDC  AE1C               	btfss	___awtoft@c+1,7,c
  1521  002EDE  D006               	goto	l635
  1522  002EE0  6C1B               	negf	___awtoft@c,c
  1523  002EE2  1E1C               	comf	___awtoft@c+1,f,c
  1524  002EE4  B0D8               	btfsc	status,0,c
  1525  002EE6  2A1C               	incf	___awtoft@c+1,f,c
  1526  002EE8  0E01               	movlw	1
  1527  002EEA  6E1E               	movwf	___awtoft@sign,c
  1528  002EEC                     l635:
  1529  002EEC  C01B  F013         	movff	___awtoft@c,___ftpack@arg
  1530  002EF0  C01C  F014         	movff	___awtoft@c+1,___ftpack@arg+1
  1531  002EF4  6A15               	clrf	___ftpack@arg+2,c
  1532  002EF6  0E8E               	movlw	142
  1533  002EF8  6E16               	movwf	___ftpack@exp,c
  1534  002EFA  C01E  F017         	movff	___awtoft@sign,___ftpack@sign
  1535  002EFE  ECEA  F014         	call	___ftpack	;wreg free
  1536  002F02  C013  F01B         	movff	?___ftpack,?___awtoft
  1537  002F06  C014  F01C         	movff	?___ftpack+1,?___awtoft+1
  1538  002F0A  C015  F01D         	movff	?___ftpack+2,?___awtoft+2
  1539  002F0E  0012               	return	
  1540  002F10                     __end_of___awtoft:
  1541                           	opt stack 0
  1542                           tblptru	equ	0xFF8
  1543                           intcon	equ	0xFF2
  1544                           intcon2	equ	0xFF1
  1545                           intcon3	equ	0xFF0
  1546                           postinc0	equ	0xFEE
  1547                           wreg	equ	0xFE8
  1548                           status	equ	0xFD8
  1549                           
  1550 ;; *************** function _temperatureMeasurementC *****************
  1551 ;; Defined at:
  1552 ;;		line 188 in file "main.c"
  1553 ;; Parameters:    Size  Location     Type
  1554 ;;  x               2   46[BANK0 ] unsigned int 
  1555 ;; Auto vars:     Size  Location     Type
  1556 ;;  Vin             3   49[BANK0 ] float 
  1557 ;;  temp            2   52[BANK0 ] unsigned int 
  1558 ;; Return value:  Size  Location     Type
  1559 ;;                  3   46[BANK0 ] float 
  1560 ;; Registers used:
  1561 ;;		wreg, status,2, status,0, cstack
  1562 ;; Tracked objects:
  1563 ;;		On entry : 0/0
  1564 ;;		On exit  : 0/0
  1565 ;;		Unchanged: 0/0
  1566 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1567 ;;      Params:         0       3       0       0       0       0       0
  1568 ;;      Locals:         0       5       0       0       0       0       0
  1569 ;;      Temps:          0       0       0       0       0       0       0
  1570 ;;      Totals:         0       8       0       0       0       0       0
  1571 ;;Total ram usage:        8 bytes
  1572 ;; Hardware stack levels used:    1
  1573 ;; Hardware stack levels required when called:    4
  1574 ;; This function calls:
  1575 ;;		___ftadd
  1576 ;;		___ftdiv
  1577 ;;		___ftmul
  1578 ;;		___fttol
  1579 ;;		___lwtoft
  1580 ;; This function is called by:
  1581 ;;		_main
  1582 ;; This function uses a non-reentrant model
  1583 ;;
  1584                           
  1585                           	psect	text3
  1586  002914                     __ptext3:
  1587                           	opt stack 0
  1588  002914                     _temperatureMeasurementC:
  1589                           	opt stack 26
  1590                           
  1591                           ;main.c: 190: float Vin = ((float)x / 1023) * 4.54;
  1592                           
  1593                           ;incstack = 0
  1594  002914  0EC0               	movlw	192
  1595  002916  6E36               	movwf	___ftdiv@f2,c
  1596  002918  0E7F               	movlw	127
  1597  00291A  6E37               	movwf	___ftdiv@f2+1,c
  1598  00291C  0E44               	movlw	68
  1599  00291E  6E38               	movwf	___ftdiv@f2+2,c
  1600  002920  C08E  F01B         	movff	temperatureMeasurementC@x,___lwtoft@c
  1601  002924  C08F  F01C         	movff	temperatureMeasurementC@x+1,___lwtoft@c+1
  1602  002928  EC4F  F018         	call	___lwtoft	;wreg free
  1603  00292C  C01B  F033         	movff	?___lwtoft,___ftdiv@f1
  1604  002930  C01C  F034         	movff	?___lwtoft+1,___ftdiv@f1+1
  1605  002934  C01D  F035         	movff	?___lwtoft+2,___ftdiv@f1+2
  1606  002938  EC02  F014         	call	___ftdiv	;wreg free
  1607  00293C  C033  F069         	movff	?___ftdiv,___ftmul@f1
  1608  002940  C034  F06A         	movff	?___ftdiv+1,___ftmul@f1+1
  1609  002944  C035  F06B         	movff	?___ftdiv+2,___ftmul@f1+2
  1610  002948  0E48               	movlw	72
  1611  00294A  0100               	movlb	0	; () banked
  1612  00294C  6F6C               	movwf	___ftmul@f2& (0+255),b
  1613  00294E  0E91               	movlw	145
  1614  002950  0100               	movlb	0	; () banked
  1615  002952  6F6D               	movwf	(___ftmul@f2+1)& (0+255),b
  1616  002954  0E40               	movlw	64
  1617  002956  0100               	movlb	0	; () banked
  1618  002958  6F6E               	movwf	(___ftmul@f2+2)& (0+255),b
  1619  00295A  ECDF  F00F         	call	___ftmul	;wreg free
  1620  00295E  C069  F091         	movff	?___ftmul,temperatureMeasurementC@Vin
  1621  002962  C06A  F092         	movff	?___ftmul+1,temperatureMeasurementC@Vin+1
  1622  002966  C06B  F093         	movff	?___ftmul+2,temperatureMeasurementC@Vin+2
  1623                           
  1624                           ;main.c: 191: unsigned int temp = (int)((Vin - 0.0023)/0.0394);
  1625  00296A  0E62               	movlw	98
  1626  00296C  6E36               	movwf	___ftdiv@f2,c
  1627  00296E  0E21               	movlw	33
  1628  002970  6E37               	movwf	___ftdiv@f2+1,c
  1629  002972  0E3D               	movlw	61
  1630  002974  6E38               	movwf	___ftdiv@f2+2,c
  1631  002976  0EBC               	movlw	188
  1632  002978  6E2A               	movwf	___ftadd@f2,c
  1633  00297A  0E16               	movlw	22
  1634  00297C  6E2B               	movwf	___ftadd@f2+1,c
  1635  00297E  0EBB               	movlw	187
  1636  002980  6E2C               	movwf	___ftadd@f2+2,c
  1637  002982  C091  F027         	movff	temperatureMeasurementC@Vin,___ftadd@f1
  1638  002986  C092  F028         	movff	temperatureMeasurementC@Vin+1,___ftadd@f1+1
  1639  00298A  C093  F029         	movff	temperatureMeasurementC@Vin+2,___ftadd@f1+2
  1640  00298E  EC09  F00F         	call	___ftadd	;wreg free
  1641  002992  C027  F033         	movff	?___ftadd,___ftdiv@f1
  1642  002996  C028  F034         	movff	?___ftadd+1,___ftdiv@f1+1
  1643  00299A  C029  F035         	movff	?___ftadd+2,___ftdiv@f1+2
  1644  00299E  EC02  F014         	call	___ftdiv	;wreg free
  1645  0029A2  C033  F07F         	movff	?___ftdiv,___fttol@f1
  1646  0029A6  C034  F080         	movff	?___ftdiv+1,___fttol@f1+1
  1647  0029AA  C035  F081         	movff	?___ftdiv+2,___fttol@f1+2
  1648  0029AE  EC8E  F010         	call	___fttol	;wreg free
  1649  0029B2  C07F  F094         	movff	?___fttol,temperatureMeasurementC@temp
  1650  0029B6  C080  F095         	movff	?___fttol+1,temperatureMeasurementC@temp+1
  1651                           
  1652                           ;main.c: 192: return temp;
  1653  0029BA  C094  F01B         	movff	temperatureMeasurementC@temp,___lwtoft@c
  1654  0029BE  C095  F01C         	movff	temperatureMeasurementC@temp+1,___lwtoft@c+1
  1655  0029C2  EC4F  F018         	call	___lwtoft	;wreg free
  1656  0029C6  C01B  F08E         	movff	?___lwtoft,?_temperatureMeasurementC
  1657  0029CA  C01C  F08F         	movff	?___lwtoft+1,?_temperatureMeasurementC+1
  1658  0029CE  C01D  F090         	movff	?___lwtoft+2,?_temperatureMeasurementC+2
  1659  0029D2  0012               	return	
  1660  0029D4                     __end_of_temperatureMeasurementC:
  1661                           	opt stack 0
  1662                           tblptru	equ	0xFF8
  1663                           intcon	equ	0xFF2
  1664                           intcon2	equ	0xFF1
  1665                           intcon3	equ	0xFF0
  1666                           postinc0	equ	0xFEE
  1667                           wreg	equ	0xFE8
  1668                           status	equ	0xFD8
  1669                           
  1670 ;; *************** function _salinityMeasurement *****************
  1671 ;; Defined at:
  1672 ;;		line 211 in file "main.c"
  1673 ;; Parameters:    Size  Location     Type
  1674 ;;  x               2   24[BANK0 ] unsigned int 
  1675 ;; Auto vars:     Size  Location     Type
  1676 ;;  Vin             3   30[BANK0 ] float 
  1677 ;;  salinity        3   27[BANK0 ] float 
  1678 ;; Return value:  Size  Location     Type
  1679 ;;                  3   24[BANK0 ] float 
  1680 ;; Registers used:
  1681 ;;		wreg, status,2, status,0, cstack
  1682 ;; Tracked objects:
  1683 ;;		On entry : 0/0
  1684 ;;		On exit  : 0/0
  1685 ;;		Unchanged: 0/0
  1686 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1687 ;;      Params:         0       3       0       0       0       0       0
  1688 ;;      Locals:         0       6       0       0       0       0       0
  1689 ;;      Temps:          0       0       0       0       0       0       0
  1690 ;;      Totals:         0       9       0       0       0       0       0
  1691 ;;Total ram usage:        9 bytes
  1692 ;; Hardware stack levels used:    1
  1693 ;; Hardware stack levels required when called:    4
  1694 ;; This function calls:
  1695 ;;		___ftadd
  1696 ;;		___ftdiv
  1697 ;;		___ftmul
  1698 ;;		___lwtoft
  1699 ;; This function is called by:
  1700 ;;		_main
  1701 ;; This function uses a non-reentrant model
  1702 ;;
  1703                           
  1704                           	psect	text4
  1705  0025DC                     __ptext4:
  1706                           	opt stack 0
  1707  0025DC                     _salinityMeasurement:
  1708                           	opt stack 26
  1709                           
  1710                           ;main.c: 213: float Vin = ((float)x / 1023) * 4.75;
  1711                           
  1712                           ;incstack = 0
  1713  0025DC  0EC0               	movlw	192
  1714  0025DE  6E36               	movwf	___ftdiv@f2,c
  1715  0025E0  0E7F               	movlw	127
  1716  0025E2  6E37               	movwf	___ftdiv@f2+1,c
  1717  0025E4  0E44               	movlw	68
  1718  0025E6  6E38               	movwf	___ftdiv@f2+2,c
  1719  0025E8  C078  F01B         	movff	salinityMeasurement@x,___lwtoft@c
  1720  0025EC  C079  F01C         	movff	salinityMeasurement@x+1,___lwtoft@c+1
  1721  0025F0  EC4F  F018         	call	___lwtoft	;wreg free
  1722  0025F4  C01B  F033         	movff	?___lwtoft,___ftdiv@f1
  1723  0025F8  C01C  F034         	movff	?___lwtoft+1,___ftdiv@f1+1
  1724  0025FC  C01D  F035         	movff	?___lwtoft+2,___ftdiv@f1+2
  1725  002600  EC02  F014         	call	___ftdiv	;wreg free
  1726  002604  C033  F069         	movff	?___ftdiv,___ftmul@f1
  1727  002608  C034  F06A         	movff	?___ftdiv+1,___ftmul@f1+1
  1728  00260C  C035  F06B         	movff	?___ftdiv+2,___ftmul@f1+2
  1729  002610  0E00               	movlw	0
  1730  002612  0100               	movlb	0	; () banked
  1731  002614  6F6C               	movwf	___ftmul@f2& (0+255),b
  1732  002616  0E98               	movlw	152
  1733  002618  0100               	movlb	0	; () banked
  1734  00261A  6F6D               	movwf	(___ftmul@f2+1)& (0+255),b
  1735  00261C  0E40               	movlw	64
  1736  00261E  0100               	movlb	0	; () banked
  1737  002620  6F6E               	movwf	(___ftmul@f2+2)& (0+255),b
  1738  002622  ECDF  F00F         	call	___ftmul	;wreg free
  1739  002626  C069  F07E         	movff	?___ftmul,salinityMeasurement@Vin
  1740  00262A  C06A  F07F         	movff	?___ftmul+1,salinityMeasurement@Vin+1
  1741  00262E  C06B  F080         	movff	?___ftmul+2,salinityMeasurement@Vin+2
  1742                           
  1743                           ;main.c: 214: float Vin = 40.0*Vin + 100.0;
  1744  002632  0E00               	movlw	0
  1745  002634  0100               	movlb	0	; () banked
  1746  002636  6F6C               	movwf	___ftmul@f2& (0+255),b
  1747  002638  0E20               	movlw	32
  1748  00263A  0100               	movlb	0	; () banked
  1749  00263C  6F6D               	movwf	(___ftmul@f2+1)& (0+255),b
  1750  00263E  0E42               	movlw	66
  1751  002640  0100               	movlb	0	; () banked
  1752  002642  6F6E               	movwf	(___ftmul@f2+2)& (0+255),b
  1753  002644  C07E  F069         	movff	salinityMeasurement@Vin,___ftmul@f1
  1754  002648  C07F  F06A         	movff	salinityMeasurement@Vin+1,___ftmul@f1+1
  1755  00264C  C080  F06B         	movff	salinityMeasurement@Vin+2,___ftmul@f1+2
  1756  002650  ECDF  F00F         	call	___ftmul	;wreg free
  1757  002654  C069  F027         	movff	?___ftmul,___ftadd@f1
  1758  002658  C06A  F028         	movff	?___ftmul+1,___ftadd@f1+1
  1759  00265C  C06B  F029         	movff	?___ftmul+2,___ftadd@f1+2
  1760  002660  0E00               	movlw	0
  1761  002662  6E2A               	movwf	___ftadd@f2,c
  1762  002664  0EC8               	movlw	200
  1763  002666  6E2B               	movwf	___ftadd@f2+1,c
  1764  002668  0E42               	movlw	66
  1765  00266A  6E2C               	movwf	___ftadd@f2+2,c
  1766  00266C  EC09  F00F         	call	___ftadd	;wreg free
  1767  002670  C027  F07E         	movff	?___ftadd,salinityMeasurement@Vin
  1768  002674  C028  F07F         	movff	?___ftadd+1,salinityMeasurement@Vin+1
  1769  002678  C029  F080         	movff	?___ftadd+2,salinityMeasurement@Vin+2
  1770                           
  1771                           ;main.c: 215: float salinity = (9*Vin/40) - 35/2;
  1772  00267C  0E00               	movlw	0
  1773  00267E  6E36               	movwf	___ftdiv@f2,c
  1774  002680  0E20               	movlw	32
  1775  002682  6E37               	movwf	___ftdiv@f2+1,c
  1776  002684  0E42               	movlw	66
  1777  002686  6E38               	movwf	___ftdiv@f2+2,c
  1778  002688  0E00               	movlw	0
  1779  00268A  0100               	movlb	0	; () banked
  1780  00268C  6F6C               	movwf	___ftmul@f2& (0+255),b
  1781  00268E  0E10               	movlw	16
  1782  002690  0100               	movlb	0	; () banked
  1783  002692  6F6D               	movwf	(___ftmul@f2+1)& (0+255),b
  1784  002694  0E41               	movlw	65
  1785  002696  0100               	movlb	0	; () banked
  1786  002698  6F6E               	movwf	(___ftmul@f2+2)& (0+255),b
  1787  00269A  C07E  F069         	movff	salinityMeasurement@Vin,___ftmul@f1
  1788  00269E  C07F  F06A         	movff	salinityMeasurement@Vin+1,___ftmul@f1+1
  1789  0026A2  C080  F06B         	movff	salinityMeasurement@Vin+2,___ftmul@f1+2
  1790  0026A6  ECDF  F00F         	call	___ftmul	;wreg free
  1791  0026AA  C069  F033         	movff	?___ftmul,___ftdiv@f1
  1792  0026AE  C06A  F034         	movff	?___ftmul+1,___ftdiv@f1+1
  1793  0026B2  C06B  F035         	movff	?___ftmul+2,___ftdiv@f1+2
  1794  0026B6  EC02  F014         	call	___ftdiv	;wreg free
  1795  0026BA  C033  F027         	movff	?___ftdiv,___ftadd@f1
  1796  0026BE  C034  F028         	movff	?___ftdiv+1,___ftadd@f1+1
  1797  0026C2  C035  F029         	movff	?___ftdiv+2,___ftadd@f1+2
  1798  0026C6  0E00               	movlw	0
  1799  0026C8  6E2A               	movwf	___ftadd@f2,c
  1800  0026CA  0E88               	movlw	136
  1801  0026CC  6E2B               	movwf	___ftadd@f2+1,c
  1802  0026CE  0EC1               	movlw	193
  1803  0026D0  6E2C               	movwf	___ftadd@f2+2,c
  1804  0026D2  EC09  F00F         	call	___ftadd	;wreg free
  1805  0026D6  C027  F07B         	movff	?___ftadd,salinityMeasurement@salinity
  1806  0026DA  C028  F07C         	movff	?___ftadd+1,salinityMeasurement@salinity+1
  1807  0026DE  C029  F07D         	movff	?___ftadd+2,salinityMeasurement@salinity+2
  1808                           
  1809                           ;main.c: 216: return salinity;
  1810  0026E2  C07B  F078         	movff	salinityMeasurement@salinity,?_salinityMeasurement
  1811  0026E6  C07C  F079         	movff	salinityMeasurement@salinity+1,?_salinityMeasurement+1
  1812  0026EA  C07D  F07A         	movff	salinityMeasurement@salinity+2,?_salinityMeasurement+2
  1813  0026EE  0012               	return	
  1814  0026F0                     __end_of_salinityMeasurement:
  1815                           	opt stack 0
  1816                           tblptru	equ	0xFF8
  1817                           intcon	equ	0xFF2
  1818                           intcon2	equ	0xFF1
  1819                           intcon3	equ	0xFF0
  1820                           postinc0	equ	0xFEE
  1821                           wreg	equ	0xFE8
  1822                           status	equ	0xFD8
  1823                           
  1824 ;; *************** function _retrive_data *****************
  1825 ;; Defined at:
  1826 ;;		line 231 in file "main.c"
  1827 ;; Parameters:    Size  Location     Type
  1828 ;;  command         2   23[COMRAM] unsigned int 
  1829 ;; Auto vars:     Size  Location     Type
  1830 ;;		None
  1831 ;; Return value:  Size  Location     Type
  1832 ;;                  2   23[COMRAM] unsigned int 
  1833 ;; Registers used:
  1834 ;;		wreg, status,2, status,0, cstack
  1835 ;; Tracked objects:
  1836 ;;		On entry : 0/0
  1837 ;;		On exit  : 0/0
  1838 ;;		Unchanged: 0/0
  1839 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1840 ;;      Params:         2       0       0       0       0       0       0
  1841 ;;      Locals:         0       0       0       0       0       0       0
  1842 ;;      Temps:          2       0       0       0       0       0       0
  1843 ;;      Totals:         4       0       0       0       0       0       0
  1844 ;;Total ram usage:        4 bytes
  1845 ;; Hardware stack levels used:    1
  1846 ;; Hardware stack levels required when called:    4
  1847 ;; This function calls:
  1848 ;;		_master_read
  1849 ;;		_master_write
  1850 ;; This function is called by:
  1851 ;;		_main
  1852 ;; This function uses a non-reentrant model
  1853 ;;
  1854                           
  1855                           	psect	text5
  1856  002D58                     __ptext5:
  1857                           	opt stack 0
  1858  002D58                     _retrive_data:
  1859                           	opt stack 26
  1860                           
  1861                           ;main.c: 232: master_write(0x80,command);
  1862                           
  1863                           ;incstack = 0
  1864  002D58  0E00               	movlw	0
  1865  002D5A  6E15               	movwf	master_write@addr+1,c
  1866  002D5C  0E80               	movlw	128
  1867  002D5E  6E14               	movwf	master_write@addr,c
  1868  002D60  C018  F016         	movff	retrive_data@command,master_write@data
  1869  002D64  C019  F017         	movff	retrive_data@command+1,master_write@data+1
  1870  002D68  ECBC  F017         	call	_master_write	;wreg free
  1871                           
  1872                           ;main.c: 233: part1=master_read(0x81);
  1873  002D6C  0E00               	movlw	0
  1874  002D6E  6E15               	movwf	master_read@addr+1,c
  1875  002D70  0E81               	movlw	129
  1876  002D72  6E14               	movwf	master_read@addr,c
  1877  002D74  EC0A  F017         	call	_master_read	;wreg free
  1878  002D78  C014  F03B         	movff	?_master_read,_part1
  1879  002D7C  C015  F03C         	movff	?_master_read+1,_part1+1
  1880                           
  1881                           ;main.c: 234: part2=master_read(0x81);
  1882  002D80  0E00               	movlw	0
  1883  002D82  6E15               	movwf	master_read@addr+1,c
  1884  002D84  0E81               	movlw	129
  1885  002D86  6E14               	movwf	master_read@addr,c
  1886  002D88  EC0A  F017         	call	_master_read	;wreg free
  1887  002D8C  C014  F039         	movff	?_master_read,_part2
  1888  002D90  C015  F03A         	movff	?_master_read+1,_part2+1
  1889                           
  1890                           ;main.c: 235: data=0;
  1891  002D94  0E00               	movlw	0
  1892  002D96  6E3E               	movwf	_data+1,c
  1893  002D98  0E00               	movlw	0
  1894  002D9A  6E3D               	movwf	_data,c
  1895                           
  1896                           ;main.c: 236: return ((part1 | data) | (part2 << 8));
  1897  002D9C  5039               	movf	_part2,w,c
  1898  002D9E  6E1B               	movwf	(??_retrive_data+1)& (0+255),c
  1899  002DA0  6A1A               	clrf	??_retrive_data& (0+255),c
  1900  002DA2  503B               	movf	_part1,w,c
  1901  002DA4  121A               	iorwf	??_retrive_data,f,c
  1902  002DA6  503C               	movf	_part1+1,w,c
  1903  002DA8  121B               	iorwf	??_retrive_data+1,f,c
  1904  002DAA  503D               	movf	_data,w,c
  1905  002DAC  101A               	iorwf	??_retrive_data,w,c
  1906  002DAE  6E18               	movwf	?_retrive_data,c
  1907  002DB0  503E               	movf	_data+1,w,c
  1908  002DB2  101B               	iorwf	??_retrive_data+1,w,c
  1909  002DB4  6E19               	movwf	?_retrive_data+1,c
  1910  002DB6  0012               	return	
  1911  002DB8                     __end_of_retrive_data:
  1912                           	opt stack 0
  1913                           tblptru	equ	0xFF8
  1914                           intcon	equ	0xFF2
  1915                           intcon2	equ	0xFF1
  1916                           intcon3	equ	0xFF0
  1917                           postinc0	equ	0xFEE
  1918                           wreg	equ	0xFE8
  1919                           status	equ	0xFD8
  1920                           
  1921 ;; *************** function _master_write *****************
  1922 ;; Defined at:
  1923 ;;		line 70 in file "main.c"
  1924 ;; Parameters:    Size  Location     Type
  1925 ;;  addr            2   19[COMRAM] unsigned short 
  1926 ;;  data            2   21[COMRAM] unsigned short 
  1927 ;; Auto vars:     Size  Location     Type
  1928 ;;		None
  1929 ;; Return value:  Size  Location     Type
  1930 ;;                  1    wreg      void 
  1931 ;; Registers used:
  1932 ;;		wreg, status,2, status,0, cstack
  1933 ;; Tracked objects:
  1934 ;;		On entry : 0/0
  1935 ;;		On exit  : 0/0
  1936 ;;		Unchanged: 0/0
  1937 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1938 ;;      Params:         4       0       0       0       0       0       0
  1939 ;;      Locals:         0       0       0       0       0       0       0
  1940 ;;      Temps:          0       0       0       0       0       0       0
  1941 ;;      Totals:         4       0       0       0       0       0       0
  1942 ;;Total ram usage:        4 bytes
  1943 ;; Hardware stack levels used:    1
  1944 ;; Hardware stack levels required when called:    3
  1945 ;; This function calls:
  1946 ;;		_master_wait
  1947 ;; This function is called by:
  1948 ;;		_retrive_data
  1949 ;;		_main
  1950 ;; This function uses a non-reentrant model
  1951 ;;
  1952                           
  1953                           	psect	text6
  1954  002F78                     __ptext6:
  1955                           	opt stack 0
  1956  002F78                     _master_write:
  1957                           	opt stack 26
  1958                           
  1959                           ;main.c: 71: SSP1CON2bits.SEN=1;
  1960                           
  1961                           ;incstack = 0
  1962  002F78  80C5               	bsf	4037,0,c	;volatile
  1963                           
  1964                           ;main.c: 72: master_wait();
  1965  002F7A  EC70  F018         	call	_master_wait	;wreg free
  1966                           
  1967                           ;main.c: 73: PIR1bits.SSP1IF=0;
  1968  002F7E  969E               	bcf	3998,3,c	;volatile
  1969                           
  1970                           ;main.c: 74: SSP1BUF=addr;
  1971  002F80  C014  FFC9         	movff	master_write@addr,4041	;volatile
  1972  002F84  A69E               	btfss	3998,3,c	;volatile
  1973  002F86  D7FE               	goto	l218
  1974                           
  1975                           ;main.c: 76: if(SSP1CON2bits.ACKSTAT==1){
  1976  002F88  ACC5               	btfss	4037,6,c	;volatile
  1977  002F8A  D004               	goto	l220
  1978                           
  1979                           ;main.c: 77: SSP1CON2bits.PEN=1;
  1980  002F8C  84C5               	bsf	4037,2,c	;volatile
  1981  002F8E  A4C5               	btfss	4037,2,c	;volatile
  1982  002F90  0012               	return	
  1983  002F92  D7FD               	goto	l222
  1984  002F94                     l220:
  1985                           
  1986                           ;main.c: 80: }
  1987                           ;main.c: 81: PIR1bits.SSP1IF=0;
  1988  002F94  969E               	bcf	3998,3,c	;volatile
  1989                           
  1990                           ;main.c: 82: SSP1BUF=data;
  1991  002F96  C016  FFC9         	movff	master_write@data,4041	;volatile
  1992  002F9A  A69E               	btfss	3998,3,c	;volatile
  1993  002F9C  D7FE               	goto	l226
  1994                           
  1995                           ;main.c: 84: PIR1bits.SSP1IF=0;
  1996  002F9E  969E               	bcf	3998,3,c	;volatile
  1997                           
  1998                           ;main.c: 86: SSP1CON2bits.PEN=1;
  1999  002FA0  84C5               	bsf	4037,2,c	;volatile
  2000                           
  2001                           ;main.c: 87: master_wait();
  2002  002FA2  EC70  F018         	call	_master_wait	;wreg free
  2003  002FA6  0012               	return		;funcret
  2004  002FA8                     __end_of_master_write:
  2005                           	opt stack 0
  2006                           tblptru	equ	0xFF8
  2007                           intcon	equ	0xFF2
  2008                           intcon2	equ	0xFF1
  2009                           intcon3	equ	0xFF0
  2010                           postinc0	equ	0xFEE
  2011                           wreg	equ	0xFE8
  2012                           status	equ	0xFD8
  2013                           
  2014 ;; *************** function _master_read *****************
  2015 ;; Defined at:
  2016 ;;		line 89 in file "main.c"
  2017 ;; Parameters:    Size  Location     Type
  2018 ;;  addr            2   19[COMRAM] unsigned short 
  2019 ;; Auto vars:     Size  Location     Type
  2020 ;;  x               2   21[COMRAM] unsigned short 
  2021 ;; Return value:  Size  Location     Type
  2022 ;;                  2   19[COMRAM] unsigned short 
  2023 ;; Registers used:
  2024 ;;		wreg, status,2, status,0, cstack
  2025 ;; Tracked objects:
  2026 ;;		On entry : 0/0
  2027 ;;		On exit  : 0/0
  2028 ;;		Unchanged: 0/0
  2029 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2030 ;;      Params:         2       0       0       0       0       0       0
  2031 ;;      Locals:         2       0       0       0       0       0       0
  2032 ;;      Temps:          0       0       0       0       0       0       0
  2033 ;;      Totals:         4       0       0       0       0       0       0
  2034 ;;Total ram usage:        4 bytes
  2035 ;; Hardware stack levels used:    1
  2036 ;; Hardware stack levels required when called:    3
  2037 ;; This function calls:
  2038 ;;		_master_wait
  2039 ;; This function is called by:
  2040 ;;		_retrive_data
  2041 ;; This function uses a non-reentrant model
  2042 ;;
  2043                           
  2044                           	psect	text7
  2045  002E14                     __ptext7:
  2046                           	opt stack 0
  2047  002E14                     _master_read:
  2048                           	opt stack 26
  2049                           
  2050                           ;main.c: 90: unsigned short x;
  2051                           ;main.c: 91: SSP1CON2bits.SEN=1;
  2052                           
  2053                           ;incstack = 0
  2054  002E14  80C5               	bsf	4037,0,c	;volatile
  2055                           
  2056                           ;main.c: 92: master_wait();
  2057  002E16  EC70  F018         	call	_master_wait	;wreg free
  2058                           
  2059                           ;main.c: 93: PIR1bits.SSP1IF=0;
  2060  002E1A  969E               	bcf	3998,3,c	;volatile
  2061                           
  2062                           ;main.c: 94: x=SSP1BUF;
  2063  002E1C  CFC9 F016          	movff	4041,master_read@x	;volatile
  2064  002E20  6A17               	clrf	master_read@x+1,c
  2065                           
  2066                           ;main.c: 95: SSP1BUF=addr;
  2067  002E22  C014  FFC9         	movff	master_read@addr,4041	;volatile
  2068  002E26  A69E               	btfss	3998,3,c	;volatile
  2069  002E28  D7FE               	goto	l231
  2070                           
  2071                           ;main.c: 97: if(SSP1CON2bits.ACKSTAT){
  2072  002E2A  ACC5               	btfss	4037,6,c	;volatile
  2073  002E2C  D008               	goto	l233
  2074                           
  2075                           ;main.c: 98: SSP1CON2bits.PEN=1;
  2076  002E2E  84C5               	bsf	4037,2,c	;volatile
  2077                           
  2078                           ;main.c: 99: master_wait();
  2079  002E30  EC70  F018         	call	_master_wait	;wreg free
  2080                           
  2081                           ;main.c: 100: return 0;
  2082  002E34  0E00               	movlw	0
  2083  002E36  6E15               	movwf	?_master_read+1,c
  2084  002E38  0E00               	movlw	0
  2085  002E3A  6E14               	movwf	?_master_read,c
  2086  002E3C  0012               	return	
  2087  002E3E                     l233:
  2088                           
  2089                           ;main.c: 101: }
  2090                           ;main.c: 102: PIR1bits.SSP1IF=0;
  2091  002E3E  969E               	bcf	3998,3,c	;volatile
  2092                           
  2093                           ;main.c: 103: SSP1CON2bits.RCEN=1;
  2094  002E40  86C5               	bsf	4037,3,c	;volatile
  2095                           
  2096                           ;main.c: 104: master_wait();
  2097  002E42  EC70  F018         	call	_master_wait	;wreg free
  2098                           
  2099                           ;main.c: 105: x=SSP1BUF;
  2100  002E46  CFC9 F016          	movff	4041,master_read@x	;volatile
  2101  002E4A  6A17               	clrf	master_read@x+1,c
  2102                           
  2103                           ;main.c: 106: PIR1bits.SSP1IF=0;
  2104  002E4C  969E               	bcf	3998,3,c	;volatile
  2105                           
  2106                           ;main.c: 109: SSP1CON2bits.PEN=1;
  2107  002E4E  84C5               	bsf	4037,2,c	;volatile
  2108  002E50  B4C5               	btfsc	4037,2,c	;volatile
  2109  002E52  D7FE               	goto	l236
  2110                           
  2111                           ;main.c: 111: return x;
  2112  002E54  C016  F014         	movff	master_read@x,?_master_read
  2113  002E58  C017  F015         	movff	master_read@x+1,?_master_read+1
  2114  002E5C  0012               	return		;funcret
  2115  002E5E                     __end_of_master_read:
  2116                           	opt stack 0
  2117                           tblptru	equ	0xFF8
  2118                           intcon	equ	0xFF2
  2119                           intcon2	equ	0xFF1
  2120                           intcon3	equ	0xFF0
  2121                           postinc0	equ	0xFEE
  2122                           wreg	equ	0xFE8
  2123                           status	equ	0xFD8
  2124                           
  2125 ;; *************** function _master_wait *****************
  2126 ;; Defined at:
  2127 ;;		line 67 in file "main.c"
  2128 ;; Parameters:    Size  Location     Type
  2129 ;;		None
  2130 ;; Auto vars:     Size  Location     Type
  2131 ;;		None
  2132 ;; Return value:  Size  Location     Type
  2133 ;;                  1    wreg      void 
  2134 ;; Registers used:
  2135 ;;		wreg, status,2, status,0
  2136 ;; Tracked objects:
  2137 ;;		On entry : 0/0
  2138 ;;		On exit  : 0/0
  2139 ;;		Unchanged: 0/0
  2140 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2141 ;;      Params:         0       0       0       0       0       0       0
  2142 ;;      Locals:         0       0       0       0       0       0       0
  2143 ;;      Temps:          1       0       0       0       0       0       0
  2144 ;;      Totals:         1       0       0       0       0       0       0
  2145 ;;Total ram usage:        1 bytes
  2146 ;; Hardware stack levels used:    1
  2147 ;; Hardware stack levels required when called:    2
  2148 ;; This function calls:
  2149 ;;		Nothing
  2150 ;; This function is called by:
  2151 ;;		_master_write
  2152 ;;		_master_read
  2153 ;; This function uses a non-reentrant model
  2154 ;;
  2155                           
  2156                           	psect	text8
  2157  0030E0                     __ptext8:
  2158                           	opt stack 0
  2159  0030E0                     _master_wait:
  2160                           	opt stack 26
  2161                           
  2162                           ;main.c: 68: while ((SSPSTAT & 0x04) || (SSPCON2 & 0x1F));
  2163                           
  2164                           ;incstack = 0
  2165  0030E0  B4C7               	btfsc	4039,2,c	;volatile
  2166  0030E2  D7FE               	goto	_master_wait
  2167  0030E4  CFC5 F013          	movff	4037,??_master_wait	;volatile
  2168  0030E8  0E1F               	movlw	31
  2169  0030EA  1613               	andwf	??_master_wait,f,c
  2170  0030EC  B4D8               	btfsc	status,2,c
  2171  0030EE  0012               	return	
  2172  0030F0  D7F7               	goto	_master_wait
  2173  0030F2                     __end_of_master_wait:
  2174                           	opt stack 0
  2175                           tblptru	equ	0xFF8
  2176                           intcon	equ	0xFF2
  2177                           intcon2	equ	0xFF1
  2178                           intcon3	equ	0xFF0
  2179                           postinc0	equ	0xFEE
  2180                           wreg	equ	0xFE8
  2181                           status	equ	0xFD8
  2182                           
  2183 ;; *************** function _checkValue *****************
  2184 ;; Defined at:
  2185 ;;		line 114 in file "main.c"
  2186 ;; Parameters:    Size  Location     Type
  2187 ;;		None
  2188 ;; Auto vars:     Size  Location     Type
  2189 ;;		None
  2190 ;; Return value:  Size  Location     Type
  2191 ;;                  1    wreg      void 
  2192 ;; Registers used:
  2193 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2194 ;; Tracked objects:
  2195 ;;		On entry : 0/0
  2196 ;;		On exit  : 0/0
  2197 ;;		Unchanged: 0/0
  2198 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2199 ;;      Params:         0       0       0       0       0       0       0
  2200 ;;      Locals:         0       0       0       0       0       0       0
  2201 ;;      Temps:          0       3       0       0       0       0       0
  2202 ;;      Totals:         0       3       0       0       0       0       0
  2203 ;;Total ram usage:        3 bytes
  2204 ;; Hardware stack levels used:    1
  2205 ;; Hardware stack levels required when called:    6
  2206 ;; This function calls:
  2207 ;;		_EUSART2_Read
  2208 ;;		_EUSART2_Write
  2209 ;;		_printf
  2210 ;;		_strcmp
  2211 ;; This function is called by:
  2212 ;;		_main
  2213 ;; This function uses a non-reentrant model
  2214 ;;
  2215                           
  2216                           	psect	text9
  2217  001678                     __ptext9:
  2218                           	opt stack 0
  2219  001678                     _checkValue:
  2220                           	opt stack 24
  2221                           
  2222                           ;main.c: 116: if(eusart2RxCount!=0)
  2223                           
  2224                           ;incstack = 0
  2225  001678  5046               	movf	_eusart2RxCount,w,c	;volatile
  2226  00167A  B4D8               	btfsc	status,2,c
  2227  00167C  0012               	return	
  2228                           
  2229                           ;main.c: 117: {
  2230                           ;main.c: 119: ch=EUSART2_Read();
  2231  00167E  EC88  F017         	call	_EUSART2_Read	;wreg free
  2232  001682  0100               	movlb	0	; () banked
  2233  001684  6FB2               	movwf	??_checkValue& (0+255),b
  2234  001686  0100               	movlb	0	; () banked
  2235  001688  51B2               	movf	??_checkValue& (0+255),w,b
  2236  00168A  6E41               	movwf	_ch,c
  2237  00168C  6A42               	clrf	_ch+1,c
  2238                           
  2239                           ;main.c: 121: EUSART2_Write(ch);
  2240  00168E  5041               	movf	_ch,w,c
  2241  001690  EC4F  F017         	call	_EUSART2_Write
  2242                           
  2243                           ;main.c: 138: if(strcmp(ch, '1' ) == 0)
  2244  001694  C041  F0B2         	movff	_ch,??_checkValue
  2245  001698  C042  F0B3         	movff	_ch+1,??_checkValue+1
  2246  00169C  0100               	movlb	0	; () banked
  2247  00169E  6BB4               	clrf	(??_checkValue+2)& (0+255),b
  2248  0016A0  C0B2  F013         	movff	??_checkValue,strcmp@s1
  2249  0016A4  C0B3  F014         	movff	??_checkValue+1,strcmp@s1+1
  2250  0016A8  C0B4  F015         	movff	??_checkValue+2,strcmp@s1+2
  2251  0016AC  0E31               	movlw	49
  2252  0016AE  6E16               	movwf	strcmp@s2,c
  2253  0016B0  0E00               	movlw	0
  2254  0016B2  6E17               	movwf	strcmp@s2+1,c
  2255  0016B4  0E00               	movlw	0
  2256  0016B6  6E18               	movwf	strcmp@s2+2,c
  2257  0016B8  EC44  F016         	call	_strcmp	;wreg free
  2258  0016BC  5013               	movf	?_strcmp,w,c
  2259  0016BE  1014               	iorwf	?_strcmp+1,w,c
  2260  0016C0  A4D8               	btfss	status,2,c
  2261  0016C2  D011               	goto	l241
  2262                           
  2263                           ;main.c: 139: {
  2264                           ;main.c: 140: CMD = 1;
  2265  0016C4  0E00               	movlw	0
  2266  0016C6  6E40               	movwf	_CMD+1,c
  2267  0016C8  0E01               	movlw	1
  2268  0016CA  6E3F               	movwf	_CMD,c
  2269                           
  2270                           ;main.c: 141: printf("\nCMD = %d\n", CMD);
  2271  0016CC  0E96               	movlw	low STR_1
  2272  0016CE  0100               	movlb	0	; () banked
  2273  0016D0  6F8E               	movwf	printf@f& (0+255),b
  2274  0016D2  0E06               	movlw	high STR_1
  2275  0016D4  0100               	movlb	0	; () banked
  2276  0016D6  6F8F               	movwf	(printf@f+1)& (0+255),b
  2277  0016D8  C03F  F090         	movff	_CMD,?_printf+2
  2278  0016DC  C040  F091         	movff	_CMD+1,?_printf+3
  2279  0016E0  EC51  F003         	call	_printf	;wreg free
  2280                           
  2281                           ;main.c: 142: }
  2282  0016E4  0012               	return	
  2283  0016E6                     l241:
  2284                           
  2285                           ;main.c: 143: else if(strcmp(ch, '2') == 0)
  2286  0016E6  C041  F0B2         	movff	_ch,??_checkValue
  2287  0016EA  C042  F0B3         	movff	_ch+1,??_checkValue+1
  2288  0016EE  0100               	movlb	0	; () banked
  2289  0016F0  6BB4               	clrf	(??_checkValue+2)& (0+255),b
  2290  0016F2  C0B2  F013         	movff	??_checkValue,strcmp@s1
  2291  0016F6  C0B3  F014         	movff	??_checkValue+1,strcmp@s1+1
  2292  0016FA  C0B4  F015         	movff	??_checkValue+2,strcmp@s1+2
  2293  0016FE  0E32               	movlw	50
  2294  001700  6E16               	movwf	strcmp@s2,c
  2295  001702  0E00               	movlw	0
  2296  001704  6E17               	movwf	strcmp@s2+1,c
  2297  001706  0E00               	movlw	0
  2298  001708  6E18               	movwf	strcmp@s2+2,c
  2299  00170A  EC44  F016         	call	_strcmp	;wreg free
  2300  00170E  5013               	movf	?_strcmp,w,c
  2301  001710  1014               	iorwf	?_strcmp+1,w,c
  2302  001712  A4D8               	btfss	status,2,c
  2303  001714  D011               	goto	l243
  2304                           
  2305                           ;main.c: 144: {
  2306                           ;main.c: 145: CMD = 2;
  2307  001716  0E00               	movlw	0
  2308  001718  6E40               	movwf	_CMD+1,c
  2309  00171A  0E02               	movlw	2
  2310  00171C  6E3F               	movwf	_CMD,c
  2311                           
  2312                           ;main.c: 146: printf("\nCMD = %d\n", CMD);
  2313  00171E  0E96               	movlw	low STR_1
  2314  001720  0100               	movlb	0	; () banked
  2315  001722  6F8E               	movwf	printf@f& (0+255),b
  2316  001724  0E06               	movlw	high STR_1
  2317  001726  0100               	movlb	0	; () banked
  2318  001728  6F8F               	movwf	(printf@f+1)& (0+255),b
  2319  00172A  C03F  F090         	movff	_CMD,?_printf+2
  2320  00172E  C040  F091         	movff	_CMD+1,?_printf+3
  2321  001732  EC51  F003         	call	_printf	;wreg free
  2322                           
  2323                           ;main.c: 147: }
  2324  001736  0012               	return	
  2325  001738                     l243:
  2326                           
  2327                           ;main.c: 148: else if(strcmp(ch, '3') == 0)
  2328  001738  C041  F0B2         	movff	_ch,??_checkValue
  2329  00173C  C042  F0B3         	movff	_ch+1,??_checkValue+1
  2330  001740  0100               	movlb	0	; () banked
  2331  001742  6BB4               	clrf	(??_checkValue+2)& (0+255),b
  2332  001744  C0B2  F013         	movff	??_checkValue,strcmp@s1
  2333  001748  C0B3  F014         	movff	??_checkValue+1,strcmp@s1+1
  2334  00174C  C0B4  F015         	movff	??_checkValue+2,strcmp@s1+2
  2335  001750  0E33               	movlw	51
  2336  001752  6E16               	movwf	strcmp@s2,c
  2337  001754  0E00               	movlw	0
  2338  001756  6E17               	movwf	strcmp@s2+1,c
  2339  001758  0E00               	movlw	0
  2340  00175A  6E18               	movwf	strcmp@s2+2,c
  2341  00175C  EC44  F016         	call	_strcmp	;wreg free
  2342  001760  5013               	movf	?_strcmp,w,c
  2343  001762  1014               	iorwf	?_strcmp+1,w,c
  2344  001764  A4D8               	btfss	status,2,c
  2345  001766  D011               	goto	l245
  2346                           
  2347                           ;main.c: 149: {
  2348                           ;main.c: 150: CMD = 3;
  2349  001768  0E00               	movlw	0
  2350  00176A  6E40               	movwf	_CMD+1,c
  2351  00176C  0E03               	movlw	3
  2352  00176E  6E3F               	movwf	_CMD,c
  2353                           
  2354                           ;main.c: 151: printf("\nCMD = %d\n", CMD);
  2355  001770  0E96               	movlw	low STR_1
  2356  001772  0100               	movlb	0	; () banked
  2357  001774  6F8E               	movwf	printf@f& (0+255),b
  2358  001776  0E06               	movlw	high STR_1
  2359  001778  0100               	movlb	0	; () banked
  2360  00177A  6F8F               	movwf	(printf@f+1)& (0+255),b
  2361  00177C  C03F  F090         	movff	_CMD,?_printf+2
  2362  001780  C040  F091         	movff	_CMD+1,?_printf+3
  2363  001784  EC51  F003         	call	_printf	;wreg free
  2364                           
  2365                           ;main.c: 152: }
  2366  001788  0012               	return	
  2367  00178A                     l245:
  2368                           
  2369                           ;main.c: 153: else if(strcmp(ch, '4') == 0)
  2370  00178A  C041  F0B2         	movff	_ch,??_checkValue
  2371  00178E  C042  F0B3         	movff	_ch+1,??_checkValue+1
  2372  001792  0100               	movlb	0	; () banked
  2373  001794  6BB4               	clrf	(??_checkValue+2)& (0+255),b
  2374  001796  C0B2  F013         	movff	??_checkValue,strcmp@s1
  2375  00179A  C0B3  F014         	movff	??_checkValue+1,strcmp@s1+1
  2376  00179E  C0B4  F015         	movff	??_checkValue+2,strcmp@s1+2
  2377  0017A2  0E34               	movlw	52
  2378  0017A4  6E16               	movwf	strcmp@s2,c
  2379  0017A6  0E00               	movlw	0
  2380  0017A8  6E17               	movwf	strcmp@s2+1,c
  2381  0017AA  0E00               	movlw	0
  2382  0017AC  6E18               	movwf	strcmp@s2+2,c
  2383  0017AE  EC44  F016         	call	_strcmp	;wreg free
  2384  0017B2  5013               	movf	?_strcmp,w,c
  2385  0017B4  1014               	iorwf	?_strcmp+1,w,c
  2386  0017B6  A4D8               	btfss	status,2,c
  2387  0017B8  D011               	goto	l247
  2388                           
  2389                           ;main.c: 154: {
  2390                           ;main.c: 155: CMD = 4;
  2391  0017BA  0E00               	movlw	0
  2392  0017BC  6E40               	movwf	_CMD+1,c
  2393  0017BE  0E04               	movlw	4
  2394  0017C0  6E3F               	movwf	_CMD,c
  2395                           
  2396                           ;main.c: 156: printf("\nCMD = %d\n", CMD);
  2397  0017C2  0E96               	movlw	low STR_1
  2398  0017C4  0100               	movlb	0	; () banked
  2399  0017C6  6F8E               	movwf	printf@f& (0+255),b
  2400  0017C8  0E06               	movlw	high STR_1
  2401  0017CA  0100               	movlb	0	; () banked
  2402  0017CC  6F8F               	movwf	(printf@f+1)& (0+255),b
  2403  0017CE  C03F  F090         	movff	_CMD,?_printf+2
  2404  0017D2  C040  F091         	movff	_CMD+1,?_printf+3
  2405  0017D6  EC51  F003         	call	_printf	;wreg free
  2406                           
  2407                           ;main.c: 157: }
  2408  0017DA  0012               	return	
  2409  0017DC                     l247:
  2410                           
  2411                           ;main.c: 158: else if(strcmp(ch, '5') == 0)
  2412  0017DC  C041  F0B2         	movff	_ch,??_checkValue
  2413  0017E0  C042  F0B3         	movff	_ch+1,??_checkValue+1
  2414  0017E4  0100               	movlb	0	; () banked
  2415  0017E6  6BB4               	clrf	(??_checkValue+2)& (0+255),b
  2416  0017E8  C0B2  F013         	movff	??_checkValue,strcmp@s1
  2417  0017EC  C0B3  F014         	movff	??_checkValue+1,strcmp@s1+1
  2418  0017F0  C0B4  F015         	movff	??_checkValue+2,strcmp@s1+2
  2419  0017F4  0E35               	movlw	53
  2420  0017F6  6E16               	movwf	strcmp@s2,c
  2421  0017F8  0E00               	movlw	0
  2422  0017FA  6E17               	movwf	strcmp@s2+1,c
  2423  0017FC  0E00               	movlw	0
  2424  0017FE  6E18               	movwf	strcmp@s2+2,c
  2425  001800  EC44  F016         	call	_strcmp	;wreg free
  2426  001804  5013               	movf	?_strcmp,w,c
  2427  001806  1014               	iorwf	?_strcmp+1,w,c
  2428  001808  A4D8               	btfss	status,2,c
  2429  00180A  D011               	goto	l249
  2430                           
  2431                           ;main.c: 159: {
  2432                           ;main.c: 160: CMD = 5;
  2433  00180C  0E00               	movlw	0
  2434  00180E  6E40               	movwf	_CMD+1,c
  2435  001810  0E05               	movlw	5
  2436  001812  6E3F               	movwf	_CMD,c
  2437                           
  2438                           ;main.c: 161: printf("\nCMD = %d\n", CMD);
  2439  001814  0E96               	movlw	low STR_1
  2440  001816  0100               	movlb	0	; () banked
  2441  001818  6F8E               	movwf	printf@f& (0+255),b
  2442  00181A  0E06               	movlw	high STR_1
  2443  00181C  0100               	movlb	0	; () banked
  2444  00181E  6F8F               	movwf	(printf@f+1)& (0+255),b
  2445  001820  C03F  F090         	movff	_CMD,?_printf+2
  2446  001824  C040  F091         	movff	_CMD+1,?_printf+3
  2447  001828  EC51  F003         	call	_printf	;wreg free
  2448                           
  2449                           ;main.c: 162: }
  2450  00182C  0012               	return	
  2451  00182E                     l249:
  2452                           
  2453                           ;main.c: 163: else if(strcmp(ch, 't') == 0)
  2454  00182E  C041  F0B2         	movff	_ch,??_checkValue
  2455  001832  C042  F0B3         	movff	_ch+1,??_checkValue+1
  2456  001836  0100               	movlb	0	; () banked
  2457  001838  6BB4               	clrf	(??_checkValue+2)& (0+255),b
  2458  00183A  C0B2  F013         	movff	??_checkValue,strcmp@s1
  2459  00183E  C0B3  F014         	movff	??_checkValue+1,strcmp@s1+1
  2460  001842  C0B4  F015         	movff	??_checkValue+2,strcmp@s1+2
  2461  001846  0E74               	movlw	116
  2462  001848  6E16               	movwf	strcmp@s2,c
  2463  00184A  0E00               	movlw	0
  2464  00184C  6E17               	movwf	strcmp@s2+1,c
  2465  00184E  0E00               	movlw	0
  2466  001850  6E18               	movwf	strcmp@s2+2,c
  2467  001852  EC44  F016         	call	_strcmp	;wreg free
  2468  001856  5013               	movf	?_strcmp,w,c
  2469  001858  1014               	iorwf	?_strcmp+1,w,c
  2470  00185A  A4D8               	btfss	status,2,c
  2471  00185C  D011               	goto	l251
  2472                           
  2473                           ;main.c: 164: {
  2474                           ;main.c: 165: CMD = 6;
  2475  00185E  0E00               	movlw	0
  2476  001860  6E40               	movwf	_CMD+1,c
  2477  001862  0E06               	movlw	6
  2478  001864  6E3F               	movwf	_CMD,c
  2479                           
  2480                           ;main.c: 166: printf("\nCMD = %d\n", CMD);
  2481  001866  0E96               	movlw	low STR_1
  2482  001868  0100               	movlb	0	; () banked
  2483  00186A  6F8E               	movwf	printf@f& (0+255),b
  2484  00186C  0E06               	movlw	high STR_1
  2485  00186E  0100               	movlb	0	; () banked
  2486  001870  6F8F               	movwf	(printf@f+1)& (0+255),b
  2487  001872  C03F  F090         	movff	_CMD,?_printf+2
  2488  001876  C040  F091         	movff	_CMD+1,?_printf+3
  2489  00187A  EC51  F003         	call	_printf	;wreg free
  2490                           
  2491                           ;main.c: 167: }
  2492  00187E  0012               	return	
  2493  001880                     l251:
  2494                           
  2495                           ;main.c: 168: else if(strcmp(ch, 'f') == 0)
  2496  001880  C041  F0B2         	movff	_ch,??_checkValue
  2497  001884  C042  F0B3         	movff	_ch+1,??_checkValue+1
  2498  001888  0100               	movlb	0	; () banked
  2499  00188A  6BB4               	clrf	(??_checkValue+2)& (0+255),b
  2500  00188C  C0B2  F013         	movff	??_checkValue,strcmp@s1
  2501  001890  C0B3  F014         	movff	??_checkValue+1,strcmp@s1+1
  2502  001894  C0B4  F015         	movff	??_checkValue+2,strcmp@s1+2
  2503  001898  0E66               	movlw	102
  2504  00189A  6E16               	movwf	strcmp@s2,c
  2505  00189C  0E00               	movlw	0
  2506  00189E  6E17               	movwf	strcmp@s2+1,c
  2507  0018A0  0E00               	movlw	0
  2508  0018A2  6E18               	movwf	strcmp@s2+2,c
  2509  0018A4  EC44  F016         	call	_strcmp	;wreg free
  2510  0018A8  5013               	movf	?_strcmp,w,c
  2511  0018AA  1014               	iorwf	?_strcmp+1,w,c
  2512  0018AC  A4D8               	btfss	status,2,c
  2513  0018AE  D011               	goto	l253
  2514                           
  2515                           ;main.c: 169: {
  2516                           ;main.c: 170: CMD = 7;
  2517  0018B0  0E00               	movlw	0
  2518  0018B2  6E40               	movwf	_CMD+1,c
  2519  0018B4  0E07               	movlw	7
  2520  0018B6  6E3F               	movwf	_CMD,c
  2521                           
  2522                           ;main.c: 171: printf("\nCMD = %d\n", CMD);
  2523  0018B8  0E96               	movlw	low STR_1
  2524  0018BA  0100               	movlb	0	; () banked
  2525  0018BC  6F8E               	movwf	printf@f& (0+255),b
  2526  0018BE  0E06               	movlw	high STR_1
  2527  0018C0  0100               	movlb	0	; () banked
  2528  0018C2  6F8F               	movwf	(printf@f+1)& (0+255),b
  2529  0018C4  C03F  F090         	movff	_CMD,?_printf+2
  2530  0018C8  C040  F091         	movff	_CMD+1,?_printf+3
  2531  0018CC  EC51  F003         	call	_printf	;wreg free
  2532                           
  2533                           ;main.c: 172: }
  2534  0018D0  0012               	return	
  2535  0018D2                     l253:
  2536                           
  2537                           ;main.c: 173: else if(strcmp(ch, 'c') == 0)
  2538  0018D2  C041  F0B2         	movff	_ch,??_checkValue
  2539  0018D6  C042  F0B3         	movff	_ch+1,??_checkValue+1
  2540  0018DA  0100               	movlb	0	; () banked
  2541  0018DC  6BB4               	clrf	(??_checkValue+2)& (0+255),b
  2542  0018DE  C0B2  F013         	movff	??_checkValue,strcmp@s1
  2543  0018E2  C0B3  F014         	movff	??_checkValue+1,strcmp@s1+1
  2544  0018E6  C0B4  F015         	movff	??_checkValue+2,strcmp@s1+2
  2545  0018EA  0E63               	movlw	99
  2546  0018EC  6E16               	movwf	strcmp@s2,c
  2547  0018EE  0E00               	movlw	0
  2548  0018F0  6E17               	movwf	strcmp@s2+1,c
  2549  0018F2  0E00               	movlw	0
  2550  0018F4  6E18               	movwf	strcmp@s2+2,c
  2551  0018F6  EC44  F016         	call	_strcmp	;wreg free
  2552  0018FA  5013               	movf	?_strcmp,w,c
  2553  0018FC  1014               	iorwf	?_strcmp+1,w,c
  2554  0018FE  A4D8               	btfss	status,2,c
  2555  001900  D011               	goto	l255
  2556                           
  2557                           ;main.c: 174: {
  2558                           ;main.c: 175: CMD = 8;
  2559  001902  0E00               	movlw	0
  2560  001904  6E40               	movwf	_CMD+1,c
  2561  001906  0E08               	movlw	8
  2562  001908  6E3F               	movwf	_CMD,c
  2563                           
  2564                           ;main.c: 176: printf("\nCMD = %d\n", CMD);
  2565  00190A  0E96               	movlw	low STR_1
  2566  00190C  0100               	movlb	0	; () banked
  2567  00190E  6F8E               	movwf	printf@f& (0+255),b
  2568  001910  0E06               	movlw	high STR_1
  2569  001912  0100               	movlb	0	; () banked
  2570  001914  6F8F               	movwf	(printf@f+1)& (0+255),b
  2571  001916  C03F  F090         	movff	_CMD,?_printf+2
  2572  00191A  C040  F091         	movff	_CMD+1,?_printf+3
  2573  00191E  EC51  F003         	call	_printf	;wreg free
  2574                           
  2575                           ;main.c: 177: }
  2576  001922  0012               	return	
  2577  001924                     l255:
  2578                           
  2579                           ;main.c: 178: else if(strcmp(ch, 's') == 0)
  2580  001924  C041  F0B2         	movff	_ch,??_checkValue
  2581  001928  C042  F0B3         	movff	_ch+1,??_checkValue+1
  2582  00192C  0100               	movlb	0	; () banked
  2583  00192E  6BB4               	clrf	(??_checkValue+2)& (0+255),b
  2584  001930  C0B2  F013         	movff	??_checkValue,strcmp@s1
  2585  001934  C0B3  F014         	movff	??_checkValue+1,strcmp@s1+1
  2586  001938  C0B4  F015         	movff	??_checkValue+2,strcmp@s1+2
  2587  00193C  0E73               	movlw	115
  2588  00193E  6E16               	movwf	strcmp@s2,c
  2589  001940  0E00               	movlw	0
  2590  001942  6E17               	movwf	strcmp@s2+1,c
  2591  001944  0E00               	movlw	0
  2592  001946  6E18               	movwf	strcmp@s2+2,c
  2593  001948  EC44  F016         	call	_strcmp	;wreg free
  2594  00194C  5013               	movf	?_strcmp,w,c
  2595  00194E  1014               	iorwf	?_strcmp+1,w,c
  2596  001950  A4D8               	btfss	status,2,c
  2597  001952  D011               	goto	l257
  2598                           
  2599                           ;main.c: 179: {
  2600                           ;main.c: 180: CMD = 9;
  2601  001954  0E00               	movlw	0
  2602  001956  6E40               	movwf	_CMD+1,c
  2603  001958  0E09               	movlw	9
  2604  00195A  6E3F               	movwf	_CMD,c
  2605                           
  2606                           ;main.c: 181: printf("\nCMD = %d\n", CMD);
  2607  00195C  0E96               	movlw	low STR_1
  2608  00195E  0100               	movlb	0	; () banked
  2609  001960  6F8E               	movwf	printf@f& (0+255),b
  2610  001962  0E06               	movlw	high STR_1
  2611  001964  0100               	movlb	0	; () banked
  2612  001966  6F8F               	movwf	(printf@f+1)& (0+255),b
  2613  001968  C03F  F090         	movff	_CMD,?_printf+2
  2614  00196C  C040  F091         	movff	_CMD+1,?_printf+3
  2615  001970  EC51  F003         	call	_printf	;wreg free
  2616                           
  2617                           ;main.c: 182: }
  2618  001974  0012               	return	
  2619  001976                     l257:
  2620                           
  2621                           ;main.c: 183: else {
  2622                           ;main.c: 184: printf("\nwrong command\n");
  2623  001976  0E77               	movlw	low STR_10
  2624  001978  0100               	movlb	0	; () banked
  2625  00197A  6F8E               	movwf	printf@f& (0+255),b
  2626  00197C  0E06               	movlw	high STR_10
  2627  00197E  0100               	movlb	0	; () banked
  2628  001980  6F8F               	movwf	(printf@f+1)& (0+255),b
  2629  001982  EC51  F003         	call	_printf	;wreg free
  2630  001986  0012               	return	
  2631  001988                     __end_of_checkValue:
  2632                           	opt stack 0
  2633                           tblptru	equ	0xFF8
  2634                           intcon	equ	0xFF2
  2635                           intcon2	equ	0xFF1
  2636                           intcon3	equ	0xFF0
  2637                           postinc0	equ	0xFEE
  2638                           wreg	equ	0xFE8
  2639                           status	equ	0xFD8
  2640                           
  2641 ;; *************** function _strcmp *****************
  2642 ;; Defined at:
  2643 ;;		line 33 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\strcmp.c"
  2644 ;; Parameters:    Size  Location     Type
  2645 ;;  s1              3   18[COMRAM] PTR const unsigned char 
  2646 ;;		 -> ROM(32767), 
  2647 ;;  s2              3   21[COMRAM] PTR const unsigned char 
  2648 ;;		 -> ROM(32767), 
  2649 ;; Auto vars:     Size  Location     Type
  2650 ;;  r               1   25[COMRAM] char 
  2651 ;; Return value:  Size  Location     Type
  2652 ;;                  2   18[COMRAM] int 
  2653 ;; Registers used:
  2654 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
  2655 ;; Tracked objects:
  2656 ;;		On entry : 0/0
  2657 ;;		On exit  : 0/0
  2658 ;;		Unchanged: 0/0
  2659 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2660 ;;      Params:         6       0       0       0       0       0       0
  2661 ;;      Locals:         1       0       0       0       0       0       0
  2662 ;;      Temps:          1       0       0       0       0       0       0
  2663 ;;      Totals:         8       0       0       0       0       0       0
  2664 ;;Total ram usage:        8 bytes
  2665 ;; Hardware stack levels used:    1
  2666 ;; Hardware stack levels required when called:    2
  2667 ;; This function calls:
  2668 ;;		Nothing
  2669 ;; This function is called by:
  2670 ;;		_checkValue
  2671 ;; This function uses a non-reentrant model
  2672 ;;
  2673                           
  2674                           	psect	text10
  2675  002C88                     __ptext10:
  2676                           	opt stack 0
  2677  002C88                     _strcmp:
  2678                           	opt stack 27
  2679                           
  2680                           ;incstack = 0
  2681  002C88  D00C               	goto	l1030
  2682  002C8A  0E01               	movlw	1
  2683  002C8C  2613               	addwf	strcmp@s1,f,c
  2684  002C8E  0E00               	movlw	0
  2685  002C90  2214               	addwfc	strcmp@s1+1,f,c
  2686  002C92  0E00               	movlw	0
  2687  002C94  2215               	addwfc	strcmp@s1+2,f,c
  2688  002C96  0E01               	movlw	1
  2689  002C98  2616               	addwf	strcmp@s2,f,c
  2690  002C9A  0E00               	movlw	0
  2691  002C9C  2217               	addwfc	strcmp@s2+1,f,c
  2692  002C9E  0E00               	movlw	0
  2693  002CA0  2218               	addwfc	strcmp@s2+2,f,c
  2694  002CA2                     l1030:
  2695  002CA2  C013  FFF6         	movff	strcmp@s1,tblptrl
  2696  002CA6  C014  FFF7         	movff	strcmp@s1+1,tblptrh
  2697  002CAA  C015  FFF8         	movff	strcmp@s1+2,tblptru
  2698  002CAE  0008               	tblrd		*
  2699  002CB0  CFF5 F019          	movff	tablat,??_strcmp
  2700  002CB4  C016  FFF6         	movff	strcmp@s2,tblptrl
  2701  002CB8  C017  FFF7         	movff	strcmp@s2+1,tblptrh
  2702  002CBC  C018  FFF8         	movff	strcmp@s2+2,tblptru
  2703  002CC0  0008               	tblrd		*
  2704  002CC2  50F5               	movf	tablat,w,c
  2705  002CC4  0800               	sublw	0
  2706  002CC6  2419               	addwf	??_strcmp,w,c
  2707  002CC8  6E1A               	movwf	strcmp@r,c
  2708  002CCA  501A               	movf	strcmp@r,w,c
  2709  002CCC  A4D8               	btfss	status,2,c
  2710  002CCE  D00B               	goto	u3090
  2711  002CD0  C013  FFF6         	movff	strcmp@s1,tblptrl
  2712  002CD4  C014  FFF7         	movff	strcmp@s1+1,tblptrh
  2713  002CD8  C015  FFF8         	movff	strcmp@s1+2,tblptru
  2714  002CDC  0008               	tblrd		*
  2715  002CDE  50F5               	movf	tablat,w,c
  2716  002CE0  0900               	iorlw	0
  2717  002CE2  A4D8               	btfss	status,2,c
  2718  002CE4  D7D2               	goto	l1031
  2719  002CE6                     u3090:
  2720  002CE6  501A               	movf	strcmp@r,w,c
  2721  002CE8  6E13               	movwf	?_strcmp,c
  2722  002CEA  6A14               	clrf	?_strcmp+1,c
  2723  002CEC  BE13               	btfsc	?_strcmp,7,c
  2724  002CEE  0614               	decf	?_strcmp+1,f,c
  2725  002CF0  0012               	return	
  2726  002CF2                     __end_of_strcmp:
  2727                           	opt stack 0
  2728                           tblptru	equ	0xFF8
  2729                           tblptrh	equ	0xFF7
  2730                           tblptrl	equ	0xFF6
  2731                           tablat	equ	0xFF5
  2732                           intcon	equ	0xFF2
  2733                           intcon2	equ	0xFF1
  2734                           intcon3	equ	0xFF0
  2735                           postinc0	equ	0xFEE
  2736                           wreg	equ	0xFE8
  2737                           status	equ	0xFD8
  2738                           
  2739 ;; *************** function _printf *****************
  2740 ;; Defined at:
  2741 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\doprnt.c"
  2742 ;; Parameters:    Size  Location     Type
  2743 ;;  f               2   46[BANK0 ] PTR const unsigned char 
  2744 ;;		 -> STR_11(15), STR_10(16), STR_9(11), STR_8(11), 
  2745 ;;		 -> STR_7(11), STR_6(11), STR_5(11), STR_4(11), 
  2746 ;;		 -> STR_3(11), STR_2(11), STR_1(11), 
  2747 ;; Auto vars:     Size  Location     Type
  2748 ;;  val             4   66[BANK0 ] unsigned long 
  2749 ;;  tmpval          4   62[BANK0 ] struct .
  2750 ;;  fval            3   76[BANK0 ] struct .
  2751 ;;  cp              3    0        PTR const unsigned char 
  2752 ;;  prec            2   79[BANK0 ] int 
  2753 ;;  width           2   74[BANK0 ] int 
  2754 ;;  flag            2   72[BANK0 ] unsigned short 
  2755 ;;  exp             2   70[BANK0 ] int 
  2756 ;;  ap              2   60[BANK0 ] PTR void [1]
  2757 ;;		 -> ?_printf(2), 
  2758 ;;  len             2    0        unsigned int 
  2759 ;;  c               1   81[BANK0 ] char 
  2760 ;;  d               1    0        unsigned char 
  2761 ;; Return value:  Size  Location     Type
  2762 ;;                  2   46[BANK0 ] int 
  2763 ;; Registers used:
  2764 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2765 ;; Tracked objects:
  2766 ;;		On entry : 0/0
  2767 ;;		On exit  : 0/0
  2768 ;;		Unchanged: 0/0
  2769 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2770 ;;      Params:         0       5       0       0       0       0       0
  2771 ;;      Locals:         0      25       0       0       0       0       0
  2772 ;;      Temps:          0       6       0       0       0       0       0
  2773 ;;      Totals:         0      36       0       0       0       0       0
  2774 ;;Total ram usage:       36 bytes
  2775 ;; Hardware stack levels used:    1
  2776 ;; Hardware stack levels required when called:    5
  2777 ;; This function calls:
  2778 ;;		___awdiv
  2779 ;;		___ftadd
  2780 ;;		___ftge
  2781 ;;		___ftmul
  2782 ;;		___ftneg
  2783 ;;		___ftsub
  2784 ;;		___fttol
  2785 ;;		___lldiv
  2786 ;;		___llmod
  2787 ;;		___lltoft
  2788 ;;		___wmul
  2789 ;;		__div_to_l_
  2790 ;;		__tdiv_to_l_
  2791 ;;		_fround
  2792 ;;		_isdigit
  2793 ;;		_putch
  2794 ;;		_scale
  2795 ;; This function is called by:
  2796 ;;		_checkValue
  2797 ;;		_main
  2798 ;; This function uses a non-reentrant model
  2799 ;;
  2800                           
  2801                           	psect	text11
  2802  0006A2                     __ptext11:
  2803                           	opt stack 0
  2804  0006A2                     _printf:
  2805                           	opt stack 25
  2806                           
  2807                           ;doprnt.c: 466: va_list ap;
  2808                           ;doprnt.c: 499: signed char c;
  2809                           ;doprnt.c: 501: int width;
  2810                           ;doprnt.c: 504: int prec;
  2811                           ;doprnt.c: 508: unsigned short flag;
  2812                           ;doprnt.c: 515: char d;
  2813                           ;doprnt.c: 516: double fval;
  2814                           ;doprnt.c: 517: int exp;
  2815                           ;doprnt.c: 523: union {
  2816                           ;doprnt.c: 524: unsigned long vd;
  2817                           ;doprnt.c: 525: double integ;
  2818                           ;doprnt.c: 526: } tmpval;
  2819                           ;doprnt.c: 528: unsigned long val;
  2820                           ;doprnt.c: 529: unsigned len;
  2821                           ;doprnt.c: 530: const char * cp;
  2822                           ;doprnt.c: 533: *ap = __va_start();
  2823                           
  2824                           ;incstack = 0
  2825  0006A2  0E90               	movlw	low (?_printf+2)
  2826  0006A4  0100               	movlb	0	; () banked
  2827  0006A6  6F9C               	movwf	printf@ap& (0+255),b
  2828  0006A8  0E00               	movlw	high (?_printf+2)
  2829  0006AA  0100               	movlb	0	; () banked
  2830  0006AC  6F9D               	movwf	(printf@ap+1)& (0+255),b
  2831                           
  2832                           ;doprnt.c: 536: while(c = *f++) {
  2833  0006AE  EF15  F009         	goto	u5020
  2834  0006B2                     
  2835                           ; BSR set to: 0
  2836                           ;doprnt.c: 538: if(c != '%')
  2837                           
  2838                           ; BSR set to: 0
  2839  0006B2  0E25               	movlw	37
  2840  0006B4  0100               	movlb	0	; () banked
  2841  0006B6  19B1               	xorwf	printf@c& (0+255),w,b
  2842  0006B8  B4D8               	btfsc	status,2,c
  2843  0006BA  D006               	goto	l339
  2844                           
  2845                           ; BSR set to: 0
  2846                           ;doprnt.c: 540: {
  2847                           ;doprnt.c: 541: (putch(c) );
  2848  0006BC  0100               	movlb	0	; () banked
  2849  0006BE  51B1               	movf	printf@c& (0+255),w,b
  2850  0006C0  EC89  F018         	call	_putch
  2851                           
  2852                           ;doprnt.c: 542: continue;
  2853  0006C4  EF15  F009         	goto	u5020
  2854  0006C8                     l339:
  2855                           
  2856                           ;doprnt.c: 543: }
  2857                           ;doprnt.c: 546: width = 0;
  2858  0006C8  0E00               	movlw	0
  2859  0006CA  0100               	movlb	0	; () banked
  2860  0006CC  6FAB               	movwf	(printf@width+1)& (0+255),b
  2861  0006CE  0E00               	movlw	0
  2862  0006D0  6FAA               	movwf	printf@width& (0+255),b
  2863                           
  2864                           ;doprnt.c: 548: flag = 0;
  2865  0006D2  0E00               	movlw	0
  2866  0006D4  0100               	movlb	0	; () banked
  2867  0006D6  6FA9               	movwf	(printf@flag+1)& (0+255),b
  2868  0006D8  0E00               	movlw	0
  2869  0006DA  6FA8               	movwf	printf@flag& (0+255),b
  2870                           
  2871                           ; BSR set to: 0
  2872                           ;doprnt.c: 551: switch(*f) {
  2873                           
  2874                           ;doprnt.c: 550: for(;;) {
  2875  0006DC  D005               	goto	l341
  2876  0006DE                     
  2877                           ;doprnt.c: 580: flag |= 0x04;
  2878                           
  2879                           ; BSR set to: 0
  2880  0006DE  0100               	movlb	0	; () banked
  2881  0006E0  85A8               	bsf	printf@flag& (0+255),2,b
  2882                           
  2883                           ;doprnt.c: 581: f++;
  2884  0006E2  0100               	movlb	0	; () banked
  2885  0006E4  4B8E               	infsnz	printf@f& (0+255),f,b
  2886  0006E6  2B8F               	incf	(printf@f+1)& (0+255),f,b
  2887  0006E8                     l341:
  2888                           
  2889                           ; BSR set to: 0
  2890  0006E8  C08E  FFF6         	movff	printf@f,tblptrl
  2891  0006EC  C08F  FFF7         	movff	printf@f+1,tblptrh
  2892  0006F0                     	if	0	;tblptru may be non-zero
  2893  0006F0                     	endif
  2894  0006F0                     	if	0	;tblptru may be non-zero
  2895  0006F0                     	endif
  2896  0006F0  0008               	tblrd		*
  2897  0006F2  50F5               	movf	tablat,w,c
  2898                           
  2899                           ; Switch size 1, requested type "space"
  2900                           ; Number of cases is 1, Range of values is 48 to 48
  2901                           ; switch strategies available:
  2902                           ; Name         Instructions Cycles
  2903                           ; simple_byte            4     3 (average)
  2904                           ;	Chosen strategy is simple_byte
  2905  0006F4  0A30               	xorlw	48	; case 48
  2906  0006F6  B4D8               	btfsc	status,2,c
  2907  0006F8  D7F2               	goto	l342
  2908                           
  2909                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  2910                           
  2911                           ;doprnt.c: 586: }
  2912                           
  2913                           ;doprnt.c: 585: break;
  2914  0006FA  C08E  FFF6         	movff	printf@f,tblptrl
  2915  0006FE  C08F  FFF7         	movff	printf@f+1,tblptrh
  2916  000702                     	if	0	;tblptru may be non-zero
  2917  000702                     	endif
  2918  000702                     	if	0	;tblptru may be non-zero
  2919  000702                     	endif
  2920  000702  0008               	tblrd		*
  2921  000704  50F5               	movf	tablat,w,c
  2922  000706  EC61  F018         	call	_isdigit
  2923  00070A  A0D8               	btfss	status,0,c
  2924  00070C  D03F               	goto	u4490
  2925                           
  2926                           ;doprnt.c: 598: width = 0;
  2927  00070E  0E00               	movlw	0
  2928  000710  0100               	movlb	0	; () banked
  2929  000712  6FAB               	movwf	(printf@width+1)& (0+255),b
  2930  000714  0E00               	movlw	0
  2931  000716  6FAA               	movwf	printf@width& (0+255),b
  2932  000718                     
  2933                           ;doprnt.c: 600: width *= 10;
  2934                           
  2935                           ; BSR set to: 0
  2936  000718  C0AA  F021         	movff	printf@width,___wmul@multiplier
  2937  00071C  C0AB  F022         	movff	printf@width+1,___wmul@multiplier+1
  2938  000720  0E00               	movlw	0
  2939  000722  6E24               	movwf	___wmul@multiplicand+1,c
  2940  000724  0E0A               	movlw	10
  2941  000726  6E23               	movwf	___wmul@multiplicand,c
  2942  000728  EC2A  F018         	call	___wmul	;wreg free
  2943  00072C  C021  F0AA         	movff	?___wmul,printf@width
  2944  000730  C022  F0AB         	movff	?___wmul+1,printf@width+1
  2945                           
  2946                           ;doprnt.c: 601: width += *f++ - '0';
  2947  000734  0ED0               	movlw	208
  2948  000736  0100               	movlb	0	; () banked
  2949  000738  6F93               	movwf	??_printf& (0+255),b
  2950  00073A  0EFF               	movlw	255
  2951  00073C  0100               	movlb	0	; () banked
  2952  00073E  6F94               	movwf	(??_printf+1)& (0+255),b
  2953  000740  C08E  FFF6         	movff	printf@f,tblptrl
  2954  000744  C08F  FFF7         	movff	printf@f+1,tblptrh
  2955  000748                     	if	0	;tblptru may be non-zero
  2956  000748                     	endif
  2957  000748                     	if	0	;tblptru may be non-zero
  2958  000748                     	endif
  2959  000748  0008               	tblrd		*
  2960  00074A  50F5               	movf	tablat,w,c
  2961  00074C  0100               	movlb	0	; () banked
  2962  00074E  6F95               	movwf	(??_printf+2)& (0+255),b
  2963  000750  6B96               	clrf	(??_printf+3)& (0+255),b
  2964  000752  0100               	movlb	0	; () banked
  2965  000754  5193               	movf	??_printf& (0+255),w,b
  2966  000756  0100               	movlb	0	; () banked
  2967  000758  2795               	addwf	(??_printf+2)& (0+255),f,b
  2968  00075A  0100               	movlb	0	; () banked
  2969  00075C  5194               	movf	(??_printf+1)& (0+255),w,b
  2970  00075E  0100               	movlb	0	; () banked
  2971  000760  2396               	addwfc	(??_printf+3)& (0+255),f,b
  2972  000762  0100               	movlb	0	; () banked
  2973  000764  5195               	movf	(??_printf+2)& (0+255),w,b
  2974  000766  0100               	movlb	0	; () banked
  2975  000768  27AA               	addwf	printf@width& (0+255),f,b
  2976  00076A  0100               	movlb	0	; () banked
  2977  00076C  5196               	movf	(??_printf+3)& (0+255),w,b
  2978  00076E  0100               	movlb	0	; () banked
  2979  000770  23AB               	addwfc	(printf@width+1)& (0+255),f,b
  2980                           
  2981                           ; BSR set to: 0
  2982  000772  0100               	movlb	0	; () banked
  2983  000774  4B8E               	infsnz	printf@f& (0+255),f,b
  2984  000776  2B8F               	incf	(printf@f+1)& (0+255),f,b
  2985                           
  2986                           ; BSR set to: 0
  2987                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  2988  000778  C08E  FFF6         	movff	printf@f,tblptrl
  2989  00077C  C08F  FFF7         	movff	printf@f+1,tblptrh
  2990  000780                     	if	0	;tblptru may be non-zero
  2991  000780                     	endif
  2992  000780                     	if	0	;tblptru may be non-zero
  2993  000780                     	endif
  2994  000780  0008               	tblrd		*
  2995  000782  50F5               	movf	tablat,w,c
  2996  000784  EC61  F018         	call	_isdigit
  2997  000788  B0D8               	btfsc	status,0,c
  2998  00078A  D7C6               	goto	l347
  2999  00078C                     u4490:
  3000                           
  3001                           ;doprnt.c: 608: }
  3002                           ;doprnt.c: 611: if(*f == '.') {
  3003  00078C  C08E  FFF6         	movff	printf@f,tblptrl
  3004  000790  C08F  FFF7         	movff	printf@f+1,tblptrh
  3005  000794                     	if	0	;tblptru may be non-zero
  3006  000794                     	endif
  3007  000794                     	if	0	;tblptru may be non-zero
  3008  000794                     	endif
  3009  000794  0008               	tblrd		*
  3010  000796  50F5               	movf	tablat,w,c
  3011  000798  0A2E               	xorlw	46
  3012  00079A  A4D8               	btfss	status,2,c
  3013  00079C  D034               	goto	l349
  3014                           
  3015                           ;doprnt.c: 612: flag |= 0x4000;
  3016  00079E  0100               	movlb	0	; () banked
  3017  0007A0  8DA9               	bsf	(printf@flag+1)& (0+255),6,b
  3018                           
  3019                           ;doprnt.c: 613: f++;
  3020  0007A2  0100               	movlb	0	; () banked
  3021  0007A4  4B8E               	infsnz	printf@f& (0+255),f,b
  3022  0007A6  2B8F               	incf	(printf@f+1)& (0+255),f,b
  3023                           
  3024                           ; BSR set to: 0
  3025                           ;doprnt.c: 620: {
  3026                           ;doprnt.c: 621: prec = 0;
  3027  0007A8  0E00               	movlw	0
  3028  0007AA  0100               	movlb	0	; () banked
  3029  0007AC  6FB0               	movwf	(printf@prec+1)& (0+255),b
  3030  0007AE  0E00               	movlw	0
  3031  0007B0  6FAF               	movwf	printf@prec& (0+255),b
  3032                           
  3033                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  3034  0007B2  D01E               	goto	l350
  3035  0007B4                     
  3036                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  3037                           
  3038                           ; BSR set to: 0
  3039  0007B4  C0AF  F021         	movff	printf@prec,___wmul@multiplier
  3040  0007B8  C0B0  F022         	movff	printf@prec+1,___wmul@multiplier+1
  3041  0007BC  0E00               	movlw	0
  3042  0007BE  6E24               	movwf	___wmul@multiplicand+1,c
  3043  0007C0  0E0A               	movlw	10
  3044  0007C2  6E23               	movwf	___wmul@multiplicand,c
  3045  0007C4  EC2A  F018         	call	___wmul	;wreg free
  3046  0007C8  C08E  FFF6         	movff	printf@f,tblptrl
  3047  0007CC  C08F  FFF7         	movff	printf@f+1,tblptrh
  3048  0007D0                     	if	0	;tblptru may be non-zero
  3049  0007D0                     	endif
  3050  0007D0                     	if	0	;tblptru may be non-zero
  3051  0007D0                     	endif
  3052  0007D0  0008               	tblrd		*
  3053  0007D2  50F5               	movf	tablat,w,c
  3054  0007D4  2621               	addwf	?___wmul,f,c
  3055  0007D6  0E00               	movlw	0
  3056  0007D8  2222               	addwfc	?___wmul+1,f,c
  3057  0007DA  0ED0               	movlw	208
  3058  0007DC  2421               	addwf	?___wmul,w,c
  3059  0007DE  0100               	movlb	0	; () banked
  3060  0007E0  6FAF               	movwf	printf@prec& (0+255),b
  3061  0007E2  0EFF               	movlw	255
  3062  0007E4  2022               	addwfc	?___wmul+1,w,c
  3063  0007E6  0100               	movlb	0	; () banked
  3064  0007E8  6FB0               	movwf	(printf@prec+1)& (0+255),b
  3065                           
  3066                           ; BSR set to: 0
  3067  0007EA  0100               	movlb	0	; () banked
  3068  0007EC  4B8E               	infsnz	printf@f& (0+255),f,b
  3069  0007EE  2B8F               	incf	(printf@f+1)& (0+255),f,b
  3070  0007F0                     l350:
  3071                           
  3072                           ; BSR set to: 0
  3073                           
  3074                           ; BSR set to: 0
  3075  0007F0  C08E  FFF6         	movff	printf@f,tblptrl
  3076  0007F4  C08F  FFF7         	movff	printf@f+1,tblptrh
  3077  0007F8                     	if	0	;tblptru may be non-zero
  3078  0007F8                     	endif
  3079  0007F8                     	if	0	;tblptru may be non-zero
  3080  0007F8                     	endif
  3081  0007F8  0008               	tblrd		*
  3082  0007FA  50F5               	movf	tablat,w,c
  3083  0007FC  EC61  F018         	call	_isdigit
  3084  000800  A0D8               	btfss	status,0,c
  3085  000802  D00C               	goto	l354
  3086  000804  D7D7               	goto	l351
  3087  000806                     l349:
  3088                           
  3089                           ;doprnt.c: 626: prec = 0;
  3090  000806  0E00               	movlw	0
  3091  000808  0100               	movlb	0	; () banked
  3092  00080A  6FB0               	movwf	(printf@prec+1)& (0+255),b
  3093  00080C  0E00               	movlw	0
  3094  00080E  6FAF               	movwf	printf@prec& (0+255),b
  3095                           
  3096                           ; BSR set to: 0
  3097                           ;doprnt.c: 628: flag |= 0x1000;
  3098  000810  0100               	movlb	0	; () banked
  3099  000812  89A9               	bsf	(printf@flag+1)& (0+255),4,b
  3100                           
  3101                           ; BSR set to: 0
  3102                           ;doprnt.c: 630: }
  3103                           ;doprnt.c: 635: switch(c = *f++) {
  3104  000814  D003               	goto	l354
  3105  000816                     
  3106                           ; BSR set to: 0
  3107                           ;doprnt.c: 663: flag |= 0x400;
  3108                           
  3109                           ; BSR set to: 0
  3110  000816  0100               	movlb	0	; () banked
  3111  000818  85A9               	bsf	(printf@flag+1)& (0+255),2,b
  3112                           
  3113                           ; BSR set to: 0
  3114                           ;doprnt.c: 698: case 'i':
  3115                           ;doprnt.c: 699: break;
  3116                           
  3117                           ; BSR set to: 0
  3118                           
  3119                           ;doprnt.c: 697: case 'd':
  3120                           
  3121                           ;doprnt.c: 664: break;
  3122  00081A  D019               	goto	l358
  3123  00081C                     l354:
  3124                           
  3125                           ; BSR set to: 0
  3126  00081C  C08E  FFF6         	movff	printf@f,tblptrl
  3127  000820  C08F  FFF7         	movff	printf@f+1,tblptrh
  3128  000824  0100               	movlb	0	; () banked
  3129  000826  4B8E               	infsnz	printf@f& (0+255),f,b
  3130  000828  2B8F               	incf	(printf@f+1)& (0+255),f,b
  3131  00082A                     	if	0	;tblptru may be non-zero
  3132  00082A                     	endif
  3133  00082A                     	if	0	;tblptru may be non-zero
  3134  00082A                     	endif
  3135  00082A  0008               	tblrd		*
  3136  00082C  CFF5 F0B1          	movff	tablat,printf@c
  3137  000830  0100               	movlb	0	; () banked
  3138  000832  51B1               	movf	printf@c& (0+255),w,b
  3139                           
  3140                           ; Switch size 1, requested type "space"
  3141                           ; Number of cases is 4, Range of values is 0 to 105
  3142                           ; switch strategies available:
  3143                           ; Name         Instructions Cycles
  3144                           ; simple_byte           13     7 (average)
  3145                           ;	Chosen strategy is simple_byte
  3146  000834  0A00               	xorlw	0	; case 0
  3147  000836  B4D8               	btfsc	status,2,c
  3148  000838  0012               	return	
  3149  00083A  0A64               	xorlw	100	; case 100
  3150  00083C  B4D8               	btfsc	status,2,c
  3151  00083E  D007               	goto	l358
  3152  000840  0A02               	xorlw	2	; case 102
  3153  000842  B4D8               	btfsc	status,2,c
  3154  000844  D7E8               	goto	l357
  3155  000846  0A0F               	xorlw	15	; case 105
  3156  000848  A4D8               	btfss	status,2,c
  3157  00084A  EF15  F009         	goto	u5020
  3158  00084E                     l358:
  3159                           
  3160                           ; BSR set to: 0
  3161                           ;doprnt.c: 825: if(flag & (0x700)) {
  3162                           
  3163                           ; BSR set to: 0
  3164  00084E  0E07               	movlw	7
  3165  000850  0100               	movlb	0	; () banked
  3166  000852  15A9               	andwf	(printf@flag+1)& (0+255),w,b
  3167  000854  B4D8               	btfsc	status,2,c
  3168  000856  D36D               	goto	l362
  3169                           
  3170                           ; BSR set to: 0
  3171                           ;doprnt.c: 827: if(flag & 0x1000)
  3172  000858  0100               	movlb	0	; () banked
  3173  00085A  A9A9               	btfss	(printf@flag+1)& (0+255),4,b
  3174  00085C  D005               	goto	l363
  3175                           
  3176                           ; BSR set to: 0
  3177                           ;doprnt.c: 829: prec = 6;
  3178  00085E  0E00               	movlw	0
  3179  000860  0100               	movlb	0	; () banked
  3180  000862  6FB0               	movwf	(printf@prec+1)& (0+255),b
  3181  000864  0E06               	movlw	6
  3182  000866  6FAF               	movwf	printf@prec& (0+255),b
  3183  000868                     l363:
  3184                           
  3185                           ; BSR set to: 0
  3186                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  3187                           
  3188                           ; BSR set to: 0
  3189  000868  C09C  FFD9         	movff	printf@ap,fsr2l
  3190  00086C  C09D  FFDA         	movff	printf@ap+1,fsr2h
  3191  000870  CFDE F0AC          	movff	postinc2,printf@fval
  3192  000874  CFDE F0AD          	movff	postinc2,printf@fval+1
  3193  000878  CFDD F0AE          	movff	postdec2,printf@fval+2
  3194                           
  3195                           ; BSR set to: 0
  3196  00087C  0E03               	movlw	3
  3197  00087E  0100               	movlb	0	; () banked
  3198  000880  279C               	addwf	printf@ap& (0+255),f,b
  3199  000882  0E00               	movlw	0
  3200  000884  239D               	addwfc	(printf@ap+1)& (0+255),f,b
  3201                           
  3202                           ; BSR set to: 0
  3203                           ;doprnt.c: 831: if(fval < 0.0) {
  3204  000886  0100               	movlb	0	; () banked
  3205  000888  AFAE               	btfss	(printf@fval+2)& (0+255),7,b
  3206  00088A  D011               	goto	l364
  3207                           
  3208                           ; BSR set to: 0
  3209                           ;doprnt.c: 832: fval = -fval;
  3210  00088C  C0AC  F013         	movff	printf@fval,___ftneg@f1
  3211  000890  C0AD  F014         	movff	printf@fval+1,___ftneg@f1+1
  3212  000894  C0AE  F015         	movff	printf@fval+2,___ftneg@f1+2
  3213  000898  EC3D  F018         	call	___ftneg	;wreg free
  3214  00089C  C013  F0AC         	movff	?___ftneg,printf@fval
  3215  0008A0  C014  F0AD         	movff	?___ftneg+1,printf@fval+1
  3216  0008A4  C015  F0AE         	movff	?___ftneg+2,printf@fval+2
  3217                           
  3218                           ;doprnt.c: 833: flag |= 0x03;
  3219  0008A8  0E03               	movlw	3
  3220  0008AA  0100               	movlb	0	; () banked
  3221  0008AC  13A8               	iorwf	printf@flag& (0+255),f,b
  3222  0008AE                     l364:
  3223                           
  3224                           ; BSR set to: 0
  3225                           ;doprnt.c: 834: }
  3226                           ;doprnt.c: 835: exp = 0;
  3227                           
  3228                           ; BSR set to: 0
  3229  0008AE  0E00               	movlw	0
  3230  0008B0  0100               	movlb	0	; () banked
  3231  0008B2  6FA7               	movwf	(printf@exp+1)& (0+255),b
  3232  0008B4  0E00               	movlw	0
  3233  0008B6  6FA6               	movwf	printf@exp& (0+255),b
  3234                           
  3235                           ; BSR set to: 0
  3236                           ;doprnt.c: 836: if( fval!=0) {
  3237  0008B8  0100               	movlb	0	; () banked
  3238  0008BA  51AC               	movf	printf@fval& (0+255),w,b
  3239  0008BC  0100               	movlb	0	; () banked
  3240  0008BE  11AD               	iorwf	(printf@fval+1)& (0+255),w,b
  3241  0008C0  0100               	movlb	0	; () banked
  3242  0008C2  11AE               	iorwf	(printf@fval+2)& (0+255),w,b
  3243  0008C4  B4D8               	btfsc	status,2,c
  3244  0008C6  D091               	goto	l369
  3245                           
  3246                           ; BSR set to: 0
  3247                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  3248  0008C8  0E82               	movlw	130
  3249  0008CA  0100               	movlb	0	; () banked
  3250  0008CC  6F93               	movwf	??_printf& (0+255),b
  3251  0008CE  0EFF               	movlw	255
  3252  0008D0  0100               	movlb	0	; () banked
  3253  0008D2  6F94               	movwf	(??_printf+1)& (0+255),b
  3254  0008D4  C0AC  F095         	movff	printf@fval,??_printf+2
  3255  0008D8  C0AD  F096         	movff	printf@fval+1,??_printf+3
  3256  0008DC  C0AE  F097         	movff	printf@fval+2,??_printf+4
  3257  0008E0  C0AF  F098         	movff	printf@fval+3,??_printf+5
  3258  0008E4  0E10               	movlw	16
  3259  0008E6  D006               	goto	u4560
  3260  0008E8                     u4565:
  3261  0008E8  0100               	movlb	0	; () banked
  3262  0008EA  90D8               	bcf	status,0,c
  3263  0008EC  3398               	rrcf	(??_printf+5)& (0+255),f,b
  3264  0008EE  3397               	rrcf	(??_printf+4)& (0+255),f,b
  3265  0008F0  3396               	rrcf	(??_printf+3)& (0+255),f,b
  3266  0008F2  3395               	rrcf	(??_printf+2)& (0+255),f,b
  3267  0008F4                     u4560:
  3268  0008F4  2EE8               	decfsz	wreg,f,c
  3269  0008F6  D7F8               	goto	u4565
  3270  0008F8  0100               	movlb	0	; () banked
  3271  0008FA  5195               	movf	(??_printf+2)& (0+255),w,b
  3272  0008FC  0100               	movlb	0	; () banked
  3273  0008FE  2593               	addwf	??_printf& (0+255),w,b
  3274  000900  0100               	movlb	0	; () banked
  3275  000902  6FA6               	movwf	printf@exp& (0+255),b
  3276  000904  0E00               	movlw	0
  3277  000906  0100               	movlb	0	; () banked
  3278  000908  2194               	addwfc	(??_printf+1)& (0+255),w,b
  3279  00090A  0100               	movlb	0	; () banked
  3280  00090C  6FA7               	movwf	(printf@exp+1)& (0+255),b
  3281                           
  3282                           ; BSR set to: 0
  3283                           ;doprnt.c: 838: exp--;
  3284  00090E  0100               	movlb	0	; () banked
  3285  000910  07A6               	decf	printf@exp& (0+255),f,b
  3286  000912  A0D8               	btfss	status,0,c
  3287  000914  07A7               	decf	(printf@exp+1)& (0+255),f,b
  3288                           
  3289                           ; BSR set to: 0
  3290                           ;doprnt.c: 839: exp *= 3;
  3291  000916  C0A6  F021         	movff	printf@exp,___wmul@multiplier
  3292  00091A  C0A7  F022         	movff	printf@exp+1,___wmul@multiplier+1
  3293  00091E  0E00               	movlw	0
  3294  000920  6E24               	movwf	___wmul@multiplicand+1,c
  3295  000922  0E03               	movlw	3
  3296  000924  6E23               	movwf	___wmul@multiplicand,c
  3297  000926  EC2A  F018         	call	___wmul	;wreg free
  3298  00092A  C021  F0A6         	movff	?___wmul,printf@exp
  3299  00092E  C022  F0A7         	movff	?___wmul+1,printf@exp+1
  3300                           
  3301                           ;doprnt.c: 840: exp /= 10;
  3302  000932  C0A6  F019         	movff	printf@exp,___awdiv@dividend
  3303  000936  C0A7  F01A         	movff	printf@exp+1,___awdiv@dividend+1
  3304  00093A  0E00               	movlw	0
  3305  00093C  6E1C               	movwf	___awdiv@divisor+1,c
  3306  00093E  0E0A               	movlw	10
  3307  000940  6E1B               	movwf	___awdiv@divisor,c
  3308  000942  EC89  F015         	call	___awdiv	;wreg free
  3309  000946  C019  F0A6         	movff	?___awdiv,printf@exp
  3310  00094A  C01A  F0A7         	movff	?___awdiv+1,printf@exp+1
  3311                           
  3312                           ;doprnt.c: 841: if(exp < 0)
  3313  00094E  0100               	movlb	0	; () banked
  3314  000950  AFA7               	btfss	(printf@exp+1)& (0+255),7,b
  3315  000952  D004               	goto	l366
  3316                           
  3317                           ; BSR set to: 0
  3318                           ;doprnt.c: 842: exp--;
  3319  000954  0100               	movlb	0	; () banked
  3320  000956  07A6               	decf	printf@exp& (0+255),f,b
  3321  000958  A0D8               	btfss	status,0,c
  3322  00095A  07A7               	decf	(printf@exp+1)& (0+255),f,b
  3323  00095C                     l366:
  3324                           
  3325                           ; BSR set to: 0
  3326                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  3327                           
  3328                           ; BSR set to: 0
  3329  00095C  0100               	movlb	0	; () banked
  3330  00095E  51A6               	movf	printf@exp& (0+255),w,b
  3331  000960  0800               	sublw	0
  3332  000962  EC25  F009         	call	_scale
  3333  000966  C078  F09E         	movff	?_scale,printf@tmpval
  3334  00096A  C079  F09F         	movff	?_scale+1,printf@tmpval+1
  3335  00096E  C07A  F0A0         	movff	?_scale+2,printf@tmpval+2
  3336                           
  3337                           ;doprnt.c: 847: tmpval.integ *= fval;
  3338  000972  C09E  F069         	movff	printf@tmpval,___ftmul@f1
  3339  000976  C09F  F06A         	movff	printf@tmpval+1,___ftmul@f1+1
  3340  00097A  C0A0  F06B         	movff	printf@tmpval+2,___ftmul@f1+2
  3341  00097E  C0AC  F06C         	movff	printf@fval,___ftmul@f2
  3342  000982  C0AD  F06D         	movff	printf@fval+1,___ftmul@f2+1
  3343  000986  C0AE  F06E         	movff	printf@fval+2,___ftmul@f2+2
  3344  00098A  ECDF  F00F         	call	___ftmul	;wreg free
  3345  00098E  C069  F09E         	movff	?___ftmul,printf@tmpval
  3346  000992  C06A  F09F         	movff	?___ftmul+1,printf@tmpval+1
  3347  000996  C06B  F0A0         	movff	?___ftmul+2,printf@tmpval+2
  3348                           
  3349                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  3350  00099A  C09E  F013         	movff	printf@tmpval,___ftge@ff1
  3351  00099E  C09F  F014         	movff	printf@tmpval+1,___ftge@ff1+1
  3352  0009A2  C0A0  F015         	movff	printf@tmpval+2,___ftge@ff1+2
  3353  0009A6  0E00               	movlw	0
  3354  0009A8  6E16               	movwf	___ftge@ff2,c
  3355  0009AA  0E80               	movlw	128
  3356  0009AC  6E17               	movwf	___ftge@ff2+1,c
  3357  0009AE  0E3F               	movlw	63
  3358  0009B0  6E18               	movwf	___ftge@ff2+2,c
  3359  0009B2  EC41  F015         	call	___ftge	;wreg free
  3360  0009B6  B0D8               	btfsc	status,0,c
  3361  0009B8  D005               	goto	l367
  3362                           
  3363                           ;doprnt.c: 849: exp--;
  3364  0009BA  0100               	movlb	0	; () banked
  3365  0009BC  07A6               	decf	printf@exp& (0+255),f,b
  3366  0009BE  A0D8               	btfss	status,0,c
  3367  0009C0  07A7               	decf	(printf@exp+1)& (0+255),f,b
  3368  0009C2  D013               	goto	l369
  3369  0009C4                     l367:
  3370                           
  3371                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  3372                           
  3373                           ; BSR set to: 0
  3374  0009C4  C09E  F013         	movff	printf@tmpval,___ftge@ff1
  3375  0009C8  C09F  F014         	movff	printf@tmpval+1,___ftge@ff1+1
  3376  0009CC  C0A0  F015         	movff	printf@tmpval+2,___ftge@ff1+2
  3377  0009D0  0E00               	movlw	0
  3378  0009D2  6E16               	movwf	___ftge@ff2,c
  3379  0009D4  0E20               	movlw	32
  3380  0009D6  6E17               	movwf	___ftge@ff2+1,c
  3381  0009D8  0E41               	movlw	65
  3382  0009DA  6E18               	movwf	___ftge@ff2+2,c
  3383  0009DC  EC41  F015         	call	___ftge	;wreg free
  3384  0009E0  A0D8               	btfss	status,0,c
  3385  0009E2  D003               	goto	l369
  3386                           
  3387                           ;doprnt.c: 851: exp++;
  3388  0009E4  0100               	movlb	0	; () banked
  3389  0009E6  4BA6               	infsnz	printf@exp& (0+255),f,b
  3390  0009E8  2BA7               	incf	(printf@exp+1)& (0+255),f,b
  3391  0009EA                     l369:
  3392                           
  3393                           ;doprnt.c: 852: }
  3394                           ;doprnt.c: 1112: if(prec <= 12)
  3395                           
  3396                           ; BSR set to: 0
  3397                           
  3398                           ; BSR set to: 0
  3399                           
  3400                           ; BSR set to: 0
  3401  0009EA  0100               	movlb	0	; () banked
  3402  0009EC  BFB0               	btfsc	(printf@prec+1)& (0+255),7,b
  3403  0009EE  D008               	goto	u4600
  3404  0009F0  0100               	movlb	0	; () banked
  3405  0009F2  51B0               	movf	(printf@prec+1)& (0+255),w,b
  3406  0009F4  E11D               	bnz	l3984
  3407  0009F6  0E0D               	movlw	13
  3408  0009F8  0100               	movlb	0	; () banked
  3409  0009FA  5DAF               	subwf	printf@prec& (0+255),w,b
  3410  0009FC  B0D8               	btfsc	status,0,c
  3411  0009FE  D018               	goto	l370
  3412  000A00                     u4600:
  3413                           
  3414                           ; BSR set to: 0
  3415                           ;doprnt.c: 1113: fval += fround(prec);
  3416  000A00  C0AC  F027         	movff	printf@fval,___ftadd@f1
  3417  000A04  C0AD  F028         	movff	printf@fval+1,___ftadd@f1+1
  3418  000A08  C0AE  F029         	movff	printf@fval+2,___ftadd@f1+2
  3419  000A0C  0100               	movlb	0	; () banked
  3420  000A0E  51AF               	movf	printf@prec& (0+255),w,b
  3421  000A10  ECC4  F00C         	call	_fround
  3422  000A14  C078  F02A         	movff	?_fround,___ftadd@f2
  3423  000A18  C079  F02B         	movff	?_fround+1,___ftadd@f2+1
  3424  000A1C  C07A  F02C         	movff	?_fround+2,___ftadd@f2+2
  3425  000A20  EC09  F00F         	call	___ftadd	;wreg free
  3426  000A24  C027  F0AC         	movff	?___ftadd,printf@fval
  3427  000A28  C028  F0AD         	movff	?___ftadd+1,printf@fval+1
  3428  000A2C  C029  F0AE         	movff	?___ftadd+2,printf@fval+2
  3429  000A30                     l370:
  3430  000A30                     l3984:
  3431                           
  3432                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  3433  000A30  0100               	movlb	0	; () banked
  3434  000A32  BFA7               	btfsc	(printf@exp+1)& (0+255),7,b
  3435  000A34  D008               	goto	u4610
  3436  000A36  0100               	movlb	0	; () banked
  3437  000A38  51A7               	movf	(printf@exp+1)& (0+255),w,b
  3438  000A3A  E12A               	bnz	l3992
  3439  000A3C  0E0A               	movlw	10
  3440  000A3E  0100               	movlb	0	; () banked
  3441  000A40  5DA6               	subwf	printf@exp& (0+255),w,b
  3442  000A42  B0D8               	btfsc	status,0,c
  3443  000A44  D025               	goto	u4640
  3444  000A46                     u4610:
  3445                           
  3446                           ; BSR set to: 0
  3447  000A46  0100               	movlb	0	; () banked
  3448  000A48  51AC               	movf	printf@fval& (0+255),w,b
  3449  000A4A  0100               	movlb	0	; () banked
  3450  000A4C  11AD               	iorwf	(printf@fval+1)& (0+255),w,b
  3451  000A4E  0100               	movlb	0	; () banked
  3452  000A50  11AE               	iorwf	(printf@fval+2)& (0+255),w,b
  3453  000A52  B4D8               	btfsc	status,2,c
  3454  000A54  D05F               	goto	l371
  3455                           
  3456                           ; BSR set to: 0
  3457  000A56  C0AC  F07F         	movff	printf@fval,___fttol@f1
  3458  000A5A  C0AD  F080         	movff	printf@fval+1,___fttol@f1+1
  3459  000A5E  C0AE  F081         	movff	printf@fval+2,___fttol@f1+2
  3460  000A62  EC8E  F010         	call	___fttol	;wreg free
  3461  000A66  0100               	movlb	0	; () banked
  3462  000A68  517F               	movf	?___fttol& (0+255),w,b
  3463  000A6A  0100               	movlb	0	; () banked
  3464  000A6C  1180               	iorwf	(?___fttol+1)& (0+255),w,b
  3465  000A6E  0100               	movlb	0	; () banked
  3466  000A70  1181               	iorwf	(?___fttol+2)& (0+255),w,b
  3467  000A72  0100               	movlb	0	; () banked
  3468  000A74  1182               	iorwf	(?___fttol+3)& (0+255),w,b
  3469  000A76  A4D8               	btfss	status,2,c
  3470  000A78  D04D               	goto	l371
  3471                           
  3472                           ; BSR set to: 0
  3473  000A7A  0100               	movlb	0	; () banked
  3474  000A7C  BFA7               	btfsc	(printf@exp+1)& (0+255),7,b
  3475  000A7E  D04A               	goto	l371
  3476  000A80  0100               	movlb	0	; () banked
  3477  000A82  51A7               	movf	(printf@exp+1)& (0+255),w,b
  3478  000A84  E105               	bnz	l3992
  3479  000A86  0E02               	movlw	2
  3480  000A88  0100               	movlb	0	; () banked
  3481  000A8A  5DA6               	subwf	printf@exp& (0+255),w,b
  3482  000A8C  A0D8               	btfss	status,0,c
  3483  000A8E  D042               	goto	l371
  3484  000A90                     u4640:
  3485  000A90                     l3992:
  3486                           
  3487                           ; BSR set to: 0
  3488                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  3489  000A90  C09E  F013         	movff	printf@tmpval,___ftge@ff1
  3490  000A94  C09F  F014         	movff	printf@tmpval+1,___ftge@ff1+1
  3491  000A98  C0A0  F015         	movff	printf@tmpval+2,___ftge@ff1+2
  3492  000A9C  0E70               	movlw	112
  3493  000A9E  6E16               	movwf	___ftge@ff2,c
  3494  000AA0  0E89               	movlw	137
  3495  000AA2  6E17               	movwf	___ftge@ff2+1,c
  3496  000AA4  0E40               	movlw	64
  3497  000AA6  6E18               	movwf	___ftge@ff2+2,c
  3498  000AA8  EC41  F015         	call	___ftge	;wreg free
  3499  000AAC  B0D8               	btfsc	status,0,c
  3500  000AAE  D003               	goto	l374
  3501                           
  3502                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  3503  000AB0  0100               	movlb	0	; () banked
  3504  000AB2  0EF7               	movlw	247
  3505  000AB4  D002               	goto	L1
  3506  000AB6                     l374:
  3507                           
  3508                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  3509                           
  3510                           ; BSR set to: 0
  3511  000AB6  0100               	movlb	0	; () banked
  3512  000AB8  0EF8               	movlw	248
  3513  000ABA                     L1:
  3514  000ABA  27A6               	addwf	printf@exp& (0+255),f,b
  3515  000ABC  0EFF               	movlw	255
  3516  000ABE  23A7               	addwfc	(printf@exp+1)& (0+255),f,b
  3517                           
  3518                           ; BSR set to: 0
  3519                           ;doprnt.c: 1124: }
  3520                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  3521                           
  3522                           ; BSR set to: 0
  3523  000AC0  0100               	movlb	0	; () banked
  3524  000AC2  51A6               	movf	printf@exp& (0+255),w,b
  3525  000AC4  EC25  F009         	call	_scale
  3526  000AC8  C078  F09E         	movff	?_scale,printf@tmpval
  3527  000ACC  C079  F09F         	movff	?_scale+1,printf@tmpval+1
  3528  000AD0  C07A  F0A0         	movff	?_scale+2,printf@tmpval+2
  3529                           
  3530                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  3531  000AD4  C0AC  F013         	movff	printf@fval,__tdiv_to_l_@f1
  3532  000AD8  C0AD  F014         	movff	printf@fval+1,__tdiv_to_l_@f1+1
  3533  000ADC  C0AE  F015         	movff	printf@fval+2,__tdiv_to_l_@f1+2
  3534  000AE0  C09E  F016         	movff	printf@tmpval,__tdiv_to_l_@f2
  3535  000AE4  C09F  F017         	movff	printf@tmpval+1,__tdiv_to_l_@f2+1
  3536  000AE8  C0A0  F018         	movff	printf@tmpval+2,__tdiv_to_l_@f2+2
  3537  000AEC  EC30  F011         	call	__tdiv_to_l_	;wreg free
  3538  000AF0  C013  F0A2         	movff	?__tdiv_to_l_,printf@val
  3539  000AF4  C014  F0A3         	movff	?__tdiv_to_l_+1,printf@val+1
  3540  000AF8  C015  F0A4         	movff	?__tdiv_to_l_+2,printf@val+2
  3541  000AFC  C016  F0A5         	movff	?__tdiv_to_l_+3,printf@val+3
  3542                           
  3543                           ;doprnt.c: 1129: fval = 0.0;
  3544  000B00  0E00               	movlw	0
  3545  000B02  0100               	movlb	0	; () banked
  3546  000B04  6FAC               	movwf	printf@fval& (0+255),b
  3547  000B06  0E00               	movlw	0
  3548  000B08  0100               	movlb	0	; () banked
  3549  000B0A  6FAD               	movwf	(printf@fval+1)& (0+255),b
  3550  000B0C  0E00               	movlw	0
  3551  000B0E  0100               	movlb	0	; () banked
  3552  000B10  6FAE               	movwf	(printf@fval+2)& (0+255),b
  3553                           
  3554                           ;doprnt.c: 1130: } else {
  3555  000B12  D033               	goto	l380
  3556  000B14                     l371:
  3557                           
  3558                           ; BSR set to: 0
  3559                           ;doprnt.c: 1131: val = (unsigned long)fval;
  3560                           
  3561                           ; BSR set to: 0
  3562  000B14  C0AC  F07F         	movff	printf@fval,___fttol@f1
  3563  000B18  C0AD  F080         	movff	printf@fval+1,___fttol@f1+1
  3564  000B1C  C0AE  F081         	movff	printf@fval+2,___fttol@f1+2
  3565  000B20  EC8E  F010         	call	___fttol	;wreg free
  3566  000B24  C07F  F0A2         	movff	?___fttol,printf@val
  3567  000B28  C080  F0A3         	movff	?___fttol+1,printf@val+1
  3568  000B2C  C081  F0A4         	movff	?___fttol+2,printf@val+2
  3569  000B30  C082  F0A5         	movff	?___fttol+3,printf@val+3
  3570                           
  3571                           ;doprnt.c: 1132: fval -= (double)val;
  3572  000B34  C0AC  F033         	movff	printf@fval,___ftsub@f1
  3573  000B38  C0AD  F034         	movff	printf@fval+1,___ftsub@f1+1
  3574  000B3C  C0AE  F035         	movff	printf@fval+2,___ftsub@f1+2
  3575  000B40  C0A2  F01B         	movff	printf@val,___lltoft@c
  3576  000B44  C0A3  F01C         	movff	printf@val+1,___lltoft@c+1
  3577  000B48  C0A4  F01D         	movff	printf@val+2,___lltoft@c+2
  3578  000B4C  C0A5  F01E         	movff	printf@val+3,___lltoft@c+3
  3579  000B50  ECDC  F016         	call	___lltoft	;wreg free
  3580  000B54  C01B  F036         	movff	?___lltoft,___ftsub@f2
  3581  000B58  C01C  F037         	movff	?___lltoft+1,___ftsub@f2+1
  3582  000B5C  C01D  F038         	movff	?___lltoft+2,___ftsub@f2+2
  3583  000B60  EC2F  F017         	call	___ftsub	;wreg free
  3584  000B64  C033  F0AC         	movff	?___ftsub,printf@fval
  3585  000B68  C034  F0AD         	movff	?___ftsub+1,printf@fval+1
  3586  000B6C  C035  F0AE         	movff	?___ftsub+2,printf@fval+2
  3587                           
  3588                           ;doprnt.c: 1133: exp = 0;
  3589  000B70  0E00               	movlw	0
  3590  000B72  0100               	movlb	0	; () banked
  3591  000B74  6FA7               	movwf	(printf@exp+1)& (0+255),b
  3592  000B76  0E00               	movlw	0
  3593  000B78  6FA6               	movwf	printf@exp& (0+255),b
  3594  000B7A                     l380:
  3595                           
  3596                           ; BSR set to: 0
  3597                           ;doprnt.c: 1134: }
  3598                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  3599                           
  3600                           ; BSR set to: 0
  3601  000B7A  0E01               	movlw	1
  3602  000B7C  0100               	movlb	0	; () banked
  3603  000B7E  6FB1               	movwf	printf@c& (0+255),b
  3604  000B80                     l4012:
  3605                           
  3606                           ; BSR set to: 0
  3607  000B80  0E0A               	movlw	10
  3608  000B82  0100               	movlb	0	; () banked
  3609  000B84  19B1               	xorwf	printf@c& (0+255),w,b
  3610  000B86  B4D8               	btfsc	status,2,c
  3611  000B88  D01E               	goto	u4680
  3612                           
  3613                           ; BSR set to: 0
  3614                           ;doprnt.c: 1137: if(val < dpowers[c])
  3615                           
  3616                           ; BSR set to: 0
  3617                           
  3618                           ; BSR set to: 0
  3619  000B8A  0100               	movlb	0	; () banked
  3620  000B8C  51B1               	movf	printf@c& (0+255),w,b
  3621  000B8E  0D04               	mullw	4
  3622  000B90  0E01               	movlw	low _dpowers
  3623  000B92  24F3               	addwf	prodl,w,c
  3624  000B94  6EF6               	movwf	tblptrl,c
  3625  000B96  0E06               	movlw	high _dpowers
  3626  000B98  20F4               	addwfc	prodh,w,c
  3627  000B9A  6EF7               	movwf	tblptrh,c
  3628  000B9C                     	if	0	;There are less than 3 active tblptr bytes
  3629  000B9C                     	endif
  3630  000B9C  0009               	tblrd		*+
  3631  000B9E  50F5               	movf	tablat,w,c
  3632  000BA0  0100               	movlb	0	; () banked
  3633  000BA2  5DA2               	subwf	printf@val& (0+255),w,b
  3634  000BA4  0009               	tblrd		*+
  3635  000BA6  50F5               	movf	tablat,w,c
  3636  000BA8  0100               	movlb	0	; () banked
  3637  000BAA  59A3               	subwfb	(printf@val+1)& (0+255),w,b
  3638  000BAC  0009               	tblrd		*+
  3639  000BAE  50F5               	movf	tablat,w,c
  3640  000BB0  0100               	movlb	0	; () banked
  3641  000BB2  59A4               	subwfb	(printf@val+2)& (0+255),w,b
  3642  000BB4  0009               	tblrd		*+
  3643  000BB6  50F5               	movf	tablat,w,c
  3644  000BB8  0100               	movlb	0	; () banked
  3645  000BBA  59A5               	subwfb	(printf@val+3)& (0+255),w,b
  3646  000BBC  A0D8               	btfss	status,0,c
  3647  000BBE  D003               	goto	u4680
  3648                           
  3649                           ; BSR set to: 0
  3650                           
  3651                           ; BSR set to: 0
  3652                           
  3653                           ; BSR set to: 0
  3654                           ;doprnt.c: 1138: break;
  3655  000BC0  0100               	movlb	0	; () banked
  3656  000BC2  2BB1               	incf	printf@c& (0+255),f,b
  3657  000BC4  D7DD               	goto	l4012
  3658  000BC6                     u4680:
  3659                           
  3660                           ; BSR set to: 0
  3661                           ;doprnt.c: 1142: width -= prec + c + exp;
  3662                           
  3663                           ; BSR set to: 0
  3664  000BC6  C0B1  F093         	movff	printf@c,??_printf
  3665  000BCA  0100               	movlb	0	; () banked
  3666  000BCC  6B94               	clrf	(??_printf+1)& (0+255),b
  3667  000BCE  BF93               	btfsc	??_printf& (0+255),7,b
  3668  000BD0  0794               	decf	(??_printf+1)& (0+255),f,b
  3669  000BD2  0100               	movlb	0	; () banked
  3670  000BD4  51AF               	movf	printf@prec& (0+255),w,b
  3671  000BD6  0100               	movlb	0	; () banked
  3672  000BD8  2793               	addwf	??_printf& (0+255),f,b
  3673  000BDA  0100               	movlb	0	; () banked
  3674  000BDC  51B0               	movf	(printf@prec+1)& (0+255),w,b
  3675  000BDE  0100               	movlb	0	; () banked
  3676  000BE0  2394               	addwfc	(??_printf+1)& (0+255),f,b
  3677  000BE2  0100               	movlb	0	; () banked
  3678  000BE4  51A6               	movf	printf@exp& (0+255),w,b
  3679  000BE6  0100               	movlb	0	; () banked
  3680  000BE8  2793               	addwf	??_printf& (0+255),f,b
  3681  000BEA  0100               	movlb	0	; () banked
  3682  000BEC  51A7               	movf	(printf@exp+1)& (0+255),w,b
  3683  000BEE  0100               	movlb	0	; () banked
  3684  000BF0  2394               	addwfc	(??_printf+1)& (0+255),f,b
  3685  000BF2  0100               	movlb	0	; () banked
  3686  000BF4  5193               	movf	??_printf& (0+255),w,b
  3687  000BF6  0100               	movlb	0	; () banked
  3688  000BF8  5FAA               	subwf	printf@width& (0+255),f,b
  3689  000BFA  0100               	movlb	0	; () banked
  3690  000BFC  5194               	movf	(??_printf+1)& (0+255),w,b
  3691  000BFE  0100               	movlb	0	; () banked
  3692  000C00  5BAB               	subwfb	(printf@width+1)& (0+255),f,b
  3693                           
  3694                           ;doprnt.c: 1143: if(
  3695                           ;doprnt.c: 1147: prec)
  3696  000C02  0100               	movlb	0	; () banked
  3697  000C04  51AF               	movf	printf@prec& (0+255),w,b
  3698  000C06  0100               	movlb	0	; () banked
  3699  000C08  11B0               	iorwf	(printf@prec+1)& (0+255),w,b
  3700  000C0A  B4D8               	btfsc	status,2,c
  3701  000C0C  D004               	goto	l384
  3702                           
  3703                           ; BSR set to: 0
  3704                           ;doprnt.c: 1148: width--;
  3705  000C0E  0100               	movlb	0	; () banked
  3706  000C10  07AA               	decf	printf@width& (0+255),f,b
  3707  000C12  A0D8               	btfss	status,0,c
  3708  000C14  07AB               	decf	(printf@width+1)& (0+255),f,b
  3709  000C16                     l384:
  3710                           
  3711                           ; BSR set to: 0
  3712                           ;doprnt.c: 1149: if(flag & 0x03)
  3713                           
  3714                           ; BSR set to: 0
  3715  000C16  0E03               	movlw	3
  3716  000C18  0100               	movlb	0	; () banked
  3717  000C1A  15A8               	andwf	printf@flag& (0+255),w,b
  3718  000C1C  0100               	movlb	0	; () banked
  3719  000C1E  6F93               	movwf	??_printf& (0+255),b
  3720  000C20  0E00               	movlw	0
  3721  000C22  0100               	movlb	0	; () banked
  3722  000C24  15A9               	andwf	(printf@flag+1)& (0+255),w,b
  3723  000C26  0100               	movlb	0	; () banked
  3724  000C28  6F94               	movwf	(??_printf+1)& (0+255),b
  3725  000C2A  0100               	movlb	0	; () banked
  3726  000C2C  5193               	movf	??_printf& (0+255),w,b
  3727  000C2E  0100               	movlb	0	; () banked
  3728  000C30  1194               	iorwf	(??_printf+1)& (0+255),w,b
  3729  000C32  B4D8               	btfsc	status,2,c
  3730  000C34  D004               	goto	l385
  3731                           
  3732                           ; BSR set to: 0
  3733                           ;doprnt.c: 1150: width--;
  3734  000C36  0100               	movlb	0	; () banked
  3735  000C38  07AA               	decf	printf@width& (0+255),f,b
  3736  000C3A  A0D8               	btfss	status,0,c
  3737  000C3C  07AB               	decf	(printf@width+1)& (0+255),f,b
  3738  000C3E                     l385:
  3739                           
  3740                           ; BSR set to: 0
  3741                           ;doprnt.c: 1153: if(flag & 0x04) {
  3742                           
  3743                           ; BSR set to: 0
  3744  000C3E  0100               	movlb	0	; () banked
  3745  000C40  A5A8               	btfss	printf@flag& (0+255),2,b
  3746  000C42  D02D               	goto	l392
  3747                           
  3748                           ; BSR set to: 0
  3749                           ;doprnt.c: 1157: if(flag & 0x03)
  3750  000C44  0E03               	movlw	3
  3751  000C46  0100               	movlb	0	; () banked
  3752  000C48  15A8               	andwf	printf@flag& (0+255),w,b
  3753  000C4A  0100               	movlb	0	; () banked
  3754  000C4C  6F93               	movwf	??_printf& (0+255),b
  3755  000C4E  0E00               	movlw	0
  3756  000C50  0100               	movlb	0	; () banked
  3757  000C52  15A9               	andwf	(printf@flag+1)& (0+255),w,b
  3758  000C54  0100               	movlb	0	; () banked
  3759  000C56  6F94               	movwf	(??_printf+1)& (0+255),b
  3760  000C58  0100               	movlb	0	; () banked
  3761  000C5A  5193               	movf	??_printf& (0+255),w,b
  3762  000C5C  0100               	movlb	0	; () banked
  3763  000C5E  1194               	iorwf	(??_printf+1)& (0+255),w,b
  3764  000C60  B4D8               	btfsc	status,2,c
  3765  000C62  D00B               	goto	l388
  3766                           
  3767                           ; BSR set to: 0
  3768                           ;doprnt.c: 1159: (putch('-') );
  3769  000C64  0E2D               	movlw	45
  3770  000C66  EC89  F018         	call	_putch
  3771                           
  3772                           ;doprnt.c: 1168: while(width > 0) {
  3773  000C6A  D007               	goto	l388
  3774  000C6C                     l4038:
  3775                           
  3776                           ;doprnt.c: 1169: (putch('0') );
  3777  000C6C  0E30               	movlw	48
  3778  000C6E  EC89  F018         	call	_putch
  3779                           
  3780                           ;doprnt.c: 1170: width--;
  3781  000C72  0100               	movlb	0	; () banked
  3782  000C74  07AA               	decf	printf@width& (0+255),f,b
  3783  000C76  A0D8               	btfss	status,0,c
  3784  000C78  07AB               	decf	(printf@width+1)& (0+255),f,b
  3785  000C7A                     l388:
  3786                           
  3787                           ; BSR set to: 0
  3788  000C7A  0100               	movlb	0	; () banked
  3789  000C7C  BFAB               	btfsc	(printf@width+1)& (0+255),7,b
  3790  000C7E  D073               	goto	l396
  3791  000C80  0100               	movlb	0	; () banked
  3792  000C82  51AB               	movf	(printf@width+1)& (0+255),w,b
  3793  000C84  E1F3               	bnz	l4038
  3794  000C86  0100               	movlb	0	; () banked
  3795  000C88  05AA               	decf	printf@width& (0+255),w,b
  3796  000C8A  A0D8               	btfss	status,0,c
  3797  000C8C  D06C               	goto	l396
  3798  000C8E  D7EE               	goto	l389
  3799  000C90                     l4044:
  3800                           
  3801                           ; BSR set to: 0
  3802                           ;doprnt.c: 1181: (putch(' ') );
  3803  000C90  0E20               	movlw	32
  3804  000C92  EC89  F018         	call	_putch
  3805                           
  3806                           ;doprnt.c: 1182: width--;
  3807  000C96  0100               	movlb	0	; () banked
  3808  000C98  07AA               	decf	printf@width& (0+255),f,b
  3809  000C9A  A0D8               	btfss	status,0,c
  3810  000C9C  07AB               	decf	(printf@width+1)& (0+255),f,b
  3811  000C9E                     l392:
  3812                           
  3813                           ; BSR set to: 0
  3814                           
  3815                           ; BSR set to: 0
  3816  000C9E  0100               	movlb	0	; () banked
  3817  000CA0  BFAB               	btfsc	(printf@width+1)& (0+255),7,b
  3818  000CA2  D007               	goto	u4740
  3819  000CA4  0100               	movlb	0	; () banked
  3820  000CA6  51AB               	movf	(printf@width+1)& (0+255),w,b
  3821  000CA8  E1F3               	bnz	l4044
  3822  000CAA  0100               	movlb	0	; () banked
  3823  000CAC  05AA               	decf	printf@width& (0+255),w,b
  3824  000CAE  B0D8               	btfsc	status,0,c
  3825  000CB0  D7EF               	goto	l393
  3826  000CB2                     u4740:
  3827                           
  3828                           ; BSR set to: 0
  3829                           ;doprnt.c: 1183: }
  3830                           ;doprnt.c: 1188: if(flag & 0x03)
  3831                           
  3832                           ; BSR set to: 0
  3833  000CB2  0E03               	movlw	3
  3834  000CB4  0100               	movlb	0	; () banked
  3835  000CB6  15A8               	andwf	printf@flag& (0+255),w,b
  3836  000CB8  0100               	movlb	0	; () banked
  3837  000CBA  6F93               	movwf	??_printf& (0+255),b
  3838  000CBC  0E00               	movlw	0
  3839  000CBE  0100               	movlb	0	; () banked
  3840  000CC0  15A9               	andwf	(printf@flag+1)& (0+255),w,b
  3841  000CC2  0100               	movlb	0	; () banked
  3842  000CC4  6F94               	movwf	(??_printf+1)& (0+255),b
  3843  000CC6  0100               	movlb	0	; () banked
  3844  000CC8  5193               	movf	??_printf& (0+255),w,b
  3845  000CCA  0100               	movlb	0	; () banked
  3846  000CCC  1194               	iorwf	(??_printf+1)& (0+255),w,b
  3847  000CCE  B4D8               	btfsc	status,2,c
  3848  000CD0  D04A               	goto	l396
  3849                           
  3850                           ; BSR set to: 0
  3851                           ;doprnt.c: 1190: (putch('-') );
  3852  000CD2  0E2D               	movlw	45
  3853  000CD4  EC89  F018         	call	_putch
  3854                           
  3855                           ;doprnt.c: 1195: }
  3856                           ;doprnt.c: 1196: while(c--) {
  3857  000CD8  D046               	goto	l396
  3858  000CDA                     
  3859                           ;doprnt.c: 1200: {
  3860                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  3861  000CDA  C0A2  F013         	movff	printf@val,___lldiv@dividend
  3862  000CDE  C0A3  F014         	movff	printf@val+1,___lldiv@dividend+1
  3863  000CE2  C0A4  F015         	movff	printf@val+2,___lldiv@dividend+2
  3864  000CE6  C0A5  F016         	movff	printf@val+3,___lldiv@dividend+3
  3865  000CEA  0100               	movlb	0	; () banked
  3866  000CEC  51B1               	movf	printf@c& (0+255),w,b
  3867  000CEE  0D04               	mullw	4
  3868  000CF0  0E01               	movlw	low _dpowers
  3869  000CF2  24F3               	addwf	prodl,w,c
  3870  000CF4  6EF6               	movwf	tblptrl,c
  3871  000CF6  0E06               	movlw	high _dpowers
  3872  000CF8  20F4               	addwfc	prodh,w,c
  3873  000CFA  6EF7               	movwf	tblptrh,c
  3874  000CFC                     	if	0	;There are less than 3 active tblptr bytes
  3875  000CFC                     	endif
  3876  000CFC  0009               	tblrd		*+
  3877  000CFE  CFF5 F017          	movff	tablat,___lldiv@divisor
  3878  000D02  0009               	tblrd		*+
  3879  000D04  CFF5 F018          	movff	tablat,___lldiv@divisor+1
  3880  000D08  0009               	tblrd		*+
  3881  000D0A  CFF5 F019          	movff	tablat,___lldiv@divisor+2
  3882  000D0E  000A               	tblrd		*-
  3883  000D10  CFF5 F01A          	movff	tablat,___lldiv@divisor+3
  3884  000D14  ECCB  F015         	call	___lldiv	;wreg free
  3885  000D18  C013  F09E         	movff	?___lldiv,printf@tmpval
  3886  000D1C  C014  F09F         	movff	?___lldiv+1,printf@tmpval+1
  3887  000D20  C015  F0A0         	movff	?___lldiv+2,printf@tmpval+2
  3888  000D24  C016  F0A1         	movff	?___lldiv+3,printf@tmpval+3
  3889                           
  3890                           ;doprnt.c: 1202: tmpval.vd %= 10;
  3891  000D28  C09E  F020         	movff	printf@tmpval,___llmod@dividend
  3892  000D2C  C09F  F021         	movff	printf@tmpval+1,___llmod@dividend+1
  3893  000D30  C0A0  F022         	movff	printf@tmpval+2,___llmod@dividend+2
  3894  000D34  C0A1  F023         	movff	printf@tmpval+3,___llmod@dividend+3
  3895  000D38  0E0A               	movlw	10
  3896  000D3A  6E24               	movwf	___llmod@divisor,c
  3897  000D3C  0E00               	movlw	0
  3898  000D3E  6E25               	movwf	___llmod@divisor+1,c
  3899  000D40  0E00               	movlw	0
  3900  000D42  6E26               	movwf	___llmod@divisor+2,c
  3901  000D44  0E00               	movlw	0
  3902  000D46  6E27               	movwf	___llmod@divisor+3,c
  3903  000D48  EC79  F016         	call	___llmod	;wreg free
  3904  000D4C  C020  F09E         	movff	?___llmod,printf@tmpval
  3905  000D50  C021  F09F         	movff	?___llmod+1,printf@tmpval+1
  3906  000D54  C022  F0A0         	movff	?___llmod+2,printf@tmpval+2
  3907  000D58  C023  F0A1         	movff	?___llmod+3,printf@tmpval+3
  3908                           
  3909                           ;doprnt.c: 1203: (putch('0' + tmpval.vd) );
  3910  000D5C  0100               	movlb	0	; () banked
  3911  000D5E  519E               	movf	printf@tmpval& (0+255),w,b
  3912  000D60  0F30               	addlw	48
  3913  000D62  EC89  F018         	call	_putch
  3914  000D66                     l396:
  3915  000D66  0100               	movlb	0	; () banked
  3916  000D68  07B1               	decf	printf@c& (0+255),f,b
  3917  000D6A  0100               	movlb	0	; () banked
  3918  000D6C  29B1               	incf	printf@c& (0+255),w,b
  3919  000D6E  B4D8               	btfsc	status,2,c
  3920  000D70  D008               	goto	l399
  3921  000D72  D7B3               	goto	l397
  3922  000D74                     l4062:
  3923                           
  3924                           ; BSR set to: 0
  3925                           ;doprnt.c: 1208: (putch('0') );
  3926  000D74  0E30               	movlw	48
  3927  000D76  EC89  F018         	call	_putch
  3928                           
  3929                           ;doprnt.c: 1209: exp--;
  3930  000D7A  0100               	movlb	0	; () banked
  3931  000D7C  07A6               	decf	printf@exp& (0+255),f,b
  3932  000D7E  A0D8               	btfss	status,0,c
  3933  000D80  07A7               	decf	(printf@exp+1)& (0+255),f,b
  3934  000D82                     l399:
  3935                           
  3936                           ; BSR set to: 0
  3937                           
  3938                           ; BSR set to: 0
  3939  000D82  0100               	movlb	0	; () banked
  3940  000D84  BFA7               	btfsc	(printf@exp+1)& (0+255),7,b
  3941  000D86  D007               	goto	u4770
  3942  000D88  0100               	movlb	0	; () banked
  3943  000D8A  51A7               	movf	(printf@exp+1)& (0+255),w,b
  3944  000D8C  E1F3               	bnz	l4062
  3945  000D8E  0100               	movlb	0	; () banked
  3946  000D90  05A6               	decf	printf@exp& (0+255),w,b
  3947  000D92  B0D8               	btfsc	status,0,c
  3948  000D94  D7EF               	goto	l400
  3949  000D96                     u4770:
  3950                           
  3951                           ; BSR set to: 0
  3952                           ;doprnt.c: 1210: }
  3953                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  3954                           
  3955                           ; BSR set to: 0
  3956  000D96  0100               	movlb	0	; () banked
  3957  000D98  BFB0               	btfsc	(printf@prec+1)& (0+255),7,b
  3958  000D9A  D00C               	goto	l402
  3959  000D9C  0100               	movlb	0	; () banked
  3960  000D9E  51B0               	movf	(printf@prec+1)& (0+255),w,b
  3961  000DA0  E105               	bnz	u4780
  3962  000DA2  0E09               	movlw	9
  3963  000DA4  0100               	movlb	0	; () banked
  3964  000DA6  5DAF               	subwf	printf@prec& (0+255),w,b
  3965  000DA8  A0D8               	btfss	status,0,c
  3966  000DAA  D004               	goto	l402
  3967  000DAC                     u4780:
  3968                           
  3969                           ; BSR set to: 0
  3970                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  3971  000DAC  0E08               	movlw	8
  3972  000DAE  0100               	movlb	0	; () banked
  3973  000DB0  6FB1               	movwf	printf@c& (0+255),b
  3974  000DB2  D002               	goto	l403
  3975  000DB4                     l402:
  3976                           
  3977                           ; BSR set to: 0
  3978                           ;doprnt.c: 1213: else
  3979                           ;doprnt.c: 1214: c = prec;
  3980  000DB4  C0AF  F0B1         	movff	printf@prec,printf@c
  3981  000DB8                     l403:
  3982                           
  3983                           ; BSR set to: 0
  3984                           ;doprnt.c: 1215: prec -= c;
  3985                           
  3986                           ; BSR set to: 0
  3987  000DB8  0100               	movlb	0	; () banked
  3988  000DBA  51B1               	movf	printf@c& (0+255),w,b
  3989  000DBC  0100               	movlb	0	; () banked
  3990  000DBE  5FAF               	subwf	printf@prec& (0+255),f,b
  3991  000DC0  0E00               	movlw	0
  3992  000DC2  0100               	movlb	0	; () banked
  3993  000DC4  BFB1               	btfsc	printf@c& (0+255),7,b
  3994  000DC6  0EFF               	movlw	255
  3995  000DC8  0100               	movlb	0	; () banked
  3996  000DCA  5BB0               	subwfb	(printf@prec+1)& (0+255),f,b
  3997                           
  3998                           ; BSR set to: 0
  3999                           ;doprnt.c: 1219: if(c)
  4000  000DCC  0100               	movlb	0	; () banked
  4001  000DCE  51B1               	movf	printf@c& (0+255),w,b
  4002  000DD0  0100               	movlb	0	; () banked
  4003  000DD2  B4D8               	btfsc	status,2,c
  4004  000DD4  D003               	goto	l404
  4005                           
  4006                           ; BSR set to: 0
  4007                           ;doprnt.c: 1221: (putch('.') );
  4008  000DD6  0E2E               	movlw	46
  4009  000DD8  EC89  F018         	call	_putch
  4010  000DDC                     l404:
  4011                           
  4012                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  4013  000DDC  0100               	movlb	0	; () banked
  4014  000DDE  51B1               	movf	printf@c& (0+255),w,b
  4015  000DE0  EC25  F009         	call	_scale
  4016  000DE4  C078  F099         	movff	?_scale,_printf$1576
  4017  000DE8  C079  F09A         	movff	?_scale+1,_printf$1576+1
  4018  000DEC  C07A  F09B         	movff	?_scale+2,_printf$1576+2
  4019                           
  4020                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  4021  000DF0  C0AC  F06C         	movff	printf@fval,___ftmul@f2
  4022  000DF4  C0AD  F06D         	movff	printf@fval+1,___ftmul@f2+1
  4023  000DF8  C0AE  F06E         	movff	printf@fval+2,___ftmul@f2+2
  4024  000DFC  C099  F069         	movff	_printf$1576,___ftmul@f1
  4025  000E00  C09A  F06A         	movff	_printf$1576+1,___ftmul@f1+1
  4026  000E04  C09B  F06B         	movff	_printf$1576+2,___ftmul@f1+2
  4027  000E08  ECDF  F00F         	call	___ftmul	;wreg free
  4028  000E0C  C069  F07F         	movff	?___ftmul,___fttol@f1
  4029  000E10  C06A  F080         	movff	?___ftmul+1,___fttol@f1+1
  4030  000E14  C06B  F081         	movff	?___ftmul+2,___fttol@f1+2
  4031  000E18  EC8E  F010         	call	___fttol	;wreg free
  4032  000E1C  C07F  F0A2         	movff	?___fttol,printf@val
  4033  000E20  C080  F0A3         	movff	?___fttol+1,printf@val+1
  4034  000E24  C081  F0A4         	movff	?___fttol+2,printf@val+2
  4035  000E28  C082  F0A5         	movff	?___fttol+3,printf@val+3
  4036                           
  4037                           ;doprnt.c: 1228: while(c--) {
  4038  000E2C  D06D               	goto	l405
  4039  000E2E                     
  4040                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  4041  000E2E  C0A2  F013         	movff	printf@val,___lldiv@dividend
  4042  000E32  C0A3  F014         	movff	printf@val+1,___lldiv@dividend+1
  4043  000E36  C0A4  F015         	movff	printf@val+2,___lldiv@dividend+2
  4044  000E3A  C0A5  F016         	movff	printf@val+3,___lldiv@dividend+3
  4045  000E3E  0100               	movlb	0	; () banked
  4046  000E40  51B1               	movf	printf@c& (0+255),w,b
  4047  000E42  0D04               	mullw	4
  4048  000E44  0E01               	movlw	low _dpowers
  4049  000E46  24F3               	addwf	prodl,w,c
  4050  000E48  6EF6               	movwf	tblptrl,c
  4051  000E4A  0E06               	movlw	high _dpowers
  4052  000E4C  20F4               	addwfc	prodh,w,c
  4053  000E4E  6EF7               	movwf	tblptrh,c
  4054  000E50                     	if	0	;There are less than 3 active tblptr bytes
  4055  000E50                     	endif
  4056  000E50  0009               	tblrd		*+
  4057  000E52  CFF5 F017          	movff	tablat,___lldiv@divisor
  4058  000E56  0009               	tblrd		*+
  4059  000E58  CFF5 F018          	movff	tablat,___lldiv@divisor+1
  4060  000E5C  0009               	tblrd		*+
  4061  000E5E  CFF5 F019          	movff	tablat,___lldiv@divisor+2
  4062  000E62  000A               	tblrd		*-
  4063  000E64  CFF5 F01A          	movff	tablat,___lldiv@divisor+3
  4064  000E68  ECCB  F015         	call	___lldiv	;wreg free
  4065  000E6C  C013  F09E         	movff	?___lldiv,printf@tmpval
  4066  000E70  C014  F09F         	movff	?___lldiv+1,printf@tmpval+1
  4067  000E74  C015  F0A0         	movff	?___lldiv+2,printf@tmpval+2
  4068  000E78  C016  F0A1         	movff	?___lldiv+3,printf@tmpval+3
  4069                           
  4070                           ;doprnt.c: 1230: tmpval.vd %= 10;
  4071  000E7C  C09E  F020         	movff	printf@tmpval,___llmod@dividend
  4072  000E80  C09F  F021         	movff	printf@tmpval+1,___llmod@dividend+1
  4073  000E84  C0A0  F022         	movff	printf@tmpval+2,___llmod@dividend+2
  4074  000E88  C0A1  F023         	movff	printf@tmpval+3,___llmod@dividend+3
  4075  000E8C  0E0A               	movlw	10
  4076  000E8E  6E24               	movwf	___llmod@divisor,c
  4077  000E90  0E00               	movlw	0
  4078  000E92  6E25               	movwf	___llmod@divisor+1,c
  4079  000E94  0E00               	movlw	0
  4080  000E96  6E26               	movwf	___llmod@divisor+2,c
  4081  000E98  0E00               	movlw	0
  4082  000E9A  6E27               	movwf	___llmod@divisor+3,c
  4083  000E9C  EC79  F016         	call	___llmod	;wreg free
  4084  000EA0  C020  F09E         	movff	?___llmod,printf@tmpval
  4085  000EA4  C021  F09F         	movff	?___llmod+1,printf@tmpval+1
  4086  000EA8  C022  F0A0         	movff	?___llmod+2,printf@tmpval+2
  4087  000EAC  C023  F0A1         	movff	?___llmod+3,printf@tmpval+3
  4088                           
  4089                           ;doprnt.c: 1231: (putch('0' + tmpval.vd) );
  4090  000EB0  0100               	movlb	0	; () banked
  4091  000EB2  519E               	movf	printf@tmpval& (0+255),w,b
  4092  000EB4  0F30               	addlw	48
  4093  000EB6  EC89  F018         	call	_putch
  4094                           
  4095                           ;doprnt.c: 1232: val %= dpowers[c];
  4096  000EBA  C0A2  F020         	movff	printf@val,___llmod@dividend
  4097  000EBE  C0A3  F021         	movff	printf@val+1,___llmod@dividend+1
  4098  000EC2  C0A4  F022         	movff	printf@val+2,___llmod@dividend+2
  4099  000EC6  C0A5  F023         	movff	printf@val+3,___llmod@dividend+3
  4100  000ECA  0100               	movlb	0	; () banked
  4101  000ECC  51B1               	movf	printf@c& (0+255),w,b
  4102  000ECE  0D04               	mullw	4
  4103  000ED0  0E01               	movlw	low _dpowers
  4104  000ED2  24F3               	addwf	prodl,w,c
  4105  000ED4  6EF6               	movwf	tblptrl,c
  4106  000ED6  0E06               	movlw	high _dpowers
  4107  000ED8  20F4               	addwfc	prodh,w,c
  4108  000EDA  6EF7               	movwf	tblptrh,c
  4109  000EDC                     	if	0	;There are less than 3 active tblptr bytes
  4110  000EDC                     	endif
  4111  000EDC  0009               	tblrd		*+
  4112  000EDE  CFF5 F024          	movff	tablat,___llmod@divisor
  4113  000EE2  0009               	tblrd		*+
  4114  000EE4  CFF5 F025          	movff	tablat,___llmod@divisor+1
  4115  000EE8  0009               	tblrd		*+
  4116  000EEA  CFF5 F026          	movff	tablat,___llmod@divisor+2
  4117  000EEE  000A               	tblrd		*-
  4118  000EF0  CFF5 F027          	movff	tablat,___llmod@divisor+3
  4119  000EF4  EC79  F016         	call	___llmod	;wreg free
  4120  000EF8  C020  F0A2         	movff	?___llmod,printf@val
  4121  000EFC  C021  F0A3         	movff	?___llmod+1,printf@val+1
  4122  000F00  C022  F0A4         	movff	?___llmod+2,printf@val+2
  4123  000F04  C023  F0A5         	movff	?___llmod+3,printf@val+3
  4124  000F08                     l405:
  4125  000F08  0100               	movlb	0	; () banked
  4126  000F0A  07B1               	decf	printf@c& (0+255),f,b
  4127  000F0C  0100               	movlb	0	; () banked
  4128  000F0E  29B1               	incf	printf@c& (0+255),w,b
  4129  000F10  B4D8               	btfsc	status,2,c
  4130  000F12  D008               	goto	l408
  4131  000F14  D78C               	goto	l406
  4132  000F16                     
  4133                           ; BSR set to: 0
  4134                           ;doprnt.c: 1236: (putch('0') );
  4135                           
  4136                           ; BSR set to: 0
  4137  000F16  0E30               	movlw	48
  4138  000F18  EC89  F018         	call	_putch
  4139                           
  4140                           ;doprnt.c: 1237: prec--;
  4141  000F1C  0100               	movlb	0	; () banked
  4142  000F1E  07AF               	decf	printf@prec& (0+255),f,b
  4143  000F20  A0D8               	btfss	status,0,c
  4144  000F22  07B0               	decf	(printf@prec+1)& (0+255),f,b
  4145  000F24                     l408:
  4146                           
  4147                           ; BSR set to: 0
  4148                           
  4149                           ; BSR set to: 0
  4150  000F24  0100               	movlb	0	; () banked
  4151  000F26  51AF               	movf	printf@prec& (0+255),w,b
  4152  000F28  0100               	movlb	0	; () banked
  4153  000F2A  11B0               	iorwf	(printf@prec+1)& (0+255),w,b
  4154  000F2C  B4D8               	btfsc	status,2,c
  4155  000F2E  D17D               	goto	u5020
  4156  000F30  D7F2               	goto	l409
  4157  000F32                     l362:
  4158                           
  4159                           ; BSR set to: 0
  4160                           ;doprnt.c: 1246: }
  4161                           ;doprnt.c: 1253: {
  4162                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  4163                           
  4164                           ; BSR set to: 0
  4165  000F32  C09C  FFD9         	movff	printf@ap,fsr2l
  4166  000F36  C09D  FFDA         	movff	printf@ap+1,fsr2h
  4167  000F3A  CFDE F0A2          	movff	postinc2,printf@val
  4168  000F3E  CFDD F0A3          	movff	postdec2,printf@val+1
  4169  000F42  0100               	movlb	0	; () banked
  4170  000F44  0E00               	movlw	0
  4171  000F46  BFA3               	btfsc	(printf@val+1)& (0+255),7,b
  4172  000F48  0EFF               	movlw	-1
  4173  000F4A  6FA4               	movwf	(printf@val+2)& (0+255),b
  4174  000F4C  6FA5               	movwf	(printf@val+3)& (0+255),b
  4175                           
  4176                           ; BSR set to: 0
  4177  000F4E  0E02               	movlw	2
  4178  000F50  0100               	movlb	0	; () banked
  4179  000F52  279C               	addwf	printf@ap& (0+255),f,b
  4180  000F54  0E00               	movlw	0
  4181  000F56  239D               	addwfc	(printf@ap+1)& (0+255),f,b
  4182                           
  4183                           ; BSR set to: 0
  4184                           ;doprnt.c: 1261: if((long)val < 0) {
  4185  000F58  0100               	movlb	0	; () banked
  4186  000F5A  AFA5               	btfss	(printf@val+3)& (0+255),7,b
  4187  000F5C  D00C               	goto	l411
  4188                           
  4189                           ; BSR set to: 0
  4190                           ;doprnt.c: 1262: flag |= 0x03;
  4191  000F5E  0E03               	movlw	3
  4192  000F60  0100               	movlb	0	; () banked
  4193  000F62  13A8               	iorwf	printf@flag& (0+255),f,b
  4194                           
  4195                           ; BSR set to: 0
  4196                           ;doprnt.c: 1263: val = -val;
  4197  000F64  0100               	movlb	0	; () banked
  4198  000F66  1FA5               	comf	(printf@val+3)& (0+255),f,b
  4199  000F68  1FA4               	comf	(printf@val+2)& (0+255),f,b
  4200  000F6A  1FA3               	comf	(printf@val+1)& (0+255),f,b
  4201  000F6C  6DA2               	negf	printf@val& (0+255),b
  4202  000F6E  0E00               	movlw	0
  4203  000F70  23A3               	addwfc	(printf@val+1)& (0+255),f,b
  4204  000F72  23A4               	addwfc	(printf@val+2)& (0+255),f,b
  4205  000F74  23A5               	addwfc	(printf@val+3)& (0+255),f,b
  4206  000F76                     l411:
  4207                           
  4208                           ; BSR set to: 0
  4209                           ;doprnt.c: 1264: }
  4210                           ;doprnt.c: 1266: }
  4211                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  4212                           
  4213                           ; BSR set to: 0
  4214  000F76  0100               	movlb	0	; () banked
  4215  000F78  51AF               	movf	printf@prec& (0+255),w,b
  4216  000F7A  0100               	movlb	0	; () banked
  4217  000F7C  11B0               	iorwf	(printf@prec+1)& (0+255),w,b
  4218  000F7E  A4D8               	btfss	status,2,c
  4219  000F80  D00D               	goto	l412
  4220                           
  4221                           ; BSR set to: 0
  4222  000F82  0100               	movlb	0	; () banked
  4223  000F84  51A2               	movf	printf@val& (0+255),w,b
  4224  000F86  0100               	movlb	0	; () banked
  4225  000F88  11A3               	iorwf	(printf@val+1)& (0+255),w,b
  4226  000F8A  0100               	movlb	0	; () banked
  4227  000F8C  11A4               	iorwf	(printf@val+2)& (0+255),w,b
  4228  000F8E  0100               	movlb	0	; () banked
  4229  000F90  11A5               	iorwf	(printf@val+3)& (0+255),w,b
  4230  000F92  A4D8               	btfss	status,2,c
  4231  000F94  D003               	goto	l412
  4232                           
  4233                           ; BSR set to: 0
  4234                           ;doprnt.c: 1291: prec++;
  4235  000F96  0100               	movlb	0	; () banked
  4236  000F98  4BAF               	infsnz	printf@prec& (0+255),f,b
  4237  000F9A  2BB0               	incf	(printf@prec+1)& (0+255),f,b
  4238  000F9C                     l412:
  4239                           
  4240                           ; BSR set to: 0
  4241                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  4242                           
  4243                           ; BSR set to: 0
  4244  000F9C  0E01               	movlw	1
  4245  000F9E  0100               	movlb	0	; () banked
  4246  000FA0  6FB1               	movwf	printf@c& (0+255),b
  4247  000FA2                     l4116:
  4248                           
  4249                           ; BSR set to: 0
  4250  000FA2  0E0A               	movlw	10
  4251  000FA4  0100               	movlb	0	; () banked
  4252  000FA6  19B1               	xorwf	printf@c& (0+255),w,b
  4253  000FA8  B4D8               	btfsc	status,2,c
  4254  000FAA  D01E               	goto	u4870
  4255                           
  4256                           ; BSR set to: 0
  4257                           ;doprnt.c: 1306: if(val < dpowers[c])
  4258                           
  4259                           ; BSR set to: 0
  4260                           
  4261                           ; BSR set to: 0
  4262  000FAC  0100               	movlb	0	; () banked
  4263  000FAE  51B1               	movf	printf@c& (0+255),w,b
  4264  000FB0  0D04               	mullw	4
  4265  000FB2  0E01               	movlw	low _dpowers
  4266  000FB4  24F3               	addwf	prodl,w,c
  4267  000FB6  6EF6               	movwf	tblptrl,c
  4268  000FB8  0E06               	movlw	high _dpowers
  4269  000FBA  20F4               	addwfc	prodh,w,c
  4270  000FBC  6EF7               	movwf	tblptrh,c
  4271  000FBE                     	if	0	;There are less than 3 active tblptr bytes
  4272  000FBE                     	endif
  4273  000FBE  0009               	tblrd		*+
  4274  000FC0  50F5               	movf	tablat,w,c
  4275  000FC2  0100               	movlb	0	; () banked
  4276  000FC4  5DA2               	subwf	printf@val& (0+255),w,b
  4277  000FC6  0009               	tblrd		*+
  4278  000FC8  50F5               	movf	tablat,w,c
  4279  000FCA  0100               	movlb	0	; () banked
  4280  000FCC  59A3               	subwfb	(printf@val+1)& (0+255),w,b
  4281  000FCE  0009               	tblrd		*+
  4282  000FD0  50F5               	movf	tablat,w,c
  4283  000FD2  0100               	movlb	0	; () banked
  4284  000FD4  59A4               	subwfb	(printf@val+2)& (0+255),w,b
  4285  000FD6  0009               	tblrd		*+
  4286  000FD8  50F5               	movf	tablat,w,c
  4287  000FDA  0100               	movlb	0	; () banked
  4288  000FDC  59A5               	subwfb	(printf@val+3)& (0+255),w,b
  4289  000FDE  A0D8               	btfss	status,0,c
  4290  000FE0  D003               	goto	u4870
  4291                           
  4292                           ; BSR set to: 0
  4293                           
  4294                           ; BSR set to: 0
  4295                           
  4296                           ; BSR set to: 0
  4297                           ;doprnt.c: 1307: break;
  4298  000FE2  0100               	movlb	0	; () banked
  4299  000FE4  2BB1               	incf	printf@c& (0+255),f,b
  4300  000FE6  D7DD               	goto	l4116
  4301  000FE8                     u4870:
  4302                           
  4303                           ; BSR set to: 0
  4304                           ;doprnt.c: 1339: if(c < prec)
  4305                           
  4306                           ; BSR set to: 0
  4307  000FE8  0E80               	movlw	128
  4308  000FEA  0100               	movlb	0	; () banked
  4309  000FEC  BFB1               	btfsc	printf@c& (0+255),7,b
  4310  000FEE  0E7F               	movlw	127
  4311  000FF0  0100               	movlb	0	; () banked
  4312  000FF2  6F93               	movwf	??_printf& (0+255),b
  4313  000FF4  0100               	movlb	0	; () banked
  4314  000FF6  51AF               	movf	printf@prec& (0+255),w,b
  4315  000FF8  0100               	movlb	0	; () banked
  4316  000FFA  5DB1               	subwf	printf@c& (0+255),w,b
  4317  000FFC  0100               	movlb	0	; () banked
  4318  000FFE  51B0               	movf	(printf@prec+1)& (0+255),w,b
  4319  001000  0A80               	xorlw	128
  4320  001002  0100               	movlb	0	; () banked
  4321  001004  5993               	subwfb	??_printf& (0+255),w,b
  4322  001006  B0D8               	btfsc	status,0,c
  4323  001008  D003               	goto	l416
  4324                           
  4325                           ; BSR set to: 0
  4326                           ;doprnt.c: 1340: c = prec;
  4327  00100A  C0AF  F0B1         	movff	printf@prec,printf@c
  4328  00100E  D018               	goto	l418
  4329  001010                     l416:
  4330                           
  4331                           ; BSR set to: 0
  4332                           ;doprnt.c: 1341: else if(prec < c)
  4333                           
  4334                           ; BSR set to: 0
  4335  001010  0100               	movlb	0	; () banked
  4336  001012  51B0               	movf	(printf@prec+1)& (0+255),w,b
  4337  001014  0A80               	xorlw	128
  4338  001016  0100               	movlb	0	; () banked
  4339  001018  6F93               	movwf	??_printf& (0+255),b
  4340  00101A  0100               	movlb	0	; () banked
  4341  00101C  51B1               	movf	printf@c& (0+255),w,b
  4342  00101E  0100               	movlb	0	; () banked
  4343  001020  5DAF               	subwf	printf@prec& (0+255),w,b
  4344  001022  0E80               	movlw	128
  4345  001024  0100               	movlb	0	; () banked
  4346  001026  BFB1               	btfsc	printf@c& (0+255),7,b
  4347  001028  0E7F               	movlw	127
  4348  00102A  0100               	movlb	0	; () banked
  4349  00102C  5993               	subwfb	??_printf& (0+255),w,b
  4350  00102E  B0D8               	btfsc	status,0,c
  4351  001030  D007               	goto	l418
  4352                           
  4353                           ; BSR set to: 0
  4354                           ;doprnt.c: 1342: prec = c;
  4355  001032  0100               	movlb	0	; () banked
  4356  001034  51B1               	movf	printf@c& (0+255),w,b
  4357  001036  0100               	movlb	0	; () banked
  4358  001038  6FAF               	movwf	printf@prec& (0+255),b
  4359  00103A  6BB0               	clrf	(printf@prec+1)& (0+255),b
  4360  00103C  BFAF               	btfsc	printf@prec& (0+255),7,b
  4361  00103E  07B0               	decf	(printf@prec+1)& (0+255),f,b
  4362  001040                     l418:
  4363                           
  4364                           ; BSR set to: 0
  4365                           ;doprnt.c: 1345: if(width && flag & 0x03)
  4366                           
  4367                           ; BSR set to: 0
  4368                           
  4369                           ; BSR set to: 0
  4370  001040  0100               	movlb	0	; () banked
  4371  001042  51AA               	movf	printf@width& (0+255),w,b
  4372  001044  0100               	movlb	0	; () banked
  4373  001046  11AB               	iorwf	(printf@width+1)& (0+255),w,b
  4374  001048  B4D8               	btfsc	status,2,c
  4375  00104A  D014               	goto	l419
  4376                           
  4377                           ; BSR set to: 0
  4378  00104C  0E03               	movlw	3
  4379  00104E  0100               	movlb	0	; () banked
  4380  001050  15A8               	andwf	printf@flag& (0+255),w,b
  4381  001052  0100               	movlb	0	; () banked
  4382  001054  6F93               	movwf	??_printf& (0+255),b
  4383  001056  0E00               	movlw	0
  4384  001058  0100               	movlb	0	; () banked
  4385  00105A  15A9               	andwf	(printf@flag+1)& (0+255),w,b
  4386  00105C  0100               	movlb	0	; () banked
  4387  00105E  6F94               	movwf	(??_printf+1)& (0+255),b
  4388  001060  0100               	movlb	0	; () banked
  4389  001062  5193               	movf	??_printf& (0+255),w,b
  4390  001064  0100               	movlb	0	; () banked
  4391  001066  1194               	iorwf	(??_printf+1)& (0+255),w,b
  4392  001068  B4D8               	btfsc	status,2,c
  4393  00106A  D004               	goto	l419
  4394                           
  4395                           ; BSR set to: 0
  4396                           ;doprnt.c: 1346: width--;
  4397  00106C  0100               	movlb	0	; () banked
  4398  00106E  07AA               	decf	printf@width& (0+255),f,b
  4399  001070  A0D8               	btfss	status,0,c
  4400  001072  07AB               	decf	(printf@width+1)& (0+255),f,b
  4401  001074                     l419:
  4402                           
  4403                           ; BSR set to: 0
  4404                           ;doprnt.c: 1348: if(flag & 0x4000) {
  4405                           
  4406                           ; BSR set to: 0
  4407  001074  0100               	movlb	0	; () banked
  4408  001076  ADA9               	btfss	(printf@flag+1)& (0+255),6,b
  4409  001078  D01E               	goto	l422
  4410                           
  4411                           ; BSR set to: 0
  4412                           ;doprnt.c: 1349: if(width > prec)
  4413  00107A  0100               	movlb	0	; () banked
  4414  00107C  51AA               	movf	printf@width& (0+255),w,b
  4415  00107E  0100               	movlb	0	; () banked
  4416  001080  5DAF               	subwf	printf@prec& (0+255),w,b
  4417  001082  0100               	movlb	0	; () banked
  4418  001084  51B0               	movf	(printf@prec+1)& (0+255),w,b
  4419  001086  0A80               	xorlw	128
  4420  001088  0100               	movlb	0	; () banked
  4421  00108A  6F93               	movwf	??_printf& (0+255),b
  4422  00108C  0100               	movlb	0	; () banked
  4423  00108E  51AB               	movf	(printf@width+1)& (0+255),w,b
  4424  001090  0A80               	xorlw	128
  4425  001092  0100               	movlb	0	; () banked
  4426  001094  5993               	subwfb	??_printf& (0+255),w,b
  4427  001096  B0D8               	btfsc	status,0,c
  4428  001098  D009               	goto	l421
  4429                           
  4430                           ; BSR set to: 0
  4431                           ;doprnt.c: 1350: width -= prec;
  4432  00109A  0100               	movlb	0	; () banked
  4433  00109C  51AF               	movf	printf@prec& (0+255),w,b
  4434  00109E  0100               	movlb	0	; () banked
  4435  0010A0  5FAA               	subwf	printf@width& (0+255),f,b
  4436  0010A2  0100               	movlb	0	; () banked
  4437  0010A4  51B0               	movf	(printf@prec+1)& (0+255),w,b
  4438  0010A6  0100               	movlb	0	; () banked
  4439  0010A8  5BAB               	subwfb	(printf@width+1)& (0+255),f,b
  4440  0010AA  D005               	goto	l422
  4441  0010AC                     l421:
  4442                           
  4443                           ; BSR set to: 0
  4444                           ;doprnt.c: 1351: else
  4445                           ;doprnt.c: 1352: width = 0;
  4446                           
  4447                           ; BSR set to: 0
  4448  0010AC  0E00               	movlw	0
  4449  0010AE  0100               	movlb	0	; () banked
  4450  0010B0  6FAB               	movwf	(printf@width+1)& (0+255),b
  4451  0010B2  0E00               	movlw	0
  4452  0010B4  6FAA               	movwf	printf@width& (0+255),b
  4453  0010B6                     l422:
  4454                           
  4455                           ; BSR set to: 0
  4456                           ;doprnt.c: 1353: }
  4457                           ;doprnt.c: 1381: if(width > c)
  4458                           
  4459                           ; BSR set to: 0
  4460                           
  4461                           ; BSR set to: 0
  4462  0010B6  0E80               	movlw	128
  4463  0010B8  0100               	movlb	0	; () banked
  4464  0010BA  BFB1               	btfsc	printf@c& (0+255),7,b
  4465  0010BC  0E7F               	movlw	127
  4466  0010BE  0100               	movlb	0	; () banked
  4467  0010C0  6F93               	movwf	??_printf& (0+255),b
  4468  0010C2  0100               	movlb	0	; () banked
  4469  0010C4  51AA               	movf	printf@width& (0+255),w,b
  4470  0010C6  0100               	movlb	0	; () banked
  4471  0010C8  5DB1               	subwf	printf@c& (0+255),w,b
  4472  0010CA  0100               	movlb	0	; () banked
  4473  0010CC  51AB               	movf	(printf@width+1)& (0+255),w,b
  4474  0010CE  0A80               	xorlw	128
  4475  0010D0  0100               	movlb	0	; () banked
  4476  0010D2  5993               	subwfb	??_printf& (0+255),w,b
  4477  0010D4  B0D8               	btfsc	status,0,c
  4478  0010D6  D00B               	goto	l423
  4479                           
  4480                           ; BSR set to: 0
  4481                           ;doprnt.c: 1382: width -= c;
  4482  0010D8  0100               	movlb	0	; () banked
  4483  0010DA  51B1               	movf	printf@c& (0+255),w,b
  4484  0010DC  0100               	movlb	0	; () banked
  4485  0010DE  5FAA               	subwf	printf@width& (0+255),f,b
  4486  0010E0  0E00               	movlw	0
  4487  0010E2  0100               	movlb	0	; () banked
  4488  0010E4  BFB1               	btfsc	printf@c& (0+255),7,b
  4489  0010E6  0EFF               	movlw	255
  4490  0010E8  0100               	movlb	0	; () banked
  4491  0010EA  5BAB               	subwfb	(printf@width+1)& (0+255),f,b
  4492  0010EC  D005               	goto	l424
  4493  0010EE                     l423:
  4494                           
  4495                           ; BSR set to: 0
  4496                           ;doprnt.c: 1383: else
  4497                           ;doprnt.c: 1384: width = 0;
  4498                           
  4499                           ; BSR set to: 0
  4500  0010EE  0E00               	movlw	0
  4501  0010F0  0100               	movlb	0	; () banked
  4502  0010F2  6FAB               	movwf	(printf@width+1)& (0+255),b
  4503  0010F4  0E00               	movlw	0
  4504  0010F6  6FAA               	movwf	printf@width& (0+255),b
  4505  0010F8                     l424:
  4506                           
  4507                           ; BSR set to: 0
  4508                           ;doprnt.c: 1387: if(flag & 0x04) {
  4509                           
  4510                           ; BSR set to: 0
  4511  0010F8  0100               	movlb	0	; () banked
  4512  0010FA  A5A8               	btfss	printf@flag& (0+255),2,b
  4513  0010FC  D021               	goto	l425
  4514                           
  4515                           ; BSR set to: 0
  4516                           ;doprnt.c: 1392: if(flag & 0x03)
  4517  0010FE  0E03               	movlw	3
  4518  001100  0100               	movlb	0	; () banked
  4519  001102  15A8               	andwf	printf@flag& (0+255),w,b
  4520  001104  0100               	movlb	0	; () banked
  4521  001106  6F93               	movwf	??_printf& (0+255),b
  4522  001108  0E00               	movlw	0
  4523  00110A  0100               	movlb	0	; () banked
  4524  00110C  15A9               	andwf	(printf@flag+1)& (0+255),w,b
  4525  00110E  0100               	movlb	0	; () banked
  4526  001110  6F94               	movwf	(??_printf+1)& (0+255),b
  4527  001112  0100               	movlb	0	; () banked
  4528  001114  5193               	movf	??_printf& (0+255),w,b
  4529  001116  0100               	movlb	0	; () banked
  4530  001118  1194               	iorwf	(??_printf+1)& (0+255),w,b
  4531  00111A  B4D8               	btfsc	status,2,c
  4532  00111C  D003               	goto	l426
  4533                           
  4534                           ; BSR set to: 0
  4535                           ;doprnt.c: 1393: (putch('-') );
  4536  00111E  0E2D               	movlw	45
  4537  001120  EC89  F018         	call	_putch
  4538  001124                     l426:
  4539                           
  4540                           ;doprnt.c: 1415: if(width)
  4541  001124  0100               	movlb	0	; () banked
  4542  001126  51AA               	movf	printf@width& (0+255),w,b
  4543  001128  0100               	movlb	0	; () banked
  4544  00112A  11AB               	iorwf	(printf@width+1)& (0+255),w,b
  4545  00112C  B4D8               	btfsc	status,2,c
  4546  00112E  D072               	goto	l435
  4547                           
  4548                           ; BSR set to: 0
  4549                           ;doprnt.c: 1417: (putch('0') );
  4550                           
  4551                           ; BSR set to: 0
  4552                           
  4553                           ;doprnt.c: 1416: do
  4554  001130  0E30               	movlw	48
  4555  001132  EC89  F018         	call	_putch
  4556                           
  4557                           ;doprnt.c: 1418: while(--width);
  4558  001136  0100               	movlb	0	; () banked
  4559  001138  07AA               	decf	printf@width& (0+255),f,b
  4560  00113A  A0D8               	btfss	status,0,c
  4561  00113C  07AB               	decf	(printf@width+1)& (0+255),f,b
  4562  00113E  D7F2               	goto	l426
  4563  001140                     l425:
  4564                           
  4565                           ; BSR set to: 0
  4566                           ;doprnt.c: 1422: {
  4567                           ;doprnt.c: 1424: if(width
  4568                           ;doprnt.c: 1428: )
  4569                           
  4570                           ; BSR set to: 0
  4571  001140  0100               	movlb	0	; () banked
  4572  001142  51AA               	movf	printf@width& (0+255),w,b
  4573  001144  0100               	movlb	0	; () banked
  4574  001146  11AB               	iorwf	(printf@width+1)& (0+255),w,b
  4575  001148  B4D8               	btfsc	status,2,c
  4576  00114A  D00D               	goto	u5000
  4577  00114C                     u4990:
  4578                           
  4579                           ; BSR set to: 0
  4580                           ;doprnt.c: 1430: (putch(' ') );
  4581                           
  4582                           ; BSR set to: 0
  4583                           
  4584                           ;doprnt.c: 1429: do
  4585  00114C  0E20               	movlw	32
  4586  00114E  EC89  F018         	call	_putch
  4587                           
  4588                           ;doprnt.c: 1431: while(--width);
  4589  001152  0100               	movlb	0	; () banked
  4590  001154  07AA               	decf	printf@width& (0+255),f,b
  4591  001156  A0D8               	btfss	status,0,c
  4592  001158  07AB               	decf	(printf@width+1)& (0+255),f,b
  4593  00115A  0100               	movlb	0	; () banked
  4594  00115C  51AA               	movf	printf@width& (0+255),w,b
  4595  00115E  0100               	movlb	0	; () banked
  4596  001160  11AB               	iorwf	(printf@width+1)& (0+255),w,b
  4597  001162  A4D8               	btfss	status,2,c
  4598  001164  D7F3               	goto	u4990
  4599  001166                     u5000:
  4600                           
  4601                           ; BSR set to: 0
  4602                           ;doprnt.c: 1438: if(flag & 0x03)
  4603                           
  4604                           ; BSR set to: 0
  4605                           
  4606                           ; BSR set to: 0
  4607  001166  0E03               	movlw	3
  4608  001168  0100               	movlb	0	; () banked
  4609  00116A  15A8               	andwf	printf@flag& (0+255),w,b
  4610  00116C  0100               	movlb	0	; () banked
  4611  00116E  6F93               	movwf	??_printf& (0+255),b
  4612  001170  0E00               	movlw	0
  4613  001172  0100               	movlb	0	; () banked
  4614  001174  15A9               	andwf	(printf@flag+1)& (0+255),w,b
  4615  001176  0100               	movlb	0	; () banked
  4616  001178  6F94               	movwf	(??_printf+1)& (0+255),b
  4617  00117A  0100               	movlb	0	; () banked
  4618  00117C  5193               	movf	??_printf& (0+255),w,b
  4619  00117E  0100               	movlb	0	; () banked
  4620  001180  1194               	iorwf	(??_printf+1)& (0+255),w,b
  4621  001182  B4D8               	btfsc	status,2,c
  4622  001184  D047               	goto	l435
  4623                           
  4624                           ; BSR set to: 0
  4625                           ;doprnt.c: 1439: (putch('-') );
  4626  001186  0E2D               	movlw	45
  4627  001188  EC89  F018         	call	_putch
  4628                           
  4629                           ;doprnt.c: 1469: }
  4630                           ;doprnt.c: 1474: while(prec--) {
  4631  00118C  D043               	goto	l435
  4632  00118E                     l4178:
  4633                           
  4634                           ;doprnt.c: 1478: {
  4635                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  4636  00118E  C0AF  F093         	movff	printf@prec,??_printf
  4637  001192  C0B0  F094         	movff	printf@prec+1,??_printf+1
  4638  001196  0100               	movlb	0	; () banked
  4639  001198  90D8               	bcf	status,0,c
  4640  00119A  3793               	rlcf	??_printf& (0+255),f,b
  4641  00119C  3794               	rlcf	(??_printf+1)& (0+255),f,b
  4642  00119E  0100               	movlb	0	; () banked
  4643  0011A0  90D8               	bcf	status,0,c
  4644  0011A2  3793               	rlcf	??_printf& (0+255),f,b
  4645  0011A4  3794               	rlcf	(??_printf+1)& (0+255),f,b
  4646  0011A6  0E01               	movlw	low _dpowers
  4647  0011A8  0100               	movlb	0	; () banked
  4648  0011AA  2593               	addwf	??_printf& (0+255),w,b
  4649  0011AC  6EF6               	movwf	tblptrl,c
  4650  0011AE  0E06               	movlw	high _dpowers
  4651  0011B0  2194               	addwfc	(??_printf+1)& (0+255),w,b
  4652  0011B2  6EF7               	movwf	tblptrh,c
  4653  0011B4                     	if	0	;There are less than 3 active tblptr bytes
  4654  0011B4                     	endif
  4655  0011B4  0009               	tblrd		*+
  4656  0011B6  CFF5 F017          	movff	tablat,___lldiv@divisor
  4657  0011BA  0009               	tblrd		*+
  4658  0011BC  CFF5 F018          	movff	tablat,___lldiv@divisor+1
  4659  0011C0  0009               	tblrd		*+
  4660  0011C2  CFF5 F019          	movff	tablat,___lldiv@divisor+2
  4661  0011C6  000A               	tblrd		*-
  4662  0011C8  CFF5 F01A          	movff	tablat,___lldiv@divisor+3
  4663  0011CC  C0A2  F013         	movff	printf@val,___lldiv@dividend
  4664  0011D0  C0A3  F014         	movff	printf@val+1,___lldiv@dividend+1
  4665  0011D4  C0A4  F015         	movff	printf@val+2,___lldiv@dividend+2
  4666  0011D8  C0A5  F016         	movff	printf@val+3,___lldiv@dividend+3
  4667  0011DC  ECCB  F015         	call	___lldiv	;wreg free
  4668  0011E0  C013  F020         	movff	?___lldiv,___llmod@dividend
  4669  0011E4  C014  F021         	movff	?___lldiv+1,___llmod@dividend+1
  4670  0011E8  C015  F022         	movff	?___lldiv+2,___llmod@dividend+2
  4671  0011EC  C016  F023         	movff	?___lldiv+3,___llmod@dividend+3
  4672  0011F0  0E0A               	movlw	10
  4673  0011F2  6E24               	movwf	___llmod@divisor,c
  4674  0011F4  0E00               	movlw	0
  4675  0011F6  6E25               	movwf	___llmod@divisor+1,c
  4676  0011F8  0E00               	movlw	0
  4677  0011FA  6E26               	movwf	___llmod@divisor+2,c
  4678  0011FC  0E00               	movlw	0
  4679  0011FE  6E27               	movwf	___llmod@divisor+3,c
  4680  001200  EC79  F016         	call	___llmod	;wreg free
  4681  001204  5020               	movf	?___llmod,w,c
  4682  001206  0F30               	addlw	48
  4683  001208  0100               	movlb	0	; () banked
  4684  00120A  6FB1               	movwf	printf@c& (0+255),b
  4685                           
  4686                           ; BSR set to: 0
  4687                           ;doprnt.c: 1523: }
  4688                           ;doprnt.c: 1524: (putch(c) );
  4689  00120C  0100               	movlb	0	; () banked
  4690  00120E  51B1               	movf	printf@c& (0+255),w,b
  4691  001210  EC89  F018         	call	_putch
  4692  001214                     l435:
  4693  001214  0100               	movlb	0	; () banked
  4694  001216  07AF               	decf	printf@prec& (0+255),f,b
  4695  001218  A0D8               	btfss	status,0,c
  4696  00121A  07B0               	decf	(printf@prec+1)& (0+255),f,b
  4697  00121C  0100               	movlb	0	; () banked
  4698  00121E  29AF               	incf	printf@prec& (0+255),w,b
  4699  001220  E1B6               	bnz	l4178
  4700  001222  0100               	movlb	0	; () banked
  4701  001224  29B0               	incf	(printf@prec+1)& (0+255),w,b
  4702  001226  A4D8               	btfss	status,2,c
  4703  001228  D7B2               	goto	l436
  4704  00122A                     u5020:
  4705                           
  4706                           ; BSR set to: 0
  4707                           
  4708                           ; BSR set to: 0
  4709  00122A  C08E  FFF6         	movff	printf@f,tblptrl
  4710  00122E  C08F  FFF7         	movff	printf@f+1,tblptrh
  4711  001232  0100               	movlb	0	; () banked
  4712  001234  4B8E               	infsnz	printf@f& (0+255),f,b
  4713  001236  2B8F               	incf	(printf@f+1)& (0+255),f,b
  4714  001238                     	if	0	;tblptru may be non-zero
  4715  001238                     	endif
  4716  001238                     	if	0	;tblptru may be non-zero
  4717  001238                     	endif
  4718  001238  0008               	tblrd		*
  4719  00123A  CFF5 F0B1          	movff	tablat,printf@c
  4720  00123E  0100               	movlb	0	; () banked
  4721  001240  51B1               	movf	printf@c& (0+255),w,b
  4722  001242  B4D8               	btfsc	status,2,c
  4723  001244  0012               	return	
  4724  001246  EF59  F003         	goto	l338
  4725  00124A                     __end_of_printf:
  4726                           	opt stack 0
  4727                           tblptru	equ	0xFF8
  4728                           tblptrh	equ	0xFF7
  4729                           tblptrl	equ	0xFF6
  4730                           tablat	equ	0xFF5
  4731                           prodh	equ	0xFF4
  4732                           prodl	equ	0xFF3
  4733                           intcon	equ	0xFF2
  4734                           intcon2	equ	0xFF1
  4735                           intcon3	equ	0xFF0
  4736                           postinc0	equ	0xFEE
  4737                           wreg	equ	0xFE8
  4738                           postinc2	equ	0xFDE
  4739                           postdec2	equ	0xFDD
  4740                           fsr2h	equ	0xFDA
  4741                           fsr2l	equ	0xFD9
  4742                           status	equ	0xFD8
  4743                           
  4744 ;; *************** function _scale *****************
  4745 ;; Defined at:
  4746 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\doprnt.c"
  4747 ;; Parameters:    Size  Location     Type
  4748 ;;  scl             1    wreg     char 
  4749 ;; Auto vars:     Size  Location     Type
  4750 ;;  scl             1   30[BANK0 ] char 
  4751 ;; Return value:  Size  Location     Type
  4752 ;;                  3   24[BANK0 ] char 
  4753 ;; Registers used:
  4754 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4755 ;; Tracked objects:
  4756 ;;		On entry : 0/0
  4757 ;;		On exit  : 0/0
  4758 ;;		Unchanged: 0/0
  4759 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4760 ;;      Params:         0       3       0       0       0       0       0
  4761 ;;      Locals:         0       4       0       0       0       0       0
  4762 ;;      Temps:          0       0       0       0       0       0       0
  4763 ;;      Totals:         0       7       0       0       0       0       0
  4764 ;;Total ram usage:        7 bytes
  4765 ;; Hardware stack levels used:    1
  4766 ;; Hardware stack levels required when called:    4
  4767 ;; This function calls:
  4768 ;;		___awdiv
  4769 ;;		___awmod
  4770 ;;		___ftmul
  4771 ;;		___wmul
  4772 ;; This function is called by:
  4773 ;;		_printf
  4774 ;; This function uses a non-reentrant model
  4775 ;;
  4776                           
  4777                           	psect	text12
  4778  00124A                     __ptext12:
  4779                           	opt stack 0
  4780  00124A                     _scale:
  4781                           	opt stack 25
  4782                           
  4783                           ; BSR set to: 0
  4784                           ;incstack = 0
  4785                           ;scale@scl stored from wreg
  4786  00124A  0100               	movlb	0	; () banked
  4787  00124C  6F7E               	movwf	scale@scl& (0+255),b
  4788                           
  4789                           ;doprnt.c: 428: if(scl < 0) {
  4790  00124E  0100               	movlb	0	; () banked
  4791  001250  AF7E               	btfss	scale@scl& (0+255),7,b
  4792  001252  D10A               	goto	l327
  4793                           
  4794                           ; BSR set to: 0
  4795                           ;doprnt.c: 429: scl = -scl;
  4796  001254  0100               	movlb	0	; () banked
  4797  001256  6D7E               	negf	scale@scl& (0+255),b
  4798                           
  4799                           ;doprnt.c: 430: if(scl>=110)
  4800  001258  0100               	movlb	0	; () banked
  4801  00125A  517E               	movf	scale@scl& (0+255),w,b
  4802  00125C  0A80               	xorlw	128
  4803  00125E  0F12               	addlw	-238
  4804  001260  A0D8               	btfss	status,0,c
  4805  001262  D094               	goto	l328
  4806                           
  4807                           ; BSR set to: 0
  4808                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  4809  001264  0E00               	movlw	0
  4810  001266  6E24               	movwf	___wmul@multiplicand+1,c
  4811  001268  0E03               	movlw	3
  4812  00126A  6E23               	movwf	___wmul@multiplicand,c
  4813  00126C  0E00               	movlw	0
  4814  00126E  6E1C               	movwf	___awdiv@divisor+1,c
  4815  001270  0E0A               	movlw	10
  4816  001272  6E1B               	movwf	___awdiv@divisor,c
  4817  001274  0E00               	movlw	0
  4818  001276  6E16               	movwf	___awmod@divisor+1,c
  4819  001278  0E64               	movlw	100
  4820  00127A  6E15               	movwf	___awmod@divisor,c
  4821  00127C  0100               	movlb	0	; () banked
  4822  00127E  517E               	movf	scale@scl& (0+255),w,b
  4823  001280  6E13               	movwf	___awmod@dividend,c
  4824  001282  6A14               	clrf	___awmod@dividend+1,c
  4825  001284  BE13               	btfsc	___awmod@dividend,7,c
  4826  001286  0614               	decf	___awmod@dividend+1,f,c
  4827  001288  EC0C  F016         	call	___awmod	;wreg free
  4828  00128C  C013  F019         	movff	?___awmod,___awdiv@dividend
  4829  001290  C014  F01A         	movff	?___awmod+1,___awdiv@dividend+1
  4830  001294  EC89  F015         	call	___awdiv	;wreg free
  4831  001298  0E09               	movlw	9
  4832  00129A  2419               	addwf	?___awdiv,w,c
  4833  00129C  6E21               	movwf	___wmul@multiplier,c
  4834  00129E  0E00               	movlw	0
  4835  0012A0  201A               	addwfc	?___awdiv+1,w,c
  4836  0012A2  6E22               	movwf	___wmul@multiplier+1,c
  4837  0012A4  EC2A  F018         	call	___wmul	;wreg free
  4838  0012A8  0E50               	movlw	low __npowers_
  4839  0012AA  2421               	addwf	?___wmul,w,c
  4840  0012AC  6EF6               	movwf	tblptrl,c
  4841  0012AE  0E06               	movlw	high __npowers_
  4842  0012B0  2022               	addwfc	?___wmul+1,w,c
  4843  0012B2  6EF7               	movwf	tblptrh,c
  4844  0012B4                     	if	0	;There are less than 3 active tblptr bytes
  4845  0012B4                     	endif
  4846  0012B4  0009               	tblrd		*+
  4847  0012B6  CFF5 F06C          	movff	tablat,___ftmul@f2
  4848  0012BA  0009               	tblrd		*+
  4849  0012BC  CFF5 F06D          	movff	tablat,___ftmul@f2+1
  4850  0012C0  000A               	tblrd		*-
  4851  0012C2  CFF5 F06E          	movff	tablat,___ftmul@f2+2
  4852  0012C6  0E00               	movlw	0
  4853  0012C8  6E1C               	movwf	___awdiv@divisor+1,c
  4854  0012CA  0E64               	movlw	100
  4855  0012CC  6E1B               	movwf	___awdiv@divisor,c
  4856  0012CE  0100               	movlb	0	; () banked
  4857  0012D0  517E               	movf	scale@scl& (0+255),w,b
  4858  0012D2  6E19               	movwf	___awdiv@dividend,c
  4859  0012D4  6A1A               	clrf	___awdiv@dividend+1,c
  4860  0012D6  BE19               	btfsc	___awdiv@dividend,7,c
  4861  0012D8  061A               	decf	___awdiv@dividend+1,f,c
  4862  0012DA  EC89  F015         	call	___awdiv	;wreg free
  4863  0012DE  0E12               	movlw	18
  4864  0012E0  2419               	addwf	?___awdiv,w,c
  4865  0012E2  6E21               	movwf	___wmul@multiplier,c
  4866  0012E4  0E00               	movlw	0
  4867  0012E6  201A               	addwfc	?___awdiv+1,w,c
  4868  0012E8  6E22               	movwf	___wmul@multiplier+1,c
  4869  0012EA  0E00               	movlw	0
  4870  0012EC  6E24               	movwf	___wmul@multiplicand+1,c
  4871  0012EE  0E03               	movlw	3
  4872  0012F0  6E23               	movwf	___wmul@multiplicand,c
  4873  0012F2  EC2A  F018         	call	___wmul	;wreg free
  4874  0012F6  0E50               	movlw	low __npowers_
  4875  0012F8  2421               	addwf	?___wmul,w,c
  4876  0012FA  6EF6               	movwf	tblptrl,c
  4877  0012FC  0E06               	movlw	high __npowers_
  4878  0012FE  2022               	addwfc	?___wmul+1,w,c
  4879  001300  6EF7               	movwf	tblptrh,c
  4880  001302                     	if	0	;There are less than 3 active tblptr bytes
  4881  001302                     	endif
  4882  001302  0009               	tblrd		*+
  4883  001304  CFF5 F069          	movff	tablat,___ftmul@f1
  4884  001308  0009               	tblrd		*+
  4885  00130A  CFF5 F06A          	movff	tablat,___ftmul@f1+1
  4886  00130E  000A               	tblrd		*-
  4887  001310  CFF5 F06B          	movff	tablat,___ftmul@f1+2
  4888  001314  ECDF  F00F         	call	___ftmul	;wreg free
  4889  001318  C069  F07B         	movff	?___ftmul,_scale$1575
  4890  00131C  C06A  F07C         	movff	?___ftmul+1,_scale$1575+1
  4891  001320  C06B  F07D         	movff	?___ftmul+2,_scale$1575+2
  4892                           
  4893                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  4894  001324  C07B  F069         	movff	_scale$1575,___ftmul@f1
  4895  001328  C07C  F06A         	movff	_scale$1575+1,___ftmul@f1+1
  4896  00132C  C07D  F06B         	movff	_scale$1575+2,___ftmul@f1+2
  4897  001330  0E00               	movlw	0
  4898  001332  6E24               	movwf	___wmul@multiplicand+1,c
  4899  001334  0E03               	movlw	3
  4900  001336  6E23               	movwf	___wmul@multiplicand,c
  4901  001338  0E00               	movlw	0
  4902  00133A  6E16               	movwf	___awmod@divisor+1,c
  4903  00133C  0E0A               	movlw	10
  4904  00133E  6E15               	movwf	___awmod@divisor,c
  4905  001340  0100               	movlb	0	; () banked
  4906  001342  517E               	movf	scale@scl& (0+255),w,b
  4907  001344  6E13               	movwf	___awmod@dividend,c
  4908  001346  6A14               	clrf	___awmod@dividend+1,c
  4909  001348  BE13               	btfsc	___awmod@dividend,7,c
  4910  00134A  0614               	decf	___awmod@dividend+1,f,c
  4911  00134C  EC0C  F016         	call	___awmod	;wreg free
  4912  001350  C013  F021         	movff	?___awmod,___wmul@multiplier
  4913  001354  C014  F022         	movff	?___awmod+1,___wmul@multiplier+1
  4914  001358  EC2A  F018         	call	___wmul	;wreg free
  4915  00135C  0E50               	movlw	low __npowers_
  4916  00135E  2421               	addwf	?___wmul,w,c
  4917  001360  6EF6               	movwf	tblptrl,c
  4918  001362  0E06               	movlw	high __npowers_
  4919  001364  2022               	addwfc	?___wmul+1,w,c
  4920  001366  6EF7               	movwf	tblptrh,c
  4921  001368                     	if	0	;There are less than 3 active tblptr bytes
  4922  001368                     	endif
  4923  001368  0009               	tblrd		*+
  4924  00136A  CFF5 F06C          	movff	tablat,___ftmul@f2
  4925  00136E  0009               	tblrd		*+
  4926  001370  CFF5 F06D          	movff	tablat,___ftmul@f2+1
  4927  001374  000A               	tblrd		*-
  4928  001376  CFF5 F06E          	movff	tablat,___ftmul@f2+2
  4929  00137A  ECDF  F00F         	call	___ftmul	;wreg free
  4930  00137E  C069  F078         	movff	?___ftmul,?_scale
  4931  001382  C06A  F079         	movff	?___ftmul+1,?_scale+1
  4932  001386  C06B  F07A         	movff	?___ftmul+2,?_scale+2
  4933  00138A  0012               	return	
  4934  00138C                     l328:
  4935                           
  4936                           ;doprnt.c: 432: else if(scl > 10)
  4937  00138C  0100               	movlb	0	; () banked
  4938  00138E  517E               	movf	scale@scl& (0+255),w,b
  4939  001390  0A80               	xorlw	128
  4940  001392  0F75               	addlw	-139
  4941  001394  A0D8               	btfss	status,0,c
  4942  001396  D055               	goto	l331
  4943                           
  4944                           ; BSR set to: 0
  4945                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  4946  001398  0E00               	movlw	0
  4947  00139A  6E1C               	movwf	___awdiv@divisor+1,c
  4948  00139C  0E0A               	movlw	10
  4949  00139E  6E1B               	movwf	___awdiv@divisor,c
  4950  0013A0  0100               	movlb	0	; () banked
  4951  0013A2  517E               	movf	scale@scl& (0+255),w,b
  4952  0013A4  6E19               	movwf	___awdiv@dividend,c
  4953  0013A6  6A1A               	clrf	___awdiv@dividend+1,c
  4954  0013A8  BE19               	btfsc	___awdiv@dividend,7,c
  4955  0013AA  061A               	decf	___awdiv@dividend+1,f,c
  4956  0013AC  EC89  F015         	call	___awdiv	;wreg free
  4957  0013B0  0E09               	movlw	9
  4958  0013B2  2419               	addwf	?___awdiv,w,c
  4959  0013B4  6E21               	movwf	___wmul@multiplier,c
  4960  0013B6  0E00               	movlw	0
  4961  0013B8  201A               	addwfc	?___awdiv+1,w,c
  4962  0013BA  6E22               	movwf	___wmul@multiplier+1,c
  4963  0013BC  0E00               	movlw	0
  4964  0013BE  6E24               	movwf	___wmul@multiplicand+1,c
  4965  0013C0  0E03               	movlw	3
  4966  0013C2  6E23               	movwf	___wmul@multiplicand,c
  4967  0013C4  EC2A  F018         	call	___wmul	;wreg free
  4968  0013C8  0E50               	movlw	low __npowers_
  4969  0013CA  2421               	addwf	?___wmul,w,c
  4970  0013CC  6EF6               	movwf	tblptrl,c
  4971  0013CE  0E06               	movlw	high __npowers_
  4972  0013D0  2022               	addwfc	?___wmul+1,w,c
  4973  0013D2  6EF7               	movwf	tblptrh,c
  4974  0013D4                     	if	0	;There are less than 3 active tblptr bytes
  4975  0013D4                     	endif
  4976  0013D4  0009               	tblrd		*+
  4977  0013D6  CFF5 F069          	movff	tablat,___ftmul@f1
  4978  0013DA  0009               	tblrd		*+
  4979  0013DC  CFF5 F06A          	movff	tablat,___ftmul@f1+1
  4980  0013E0  000A               	tblrd		*-
  4981  0013E2  CFF5 F06B          	movff	tablat,___ftmul@f1+2
  4982  0013E6  0E00               	movlw	0
  4983  0013E8  6E24               	movwf	___wmul@multiplicand+1,c
  4984  0013EA  0E03               	movlw	3
  4985  0013EC  6E23               	movwf	___wmul@multiplicand,c
  4986  0013EE  0E00               	movlw	0
  4987  0013F0  6E16               	movwf	___awmod@divisor+1,c
  4988  0013F2  0E0A               	movlw	10
  4989  0013F4  6E15               	movwf	___awmod@divisor,c
  4990  0013F6  0100               	movlb	0	; () banked
  4991  0013F8  517E               	movf	scale@scl& (0+255),w,b
  4992  0013FA  6E13               	movwf	___awmod@dividend,c
  4993  0013FC  6A14               	clrf	___awmod@dividend+1,c
  4994  0013FE  BE13               	btfsc	___awmod@dividend,7,c
  4995  001400  0614               	decf	___awmod@dividend+1,f,c
  4996  001402  EC0C  F016         	call	___awmod	;wreg free
  4997  001406  C013  F021         	movff	?___awmod,___wmul@multiplier
  4998  00140A  C014  F022         	movff	?___awmod+1,___wmul@multiplier+1
  4999  00140E  EC2A  F018         	call	___wmul	;wreg free
  5000  001412  0E50               	movlw	low __npowers_
  5001  001414  2421               	addwf	?___wmul,w,c
  5002  001416  6EF6               	movwf	tblptrl,c
  5003  001418  0E06               	movlw	high __npowers_
  5004  00141A  2022               	addwfc	?___wmul+1,w,c
  5005  00141C  6EF7               	movwf	tblptrh,c
  5006  00141E                     	if	0	;There are less than 3 active tblptr bytes
  5007  00141E                     	endif
  5008  00141E  0009               	tblrd		*+
  5009  001420  CFF5 F06C          	movff	tablat,___ftmul@f2
  5010  001424  0009               	tblrd		*+
  5011  001426  CFF5 F06D          	movff	tablat,___ftmul@f2+1
  5012  00142A  000A               	tblrd		*-
  5013  00142C  CFF5 F06E          	movff	tablat,___ftmul@f2+2
  5014  001430  ECDF  F00F         	call	___ftmul	;wreg free
  5015  001434  C069  F078         	movff	?___ftmul,?_scale
  5016  001438  C06A  F079         	movff	?___ftmul+1,?_scale+1
  5017  00143C  C06B  F07A         	movff	?___ftmul+2,?_scale+2
  5018  001440  0012               	return	
  5019  001442                     l331:
  5020                           
  5021                           ;doprnt.c: 434: return _npowers_[scl];
  5022  001442  0100               	movlb	0	; () banked
  5023  001444  517E               	movf	scale@scl& (0+255),w,b
  5024  001446  0D03               	mullw	3
  5025  001448  0E50               	movlw	low __npowers_
  5026  00144A  24F3               	addwf	prodl,w,c
  5027  00144C  6EF6               	movwf	tblptrl,c
  5028  00144E  0E06               	movlw	high __npowers_
  5029  001450  20F4               	addwfc	prodh,w,c
  5030  001452  6EF7               	movwf	tblptrh,c
  5031  001454                     	if	0	;There are less than 3 active tblptr bytes
  5032  001454                     	endif
  5033  001454  0009               	tblrd		*+
  5034  001456  CFF5 F078          	movff	tablat,?_scale
  5035  00145A  0009               	tblrd		*+
  5036  00145C  CFF5 F079          	movff	tablat,?_scale+1
  5037  001460  000A               	tblrd		*-
  5038  001462  CFF5 F07A          	movff	tablat,?_scale+2
  5039                           
  5040                           ; BSR set to: 0
  5041  001466  0012               	return	
  5042  001468                     l327:
  5043                           
  5044                           ; BSR set to: 0
  5045                           ;doprnt.c: 435: }
  5046                           ;doprnt.c: 436: if(scl>=110)
  5047                           
  5048                           ; BSR set to: 0
  5049  001468  0100               	movlb	0	; () banked
  5050  00146A  517E               	movf	scale@scl& (0+255),w,b
  5051  00146C  0A80               	xorlw	128
  5052  00146E  0F12               	addlw	-238
  5053  001470  A0D8               	btfss	status,0,c
  5054  001472  D094               	goto	l332
  5055                           
  5056                           ; BSR set to: 0
  5057                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  5058  001474  0E00               	movlw	0
  5059  001476  6E24               	movwf	___wmul@multiplicand+1,c
  5060  001478  0E03               	movlw	3
  5061  00147A  6E23               	movwf	___wmul@multiplicand,c
  5062  00147C  0E00               	movlw	0
  5063  00147E  6E1C               	movwf	___awdiv@divisor+1,c
  5064  001480  0E0A               	movlw	10
  5065  001482  6E1B               	movwf	___awdiv@divisor,c
  5066  001484  0E00               	movlw	0
  5067  001486  6E16               	movwf	___awmod@divisor+1,c
  5068  001488  0E64               	movlw	100
  5069  00148A  6E15               	movwf	___awmod@divisor,c
  5070  00148C  0100               	movlb	0	; () banked
  5071  00148E  517E               	movf	scale@scl& (0+255),w,b
  5072  001490  6E13               	movwf	___awmod@dividend,c
  5073  001492  6A14               	clrf	___awmod@dividend+1,c
  5074  001494  BE13               	btfsc	___awmod@dividend,7,c
  5075  001496  0614               	decf	___awmod@dividend+1,f,c
  5076  001498  EC0C  F016         	call	___awmod	;wreg free
  5077  00149C  C013  F019         	movff	?___awmod,___awdiv@dividend
  5078  0014A0  C014  F01A         	movff	?___awmod+1,___awdiv@dividend+1
  5079  0014A4  EC89  F015         	call	___awdiv	;wreg free
  5080  0014A8  0E09               	movlw	9
  5081  0014AA  2419               	addwf	?___awdiv,w,c
  5082  0014AC  6E21               	movwf	___wmul@multiplier,c
  5083  0014AE  0E00               	movlw	0
  5084  0014B0  201A               	addwfc	?___awdiv+1,w,c
  5085  0014B2  6E22               	movwf	___wmul@multiplier+1,c
  5086  0014B4  EC2A  F018         	call	___wmul	;wreg free
  5087  0014B8  0E29               	movlw	low __powers_
  5088  0014BA  2421               	addwf	?___wmul,w,c
  5089  0014BC  6EF6               	movwf	tblptrl,c
  5090  0014BE  0E06               	movlw	high __powers_
  5091  0014C0  2022               	addwfc	?___wmul+1,w,c
  5092  0014C2  6EF7               	movwf	tblptrh,c
  5093  0014C4                     	if	0	;There are less than 3 active tblptr bytes
  5094  0014C4                     	endif
  5095  0014C4  0009               	tblrd		*+
  5096  0014C6  CFF5 F06C          	movff	tablat,___ftmul@f2
  5097  0014CA  0009               	tblrd		*+
  5098  0014CC  CFF5 F06D          	movff	tablat,___ftmul@f2+1
  5099  0014D0  000A               	tblrd		*-
  5100  0014D2  CFF5 F06E          	movff	tablat,___ftmul@f2+2
  5101  0014D6  0E00               	movlw	0
  5102  0014D8  6E1C               	movwf	___awdiv@divisor+1,c
  5103  0014DA  0E64               	movlw	100
  5104  0014DC  6E1B               	movwf	___awdiv@divisor,c
  5105  0014DE  0100               	movlb	0	; () banked
  5106  0014E0  517E               	movf	scale@scl& (0+255),w,b
  5107  0014E2  6E19               	movwf	___awdiv@dividend,c
  5108  0014E4  6A1A               	clrf	___awdiv@dividend+1,c
  5109  0014E6  BE19               	btfsc	___awdiv@dividend,7,c
  5110  0014E8  061A               	decf	___awdiv@dividend+1,f,c
  5111  0014EA  EC89  F015         	call	___awdiv	;wreg free
  5112  0014EE  0E12               	movlw	18
  5113  0014F0  2419               	addwf	?___awdiv,w,c
  5114  0014F2  6E21               	movwf	___wmul@multiplier,c
  5115  0014F4  0E00               	movlw	0
  5116  0014F6  201A               	addwfc	?___awdiv+1,w,c
  5117  0014F8  6E22               	movwf	___wmul@multiplier+1,c
  5118  0014FA  0E00               	movlw	0
  5119  0014FC  6E24               	movwf	___wmul@multiplicand+1,c
  5120  0014FE  0E03               	movlw	3
  5121  001500  6E23               	movwf	___wmul@multiplicand,c
  5122  001502  EC2A  F018         	call	___wmul	;wreg free
  5123  001506  0E29               	movlw	low __powers_
  5124  001508  2421               	addwf	?___wmul,w,c
  5125  00150A  6EF6               	movwf	tblptrl,c
  5126  00150C  0E06               	movlw	high __powers_
  5127  00150E  2022               	addwfc	?___wmul+1,w,c
  5128  001510  6EF7               	movwf	tblptrh,c
  5129  001512                     	if	0	;There are less than 3 active tblptr bytes
  5130  001512                     	endif
  5131  001512  0009               	tblrd		*+
  5132  001514  CFF5 F069          	movff	tablat,___ftmul@f1
  5133  001518  0009               	tblrd		*+
  5134  00151A  CFF5 F06A          	movff	tablat,___ftmul@f1+1
  5135  00151E  000A               	tblrd		*-
  5136  001520  CFF5 F06B          	movff	tablat,___ftmul@f1+2
  5137  001524  ECDF  F00F         	call	___ftmul	;wreg free
  5138  001528  C069  F07B         	movff	?___ftmul,_scale$1575
  5139  00152C  C06A  F07C         	movff	?___ftmul+1,_scale$1575+1
  5140  001530  C06B  F07D         	movff	?___ftmul+2,_scale$1575+2
  5141                           
  5142                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  5143  001534  C07B  F069         	movff	_scale$1575,___ftmul@f1
  5144  001538  C07C  F06A         	movff	_scale$1575+1,___ftmul@f1+1
  5145  00153C  C07D  F06B         	movff	_scale$1575+2,___ftmul@f1+2
  5146  001540  0E00               	movlw	0
  5147  001542  6E24               	movwf	___wmul@multiplicand+1,c
  5148  001544  0E03               	movlw	3
  5149  001546  6E23               	movwf	___wmul@multiplicand,c
  5150  001548  0E00               	movlw	0
  5151  00154A  6E16               	movwf	___awmod@divisor+1,c
  5152  00154C  0E0A               	movlw	10
  5153  00154E  6E15               	movwf	___awmod@divisor,c
  5154  001550  0100               	movlb	0	; () banked
  5155  001552  517E               	movf	scale@scl& (0+255),w,b
  5156  001554  6E13               	movwf	___awmod@dividend,c
  5157  001556  6A14               	clrf	___awmod@dividend+1,c
  5158  001558  BE13               	btfsc	___awmod@dividend,7,c
  5159  00155A  0614               	decf	___awmod@dividend+1,f,c
  5160  00155C  EC0C  F016         	call	___awmod	;wreg free
  5161  001560  C013  F021         	movff	?___awmod,___wmul@multiplier
  5162  001564  C014  F022         	movff	?___awmod+1,___wmul@multiplier+1
  5163  001568  EC2A  F018         	call	___wmul	;wreg free
  5164  00156C  0E29               	movlw	low __powers_
  5165  00156E  2421               	addwf	?___wmul,w,c
  5166  001570  6EF6               	movwf	tblptrl,c
  5167  001572  0E06               	movlw	high __powers_
  5168  001574  2022               	addwfc	?___wmul+1,w,c
  5169  001576  6EF7               	movwf	tblptrh,c
  5170  001578                     	if	0	;There are less than 3 active tblptr bytes
  5171  001578                     	endif
  5172  001578  0009               	tblrd		*+
  5173  00157A  CFF5 F06C          	movff	tablat,___ftmul@f2
  5174  00157E  0009               	tblrd		*+
  5175  001580  CFF5 F06D          	movff	tablat,___ftmul@f2+1
  5176  001584  000A               	tblrd		*-
  5177  001586  CFF5 F06E          	movff	tablat,___ftmul@f2+2
  5178  00158A  ECDF  F00F         	call	___ftmul	;wreg free
  5179  00158E  C069  F078         	movff	?___ftmul,?_scale
  5180  001592  C06A  F079         	movff	?___ftmul+1,?_scale+1
  5181  001596  C06B  F07A         	movff	?___ftmul+2,?_scale+2
  5182  00159A  0012               	return	
  5183  00159C                     l332:
  5184                           
  5185                           ;doprnt.c: 438: else if(scl > 10)
  5186  00159C  0100               	movlb	0	; () banked
  5187  00159E  517E               	movf	scale@scl& (0+255),w,b
  5188  0015A0  0A80               	xorlw	128
  5189  0015A2  0F75               	addlw	-139
  5190  0015A4  A0D8               	btfss	status,0,c
  5191  0015A6  D055               	goto	l334
  5192                           
  5193                           ; BSR set to: 0
  5194                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  5195  0015A8  0E00               	movlw	0
  5196  0015AA  6E1C               	movwf	___awdiv@divisor+1,c
  5197  0015AC  0E0A               	movlw	10
  5198  0015AE  6E1B               	movwf	___awdiv@divisor,c
  5199  0015B0  0100               	movlb	0	; () banked
  5200  0015B2  517E               	movf	scale@scl& (0+255),w,b
  5201  0015B4  6E19               	movwf	___awdiv@dividend,c
  5202  0015B6  6A1A               	clrf	___awdiv@dividend+1,c
  5203  0015B8  BE19               	btfsc	___awdiv@dividend,7,c
  5204  0015BA  061A               	decf	___awdiv@dividend+1,f,c
  5205  0015BC  EC89  F015         	call	___awdiv	;wreg free
  5206  0015C0  0E09               	movlw	9
  5207  0015C2  2419               	addwf	?___awdiv,w,c
  5208  0015C4  6E21               	movwf	___wmul@multiplier,c
  5209  0015C6  0E00               	movlw	0
  5210  0015C8  201A               	addwfc	?___awdiv+1,w,c
  5211  0015CA  6E22               	movwf	___wmul@multiplier+1,c
  5212  0015CC  0E00               	movlw	0
  5213  0015CE  6E24               	movwf	___wmul@multiplicand+1,c
  5214  0015D0  0E03               	movlw	3
  5215  0015D2  6E23               	movwf	___wmul@multiplicand,c
  5216  0015D4  EC2A  F018         	call	___wmul	;wreg free
  5217  0015D8  0E29               	movlw	low __powers_
  5218  0015DA  2421               	addwf	?___wmul,w,c
  5219  0015DC  6EF6               	movwf	tblptrl,c
  5220  0015DE  0E06               	movlw	high __powers_
  5221  0015E0  2022               	addwfc	?___wmul+1,w,c
  5222  0015E2  6EF7               	movwf	tblptrh,c
  5223  0015E4                     	if	0	;There are less than 3 active tblptr bytes
  5224  0015E4                     	endif
  5225  0015E4  0009               	tblrd		*+
  5226  0015E6  CFF5 F069          	movff	tablat,___ftmul@f1
  5227  0015EA  0009               	tblrd		*+
  5228  0015EC  CFF5 F06A          	movff	tablat,___ftmul@f1+1
  5229  0015F0  000A               	tblrd		*-
  5230  0015F2  CFF5 F06B          	movff	tablat,___ftmul@f1+2
  5231  0015F6  0E00               	movlw	0
  5232  0015F8  6E24               	movwf	___wmul@multiplicand+1,c
  5233  0015FA  0E03               	movlw	3
  5234  0015FC  6E23               	movwf	___wmul@multiplicand,c
  5235  0015FE  0E00               	movlw	0
  5236  001600  6E16               	movwf	___awmod@divisor+1,c
  5237  001602  0E0A               	movlw	10
  5238  001604  6E15               	movwf	___awmod@divisor,c
  5239  001606  0100               	movlb	0	; () banked
  5240  001608  517E               	movf	scale@scl& (0+255),w,b
  5241  00160A  6E13               	movwf	___awmod@dividend,c
  5242  00160C  6A14               	clrf	___awmod@dividend+1,c
  5243  00160E  BE13               	btfsc	___awmod@dividend,7,c
  5244  001610  0614               	decf	___awmod@dividend+1,f,c
  5245  001612  EC0C  F016         	call	___awmod	;wreg free
  5246  001616  C013  F021         	movff	?___awmod,___wmul@multiplier
  5247  00161A  C014  F022         	movff	?___awmod+1,___wmul@multiplier+1
  5248  00161E  EC2A  F018         	call	___wmul	;wreg free
  5249  001622  0E29               	movlw	low __powers_
  5250  001624  2421               	addwf	?___wmul,w,c
  5251  001626  6EF6               	movwf	tblptrl,c
  5252  001628  0E06               	movlw	high __powers_
  5253  00162A  2022               	addwfc	?___wmul+1,w,c
  5254  00162C  6EF7               	movwf	tblptrh,c
  5255  00162E                     	if	0	;There are less than 3 active tblptr bytes
  5256  00162E                     	endif
  5257  00162E  0009               	tblrd		*+
  5258  001630  CFF5 F06C          	movff	tablat,___ftmul@f2
  5259  001634  0009               	tblrd		*+
  5260  001636  CFF5 F06D          	movff	tablat,___ftmul@f2+1
  5261  00163A  000A               	tblrd		*-
  5262  00163C  CFF5 F06E          	movff	tablat,___ftmul@f2+2
  5263  001640  ECDF  F00F         	call	___ftmul	;wreg free
  5264  001644  C069  F078         	movff	?___ftmul,?_scale
  5265  001648  C06A  F079         	movff	?___ftmul+1,?_scale+1
  5266  00164C  C06B  F07A         	movff	?___ftmul+2,?_scale+2
  5267  001650  0012               	return	
  5268  001652                     l334:
  5269                           
  5270                           ;doprnt.c: 440: return _powers_[scl];
  5271  001652  0100               	movlb	0	; () banked
  5272  001654  517E               	movf	scale@scl& (0+255),w,b
  5273  001656  0D03               	mullw	3
  5274  001658  0E29               	movlw	low __powers_
  5275  00165A  24F3               	addwf	prodl,w,c
  5276  00165C  6EF6               	movwf	tblptrl,c
  5277  00165E  0E06               	movlw	high __powers_
  5278  001660  20F4               	addwfc	prodh,w,c
  5279  001662  6EF7               	movwf	tblptrh,c
  5280  001664                     	if	0	;There are less than 3 active tblptr bytes
  5281  001664                     	endif
  5282  001664  0009               	tblrd		*+
  5283  001666  CFF5 F078          	movff	tablat,?_scale
  5284  00166A  0009               	tblrd		*+
  5285  00166C  CFF5 F079          	movff	tablat,?_scale+1
  5286  001670  000A               	tblrd		*-
  5287  001672  CFF5 F07A          	movff	tablat,?_scale+2
  5288  001676  0012               	return	
  5289  001678                     __end_of_scale:
  5290                           	opt stack 0
  5291                           tblptru	equ	0xFF8
  5292                           tblptrh	equ	0xFF7
  5293                           tblptrl	equ	0xFF6
  5294                           tablat	equ	0xFF5
  5295                           prodh	equ	0xFF4
  5296                           prodl	equ	0xFF3
  5297                           intcon	equ	0xFF2
  5298                           intcon2	equ	0xFF1
  5299                           intcon3	equ	0xFF0
  5300                           postinc0	equ	0xFEE
  5301                           wreg	equ	0xFE8
  5302                           postinc2	equ	0xFDE
  5303                           postdec2	equ	0xFDD
  5304                           fsr2h	equ	0xFDA
  5305                           fsr2l	equ	0xFD9
  5306                           status	equ	0xFD8
  5307                           
  5308 ;; *************** function _putch *****************
  5309 ;; Defined at:
  5310 ;;		line 160 in file "mcc_generated_files/eusart2.c"
  5311 ;; Parameters:    Size  Location     Type
  5312 ;;  txData          1    wreg     unsigned char 
  5313 ;; Auto vars:     Size  Location     Type
  5314 ;;  txData          1   19[COMRAM] unsigned char 
  5315 ;; Return value:  Size  Location     Type
  5316 ;;                  1    wreg      void 
  5317 ;; Registers used:
  5318 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5319 ;; Tracked objects:
  5320 ;;		On entry : 0/0
  5321 ;;		On exit  : 0/0
  5322 ;;		Unchanged: 0/0
  5323 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5324 ;;      Params:         0       0       0       0       0       0       0
  5325 ;;      Locals:         1       0       0       0       0       0       0
  5326 ;;      Temps:          0       0       0       0       0       0       0
  5327 ;;      Totals:         1       0       0       0       0       0       0
  5328 ;;Total ram usage:        1 bytes
  5329 ;; Hardware stack levels used:    1
  5330 ;; Hardware stack levels required when called:    3
  5331 ;; This function calls:
  5332 ;;		_EUSART2_Write
  5333 ;; This function is called by:
  5334 ;;		_printf
  5335 ;; This function uses a non-reentrant model
  5336 ;;
  5337                           
  5338                           	psect	text13
  5339  003112                     __ptext13:
  5340                           	opt stack 0
  5341  003112                     _putch:
  5342                           	opt stack 26
  5343                           
  5344                           ;incstack = 0
  5345                           ;putch@txData stored from wreg
  5346  003112  6E14               	movwf	putch@txData,c
  5347                           
  5348                           ;eusart2.c: 162: EUSART2_Write(txData);
  5349  003114  5014               	movf	putch@txData,w,c
  5350  003116  EC4F  F017         	call	_EUSART2_Write
  5351  00311A  0012               	return		;funcret
  5352  00311C                     __end_of_putch:
  5353                           	opt stack 0
  5354                           tblptru	equ	0xFF8
  5355                           tblptrh	equ	0xFF7
  5356                           tblptrl	equ	0xFF6
  5357                           tablat	equ	0xFF5
  5358                           prodh	equ	0xFF4
  5359                           prodl	equ	0xFF3
  5360                           intcon	equ	0xFF2
  5361                           intcon2	equ	0xFF1
  5362                           intcon3	equ	0xFF0
  5363                           postinc0	equ	0xFEE
  5364                           wreg	equ	0xFE8
  5365                           postinc2	equ	0xFDE
  5366                           postdec2	equ	0xFDD
  5367                           fsr2h	equ	0xFDA
  5368                           fsr2l	equ	0xFD9
  5369                           status	equ	0xFD8
  5370                           
  5371 ;; *************** function _EUSART2_Write *****************
  5372 ;; Defined at:
  5373 ;;		line 132 in file "mcc_generated_files/eusart2.c"
  5374 ;; Parameters:    Size  Location     Type
  5375 ;;  txData          1    wreg     unsigned char 
  5376 ;; Auto vars:     Size  Location     Type
  5377 ;;  txData          1   18[COMRAM] unsigned char 
  5378 ;; Return value:  Size  Location     Type
  5379 ;;                  1    wreg      void 
  5380 ;; Registers used:
  5381 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5382 ;; Tracked objects:
  5383 ;;		On entry : 0/0
  5384 ;;		On exit  : 0/0
  5385 ;;		Unchanged: 0/0
  5386 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5387 ;;      Params:         0       0       0       0       0       0       0
  5388 ;;      Locals:         1       0       0       0       0       0       0
  5389 ;;      Temps:          0       0       0       0       0       0       0
  5390 ;;      Totals:         1       0       0       0       0       0       0
  5391 ;;Total ram usage:        1 bytes
  5392 ;; Hardware stack levels used:    1
  5393 ;; Hardware stack levels required when called:    2
  5394 ;; This function calls:
  5395 ;;		Nothing
  5396 ;; This function is called by:
  5397 ;;		_putch
  5398 ;;		_checkValue
  5399 ;; This function uses a non-reentrant model
  5400 ;;
  5401                           
  5402                           	psect	text14
  5403  002E9E                     __ptext14:
  5404                           	opt stack 0
  5405  002E9E                     _EUSART2_Write:
  5406                           	opt stack 26
  5407                           
  5408                           ;incstack = 0
  5409                           ;EUSART2_Write@txData stored from wreg
  5410  002E9E  6E13               	movwf	EUSART2_Write@txData,c
  5411  002EA0                     
  5412                           ;eusart2.c: 135: {
  5413                           
  5414                           ;eusart2.c: 134: while(0 == eusart2TxBufferRemaining)
  5415  002EA0  504B               	movf	_eusart2TxBufferRemaining,w,c	;volatile
  5416  002EA2  B4D8               	btfsc	status,2,c
  5417  002EA4  D7FD               	goto	l2428
  5418                           
  5419                           ;eusart2.c: 136: }
  5420                           ;eusart2.c: 138: if(0 == PIE3bits.TX2IE)
  5421  002EA6  B8A3               	btfsc	4003,4,c	;volatile
  5422  002EA8  D003               	goto	l50
  5423                           
  5424                           ;eusart2.c: 139: {
  5425                           ;eusart2.c: 140: TXREG2 = txData;
  5426  002EAA  C013  FF73         	movff	EUSART2_Write@txData,3955	;volatile
  5427                           
  5428                           ;eusart2.c: 141: }
  5429  002EAE  D012               	goto	l51
  5430  002EB0                     l50:
  5431                           
  5432                           ;eusart2.c: 142: else
  5433                           ;eusart2.c: 143: {
  5434                           ;eusart2.c: 144: PIE3bits.TX2IE = 0;
  5435  002EB0  98A3               	bcf	4003,4,c	;volatile
  5436                           
  5437                           ;eusart2.c: 145: eusart2TxBuffer[eusart2TxHead++] = txData;
  5438  002EB2  504A               	movf	_eusart2TxHead,w,c	;volatile
  5439  002EB4  0D01               	mullw	1
  5440  002EB6  0EBD               	movlw	low _eusart2TxBuffer
  5441  002EB8  24F3               	addwf	prodl,w,c
  5442  002EBA  6ED9               	movwf	fsr2l,c
  5443  002EBC  0E00               	movlw	high _eusart2TxBuffer
  5444  002EBE  20F4               	addwfc	prodh,w,c
  5445  002EC0  6EDA               	movwf	fsr2h,c
  5446  002EC2  C013  FFDF         	movff	EUSART2_Write@txData,indf2
  5447  002EC6  2A4A               	incf	_eusart2TxHead,f,c	;volatile
  5448                           
  5449                           ;eusart2.c: 146: if(sizeof(eusart2TxBuffer) <= eusart2TxHead)
  5450  002EC8  0E07               	movlw	7
  5451  002ECA  644A               	cpfsgt	_eusart2TxHead,c	;volatile
  5452  002ECC  D002               	goto	l52
  5453                           
  5454                           ;eusart2.c: 147: {
  5455                           ;eusart2.c: 148: eusart2TxHead = 0;
  5456  002ECE  0E00               	movlw	0
  5457  002ED0  6E4A               	movwf	_eusart2TxHead,c	;volatile
  5458  002ED2                     l52:
  5459                           
  5460                           ;eusart2.c: 149: }
  5461                           ;eusart2.c: 150: eusart2TxBufferRemaining--;
  5462  002ED2  064B               	decf	_eusart2TxBufferRemaining,f,c	;volatile
  5463  002ED4                     l51:
  5464                           
  5465                           ;eusart2.c: 151: }
  5466                           ;eusart2.c: 152: PIE3bits.TX2IE = 1;
  5467  002ED4  88A3               	bsf	4003,4,c	;volatile
  5468  002ED6  0012               	return		;funcret
  5469  002ED8                     __end_of_EUSART2_Write:
  5470                           	opt stack 0
  5471                           tblptru	equ	0xFF8
  5472                           tblptrh	equ	0xFF7
  5473                           tblptrl	equ	0xFF6
  5474                           tablat	equ	0xFF5
  5475                           prodh	equ	0xFF4
  5476                           prodl	equ	0xFF3
  5477                           intcon	equ	0xFF2
  5478                           intcon2	equ	0xFF1
  5479                           intcon3	equ	0xFF0
  5480                           postinc0	equ	0xFEE
  5481                           wreg	equ	0xFE8
  5482                           indf2	equ	0xFDF
  5483                           postinc2	equ	0xFDE
  5484                           postdec2	equ	0xFDD
  5485                           fsr2h	equ	0xFDA
  5486                           fsr2l	equ	0xFD9
  5487                           status	equ	0xFD8
  5488                           
  5489 ;; *************** function _isdigit *****************
  5490 ;; Defined at:
  5491 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\isdigit.c"
  5492 ;; Parameters:    Size  Location     Type
  5493 ;;  c               1    wreg     unsigned char 
  5494 ;; Auto vars:     Size  Location     Type
  5495 ;;  c               1   20[COMRAM] unsigned char 
  5496 ;; Return value:  Size  Location     Type
  5497 ;;		None               void
  5498 ;; Registers used:
  5499 ;;		wreg, status,2, status,0
  5500 ;; Tracked objects:
  5501 ;;		On entry : 0/0
  5502 ;;		On exit  : 0/0
  5503 ;;		Unchanged: 0/0
  5504 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5505 ;;      Params:         0       0       0       0       0       0       0
  5506 ;;      Locals:         2       0       0       0       0       0       0
  5507 ;;      Temps:          1       0       0       0       0       0       0
  5508 ;;      Totals:         3       0       0       0       0       0       0
  5509 ;;Total ram usage:        3 bytes
  5510 ;; Hardware stack levels used:    1
  5511 ;; Hardware stack levels required when called:    2
  5512 ;; This function calls:
  5513 ;;		Nothing
  5514 ;; This function is called by:
  5515 ;;		_printf
  5516 ;; This function uses a non-reentrant model
  5517 ;;
  5518                           
  5519                           	psect	text15
  5520  0030C2                     __ptext15:
  5521                           	opt stack 0
  5522  0030C2                     _isdigit:
  5523                           	opt stack 27
  5524                           
  5525                           ;incstack = 0
  5526                           ;isdigit@c stored from wreg
  5527  0030C2  6E15               	movwf	isdigit@c,c
  5528  0030C4  0E00               	movlw	0
  5529  0030C6  6E14               	movwf	_isdigit$1199,c
  5530  0030C8  0E3A               	movlw	58
  5531  0030CA  6015               	cpfslt	isdigit@c,c
  5532  0030CC  D005               	goto	l803
  5533  0030CE  0E2F               	movlw	47
  5534  0030D0  6415               	cpfsgt	isdigit@c,c
  5535  0030D2  D002               	goto	l803
  5536  0030D4  0E01               	movlw	1
  5537  0030D6  6E14               	movwf	_isdigit$1199,c
  5538  0030D8                     l803:
  5539  0030D8  C014  F013         	movff	_isdigit$1199,??_isdigit
  5540  0030DC  3013               	rrcf	??_isdigit,w,c
  5541  0030DE  0012               	return	
  5542  0030E0                     __end_of_isdigit:
  5543                           	opt stack 0
  5544                           tblptru	equ	0xFF8
  5545                           tblptrh	equ	0xFF7
  5546                           tblptrl	equ	0xFF6
  5547                           tablat	equ	0xFF5
  5548                           prodh	equ	0xFF4
  5549                           prodl	equ	0xFF3
  5550                           intcon	equ	0xFF2
  5551                           intcon2	equ	0xFF1
  5552                           intcon3	equ	0xFF0
  5553                           postinc0	equ	0xFEE
  5554                           wreg	equ	0xFE8
  5555                           indf2	equ	0xFDF
  5556                           postinc2	equ	0xFDE
  5557                           postdec2	equ	0xFDD
  5558                           fsr2h	equ	0xFDA
  5559                           fsr2l	equ	0xFD9
  5560                           status	equ	0xFD8
  5561                           
  5562 ;; *************** function _fround *****************
  5563 ;; Defined at:
  5564 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\doprnt.c"
  5565 ;; Parameters:    Size  Location     Type
  5566 ;;  prec            1    wreg     unsigned char 
  5567 ;; Auto vars:     Size  Location     Type
  5568 ;;  prec            1   33[BANK0 ] unsigned char 
  5569 ;; Return value:  Size  Location     Type
  5570 ;;                  3   24[BANK0 ] unsigned char 
  5571 ;; Registers used:
  5572 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5573 ;; Tracked objects:
  5574 ;;		On entry : 0/0
  5575 ;;		On exit  : 0/0
  5576 ;;		Unchanged: 0/0
  5577 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5578 ;;      Params:         0       3       0       0       0       0       0
  5579 ;;      Locals:         0       7       0       0       0       0       0
  5580 ;;      Temps:          0       0       0       0       0       0       0
  5581 ;;      Totals:         0      10       0       0       0       0       0
  5582 ;;Total ram usage:       10 bytes
  5583 ;; Hardware stack levels used:    1
  5584 ;; Hardware stack levels required when called:    4
  5585 ;; This function calls:
  5586 ;;		___awdiv
  5587 ;;		___awmod
  5588 ;;		___ftmul
  5589 ;;		___wmul
  5590 ;; This function is called by:
  5591 ;;		_printf
  5592 ;; This function uses a non-reentrant model
  5593 ;;
  5594                           
  5595                           	psect	text16
  5596  001988                     __ptext16:
  5597                           	opt stack 0
  5598  001988                     _fround:
  5599                           	opt stack 25
  5600                           
  5601                           ;incstack = 0
  5602                           ;fround@prec stored from wreg
  5603  001988  0100               	movlb	0	; () banked
  5604  00198A  6F81               	movwf	fround@prec& (0+255),b
  5605                           
  5606                           ;doprnt.c: 413: if(prec>=110)
  5607  00198C  0E6D               	movlw	109
  5608  00198E  0100               	movlb	0	; () banked
  5609  001990  6581               	cpfsgt	fround@prec& (0+255),b
  5610  001992  D0A2               	goto	l321
  5611                           
  5612                           ; BSR set to: 0
  5613                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  5614  001994  0E00               	movlw	0
  5615  001996  6E24               	movwf	___wmul@multiplicand+1,c
  5616  001998  0E03               	movlw	3
  5617  00199A  6E23               	movwf	___wmul@multiplicand,c
  5618  00199C  0E00               	movlw	0
  5619  00199E  6E1C               	movwf	___awdiv@divisor+1,c
  5620  0019A0  0E0A               	movlw	10
  5621  0019A2  6E1B               	movwf	___awdiv@divisor,c
  5622  0019A4  0E00               	movlw	0
  5623  0019A6  6E16               	movwf	___awmod@divisor+1,c
  5624  0019A8  0E64               	movlw	100
  5625  0019AA  6E15               	movwf	___awmod@divisor,c
  5626  0019AC  C081  F013         	movff	fround@prec,___awmod@dividend
  5627  0019B0  6A14               	clrf	___awmod@dividend+1,c
  5628  0019B2  EC0C  F016         	call	___awmod	;wreg free
  5629  0019B6  C013  F019         	movff	?___awmod,___awdiv@dividend
  5630  0019BA  C014  F01A         	movff	?___awmod+1,___awdiv@dividend+1
  5631  0019BE  EC89  F015         	call	___awdiv	;wreg free
  5632  0019C2  0E09               	movlw	9
  5633  0019C4  2419               	addwf	?___awdiv,w,c
  5634  0019C6  6E21               	movwf	___wmul@multiplier,c
  5635  0019C8  0E00               	movlw	0
  5636  0019CA  201A               	addwfc	?___awdiv+1,w,c
  5637  0019CC  6E22               	movwf	___wmul@multiplier+1,c
  5638  0019CE  EC2A  F018         	call	___wmul	;wreg free
  5639  0019D2  0E50               	movlw	low __npowers_
  5640  0019D4  2421               	addwf	?___wmul,w,c
  5641  0019D6  6EF6               	movwf	tblptrl,c
  5642  0019D8  0E06               	movlw	high __npowers_
  5643  0019DA  2022               	addwfc	?___wmul+1,w,c
  5644  0019DC  6EF7               	movwf	tblptrh,c
  5645  0019DE                     	if	0	;There are less than 3 active tblptr bytes
  5646  0019DE                     	endif
  5647  0019DE  0009               	tblrd		*+
  5648  0019E0  CFF5 F06C          	movff	tablat,___ftmul@f2
  5649  0019E4  0009               	tblrd		*+
  5650  0019E6  CFF5 F06D          	movff	tablat,___ftmul@f2+1
  5651  0019EA  000A               	tblrd		*-
  5652  0019EC  CFF5 F06E          	movff	tablat,___ftmul@f2+2
  5653  0019F0  0E00               	movlw	0
  5654  0019F2  6E1C               	movwf	___awdiv@divisor+1,c
  5655  0019F4  0E64               	movlw	100
  5656  0019F6  6E1B               	movwf	___awdiv@divisor,c
  5657  0019F8  C081  F019         	movff	fround@prec,___awdiv@dividend
  5658  0019FC  6A1A               	clrf	___awdiv@dividend+1,c
  5659  0019FE  EC89  F015         	call	___awdiv	;wreg free
  5660  001A02  0E12               	movlw	18
  5661  001A04  2419               	addwf	?___awdiv,w,c
  5662  001A06  6E21               	movwf	___wmul@multiplier,c
  5663  001A08  0E00               	movlw	0
  5664  001A0A  201A               	addwfc	?___awdiv+1,w,c
  5665  001A0C  6E22               	movwf	___wmul@multiplier+1,c
  5666  001A0E  0E00               	movlw	0
  5667  001A10  6E24               	movwf	___wmul@multiplicand+1,c
  5668  001A12  0E03               	movlw	3
  5669  001A14  6E23               	movwf	___wmul@multiplicand,c
  5670  001A16  EC2A  F018         	call	___wmul	;wreg free
  5671  001A1A  0E50               	movlw	low __npowers_
  5672  001A1C  2421               	addwf	?___wmul,w,c
  5673  001A1E  6EF6               	movwf	tblptrl,c
  5674  001A20  0E06               	movlw	high __npowers_
  5675  001A22  2022               	addwfc	?___wmul+1,w,c
  5676  001A24  6EF7               	movwf	tblptrh,c
  5677  001A26                     	if	0	;There are less than 3 active tblptr bytes
  5678  001A26                     	endif
  5679  001A26  0009               	tblrd		*+
  5680  001A28  CFF5 F069          	movff	tablat,___ftmul@f1
  5681  001A2C  0009               	tblrd		*+
  5682  001A2E  CFF5 F06A          	movff	tablat,___ftmul@f1+1
  5683  001A32  000A               	tblrd		*-
  5684  001A34  CFF5 F06B          	movff	tablat,___ftmul@f1+2
  5685  001A38  ECDF  F00F         	call	___ftmul	;wreg free
  5686  001A3C  C069  F07E         	movff	?___ftmul,_fround$1573
  5687  001A40  C06A  F07F         	movff	?___ftmul+1,_fround$1573+1
  5688  001A44  C06B  F080         	movff	?___ftmul+2,_fround$1573+2
  5689                           
  5690                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  5691  001A48  0E00               	movlw	0
  5692  001A4A  6E24               	movwf	___wmul@multiplicand+1,c
  5693  001A4C  0E03               	movlw	3
  5694  001A4E  6E23               	movwf	___wmul@multiplicand,c
  5695  001A50  0E00               	movlw	0
  5696  001A52  6E16               	movwf	___awmod@divisor+1,c
  5697  001A54  0E0A               	movlw	10
  5698  001A56  6E15               	movwf	___awmod@divisor,c
  5699  001A58  C081  F013         	movff	fround@prec,___awmod@dividend
  5700  001A5C  6A14               	clrf	___awmod@dividend+1,c
  5701  001A5E  EC0C  F016         	call	___awmod	;wreg free
  5702  001A62  C013  F021         	movff	?___awmod,___wmul@multiplier
  5703  001A66  C014  F022         	movff	?___awmod+1,___wmul@multiplier+1
  5704  001A6A  EC2A  F018         	call	___wmul	;wreg free
  5705  001A6E  0E50               	movlw	low __npowers_
  5706  001A70  2421               	addwf	?___wmul,w,c
  5707  001A72  6EF6               	movwf	tblptrl,c
  5708  001A74  0E06               	movlw	high __npowers_
  5709  001A76  2022               	addwfc	?___wmul+1,w,c
  5710  001A78  6EF7               	movwf	tblptrh,c
  5711  001A7A                     	if	0	;There are less than 3 active tblptr bytes
  5712  001A7A                     	endif
  5713  001A7A  0009               	tblrd		*+
  5714  001A7C  CFF5 F06C          	movff	tablat,___ftmul@f2
  5715  001A80  0009               	tblrd		*+
  5716  001A82  CFF5 F06D          	movff	tablat,___ftmul@f2+1
  5717  001A86  000A               	tblrd		*-
  5718  001A88  CFF5 F06E          	movff	tablat,___ftmul@f2+2
  5719  001A8C  C07E  F069         	movff	_fround$1573,___ftmul@f1
  5720  001A90  C07F  F06A         	movff	_fround$1573+1,___ftmul@f1+1
  5721  001A94  C080  F06B         	movff	_fround$1573+2,___ftmul@f1+2
  5722  001A98  ECDF  F00F         	call	___ftmul	;wreg free
  5723  001A9C  C069  F07B         	movff	?___ftmul,_fround$1574
  5724  001AA0  C06A  F07C         	movff	?___ftmul+1,_fround$1574+1
  5725  001AA4  C06B  F07D         	movff	?___ftmul+2,_fround$1574+2
  5726                           
  5727                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  5728  001AA8  C07B  F069         	movff	_fround$1574,___ftmul@f1
  5729  001AAC  C07C  F06A         	movff	_fround$1574+1,___ftmul@f1+1
  5730  001AB0  C07D  F06B         	movff	_fround$1574+2,___ftmul@f1+2
  5731  001AB4  0E00               	movlw	0
  5732  001AB6  0100               	movlb	0	; () banked
  5733  001AB8  6F6C               	movwf	___ftmul@f2& (0+255),b
  5734  001ABA  0E00               	movlw	0
  5735  001ABC  0100               	movlb	0	; () banked
  5736  001ABE  6F6D               	movwf	(___ftmul@f2+1)& (0+255),b
  5737  001AC0  0E3F               	movlw	63
  5738  001AC2  0100               	movlb	0	; () banked
  5739  001AC4  6F6E               	movwf	(___ftmul@f2+2)& (0+255),b
  5740  001AC6  ECDF  F00F         	call	___ftmul	;wreg free
  5741  001ACA  C069  F078         	movff	?___ftmul,?_fround
  5742  001ACE  C06A  F079         	movff	?___ftmul+1,?_fround+1
  5743  001AD2  C06B  F07A         	movff	?___ftmul+2,?_fround+2
  5744  001AD6  0012               	return	
  5745  001AD8                     l321:
  5746                           
  5747                           ;doprnt.c: 415: else if(prec > 10)
  5748  001AD8  0E0A               	movlw	10
  5749  001ADA  0100               	movlb	0	; () banked
  5750  001ADC  6581               	cpfsgt	fround@prec& (0+255),b
  5751  001ADE  D066               	goto	l324
  5752                           
  5753                           ; BSR set to: 0
  5754                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  5755  001AE0  0E00               	movlw	0
  5756  001AE2  6E24               	movwf	___wmul@multiplicand+1,c
  5757  001AE4  0E03               	movlw	3
  5758  001AE6  6E23               	movwf	___wmul@multiplicand,c
  5759  001AE8  0E00               	movlw	0
  5760  001AEA  6E16               	movwf	___awmod@divisor+1,c
  5761  001AEC  0E0A               	movlw	10
  5762  001AEE  6E15               	movwf	___awmod@divisor,c
  5763  001AF0  C081  F013         	movff	fround@prec,___awmod@dividend
  5764  001AF4  6A14               	clrf	___awmod@dividend+1,c
  5765  001AF6  EC0C  F016         	call	___awmod	;wreg free
  5766  001AFA  C013  F021         	movff	?___awmod,___wmul@multiplier
  5767  001AFE  C014  F022         	movff	?___awmod+1,___wmul@multiplier+1
  5768  001B02  EC2A  F018         	call	___wmul	;wreg free
  5769  001B06  0E50               	movlw	low __npowers_
  5770  001B08  2421               	addwf	?___wmul,w,c
  5771  001B0A  6EF6               	movwf	tblptrl,c
  5772  001B0C  0E06               	movlw	high __npowers_
  5773  001B0E  2022               	addwfc	?___wmul+1,w,c
  5774  001B10  6EF7               	movwf	tblptrh,c
  5775  001B12                     	if	0	;There are less than 3 active tblptr bytes
  5776  001B12                     	endif
  5777  001B12  0009               	tblrd		*+
  5778  001B14  CFF5 F06C          	movff	tablat,___ftmul@f2
  5779  001B18  0009               	tblrd		*+
  5780  001B1A  CFF5 F06D          	movff	tablat,___ftmul@f2+1
  5781  001B1E  000A               	tblrd		*-
  5782  001B20  CFF5 F06E          	movff	tablat,___ftmul@f2+2
  5783  001B24  0E00               	movlw	0
  5784  001B26  6E1C               	movwf	___awdiv@divisor+1,c
  5785  001B28  0E0A               	movlw	10
  5786  001B2A  6E1B               	movwf	___awdiv@divisor,c
  5787  001B2C  C081  F019         	movff	fround@prec,___awdiv@dividend
  5788  001B30  6A1A               	clrf	___awdiv@dividend+1,c
  5789  001B32  EC89  F015         	call	___awdiv	;wreg free
  5790  001B36  0E09               	movlw	9
  5791  001B38  2419               	addwf	?___awdiv,w,c
  5792  001B3A  6E21               	movwf	___wmul@multiplier,c
  5793  001B3C  0E00               	movlw	0
  5794  001B3E  201A               	addwfc	?___awdiv+1,w,c
  5795  001B40  6E22               	movwf	___wmul@multiplier+1,c
  5796  001B42  0E00               	movlw	0
  5797  001B44  6E24               	movwf	___wmul@multiplicand+1,c
  5798  001B46  0E03               	movlw	3
  5799  001B48  6E23               	movwf	___wmul@multiplicand,c
  5800  001B4A  EC2A  F018         	call	___wmul	;wreg free
  5801  001B4E  0E50               	movlw	low __npowers_
  5802  001B50  2421               	addwf	?___wmul,w,c
  5803  001B52  6EF6               	movwf	tblptrl,c
  5804  001B54  0E06               	movlw	high __npowers_
  5805  001B56  2022               	addwfc	?___wmul+1,w,c
  5806  001B58  6EF7               	movwf	tblptrh,c
  5807  001B5A                     	if	0	;There are less than 3 active tblptr bytes
  5808  001B5A                     	endif
  5809  001B5A  0009               	tblrd		*+
  5810  001B5C  CFF5 F069          	movff	tablat,___ftmul@f1
  5811  001B60  0009               	tblrd		*+
  5812  001B62  CFF5 F06A          	movff	tablat,___ftmul@f1+1
  5813  001B66  000A               	tblrd		*-
  5814  001B68  CFF5 F06B          	movff	tablat,___ftmul@f1+2
  5815  001B6C  ECDF  F00F         	call	___ftmul	;wreg free
  5816  001B70  C069  F07E         	movff	?___ftmul,_fround$1573
  5817  001B74  C06A  F07F         	movff	?___ftmul+1,_fround$1573+1
  5818  001B78  C06B  F080         	movff	?___ftmul+2,_fround$1573+2
  5819                           
  5820                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  5821  001B7C  C07E  F069         	movff	_fround$1573,___ftmul@f1
  5822  001B80  C07F  F06A         	movff	_fround$1573+1,___ftmul@f1+1
  5823  001B84  C080  F06B         	movff	_fround$1573+2,___ftmul@f1+2
  5824  001B88  0E00               	movlw	0
  5825  001B8A  0100               	movlb	0	; () banked
  5826  001B8C  6F6C               	movwf	___ftmul@f2& (0+255),b
  5827  001B8E  0E00               	movlw	0
  5828  001B90  0100               	movlb	0	; () banked
  5829  001B92  6F6D               	movwf	(___ftmul@f2+1)& (0+255),b
  5830  001B94  0E3F               	movlw	63
  5831  001B96  0100               	movlb	0	; () banked
  5832  001B98  6F6E               	movwf	(___ftmul@f2+2)& (0+255),b
  5833  001B9A  ECDF  F00F         	call	___ftmul	;wreg free
  5834  001B9E  C069  F078         	movff	?___ftmul,?_fround
  5835  001BA2  C06A  F079         	movff	?___ftmul+1,?_fround+1
  5836  001BA6  C06B  F07A         	movff	?___ftmul+2,?_fround+2
  5837  001BAA  0012               	return	
  5838  001BAC                     l324:
  5839                           
  5840                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  5841  001BAC  0100               	movlb	0	; () banked
  5842  001BAE  5181               	movf	fround@prec& (0+255),w,b
  5843  001BB0  0D03               	mullw	3
  5844  001BB2  0E50               	movlw	low __npowers_
  5845  001BB4  24F3               	addwf	prodl,w,c
  5846  001BB6  6EF6               	movwf	tblptrl,c
  5847  001BB8  0E06               	movlw	high __npowers_
  5848  001BBA  20F4               	addwfc	prodh,w,c
  5849  001BBC  6EF7               	movwf	tblptrh,c
  5850  001BBE                     	if	0	;There are less than 3 active tblptr bytes
  5851  001BBE                     	endif
  5852  001BBE  0009               	tblrd		*+
  5853  001BC0  CFF5 F069          	movff	tablat,___ftmul@f1
  5854  001BC4  0009               	tblrd		*+
  5855  001BC6  CFF5 F06A          	movff	tablat,___ftmul@f1+1
  5856  001BCA  000A               	tblrd		*-
  5857  001BCC  CFF5 F06B          	movff	tablat,___ftmul@f1+2
  5858  001BD0  0E00               	movlw	0
  5859  001BD2  0100               	movlb	0	; () banked
  5860  001BD4  6F6C               	movwf	___ftmul@f2& (0+255),b
  5861  001BD6  0E00               	movlw	0
  5862  001BD8  0100               	movlb	0	; () banked
  5863  001BDA  6F6D               	movwf	(___ftmul@f2+1)& (0+255),b
  5864  001BDC  0E3F               	movlw	63
  5865  001BDE  0100               	movlb	0	; () banked
  5866  001BE0  6F6E               	movwf	(___ftmul@f2+2)& (0+255),b
  5867  001BE2  ECDF  F00F         	call	___ftmul	;wreg free
  5868  001BE6  C069  F078         	movff	?___ftmul,?_fround
  5869  001BEA  C06A  F079         	movff	?___ftmul+1,?_fround+1
  5870  001BEE  C06B  F07A         	movff	?___ftmul+2,?_fround+2
  5871  001BF2  0012               	return	
  5872  001BF4                     __end_of_fround:
  5873                           	opt stack 0
  5874                           tblptru	equ	0xFF8
  5875                           tblptrh	equ	0xFF7
  5876                           tblptrl	equ	0xFF6
  5877                           tablat	equ	0xFF5
  5878                           prodh	equ	0xFF4
  5879                           prodl	equ	0xFF3
  5880                           intcon	equ	0xFF2
  5881                           intcon2	equ	0xFF1
  5882                           intcon3	equ	0xFF0
  5883                           postinc0	equ	0xFEE
  5884                           wreg	equ	0xFE8
  5885                           indf2	equ	0xFDF
  5886                           postinc2	equ	0xFDE
  5887                           postdec2	equ	0xFDD
  5888                           fsr2h	equ	0xFDA
  5889                           fsr2l	equ	0xFD9
  5890                           status	equ	0xFD8
  5891                           
  5892 ;; *************** function ___wmul *****************
  5893 ;; Defined at:
  5894 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\Umul16.c"
  5895 ;; Parameters:    Size  Location     Type
  5896 ;;  multiplier      2   32[COMRAM] unsigned int 
  5897 ;;  multiplicand    2   34[COMRAM] unsigned int 
  5898 ;; Auto vars:     Size  Location     Type
  5899 ;;  product         2   36[COMRAM] unsigned int 
  5900 ;; Return value:  Size  Location     Type
  5901 ;;                  2   32[COMRAM] unsigned int 
  5902 ;; Registers used:
  5903 ;;		wreg, status,2, status,0, prodl, prodh
  5904 ;; Tracked objects:
  5905 ;;		On entry : 0/0
  5906 ;;		On exit  : 0/0
  5907 ;;		Unchanged: 0/0
  5908 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5909 ;;      Params:         4       0       0       0       0       0       0
  5910 ;;      Locals:         2       0       0       0       0       0       0
  5911 ;;      Temps:          0       0       0       0       0       0       0
  5912 ;;      Totals:         6       0       0       0       0       0       0
  5913 ;;Total ram usage:        6 bytes
  5914 ;; Hardware stack levels used:    1
  5915 ;; Hardware stack levels required when called:    2
  5916 ;; This function calls:
  5917 ;;		Nothing
  5918 ;; This function is called by:
  5919 ;;		_fround
  5920 ;;		_scale
  5921 ;;		_printf
  5922 ;; This function uses a non-reentrant model
  5923 ;;
  5924                           
  5925                           	psect	text17
  5926  003054                     __ptext17:
  5927                           	opt stack 0
  5928  003054                     ___wmul:
  5929                           	opt stack 26
  5930                           
  5931                           ;incstack = 0
  5932  003054  5021               	movf	___wmul@multiplier,w,c
  5933  003056  0223               	mulwf	___wmul@multiplicand,c
  5934  003058  CFF3 F025          	movff	prodl,___wmul@product
  5935  00305C  CFF4 F026          	movff	prodh,___wmul@product+1
  5936  003060  5021               	movf	___wmul@multiplier,w,c
  5937  003062  0224               	mulwf	___wmul@multiplicand+1,c
  5938  003064  50F3               	movf	prodl,w,c
  5939  003066  2626               	addwf	___wmul@product+1,f,c
  5940  003068  5022               	movf	___wmul@multiplier+1,w,c
  5941  00306A  0223               	mulwf	___wmul@multiplicand,c
  5942  00306C  50F3               	movf	prodl,w,c
  5943  00306E  2626               	addwf	___wmul@product+1,f,c
  5944  003070  C025  F021         	movff	___wmul@product,?___wmul
  5945  003074  C026  F022         	movff	___wmul@product+1,?___wmul+1
  5946  003078  0012               	return	
  5947  00307A                     __end_of___wmul:
  5948                           	opt stack 0
  5949                           tblptru	equ	0xFF8
  5950                           tblptrh	equ	0xFF7
  5951                           tblptrl	equ	0xFF6
  5952                           tablat	equ	0xFF5
  5953                           prodh	equ	0xFF4
  5954                           prodl	equ	0xFF3
  5955                           intcon	equ	0xFF2
  5956                           intcon2	equ	0xFF1
  5957                           intcon3	equ	0xFF0
  5958                           postinc0	equ	0xFEE
  5959                           wreg	equ	0xFE8
  5960                           indf2	equ	0xFDF
  5961                           postinc2	equ	0xFDE
  5962                           postdec2	equ	0xFDD
  5963                           fsr2h	equ	0xFDA
  5964                           fsr2l	equ	0xFD9
  5965                           status	equ	0xFD8
  5966                           
  5967 ;; *************** function ___awmod *****************
  5968 ;; Defined at:
  5969 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\awmod.c"
  5970 ;; Parameters:    Size  Location     Type
  5971 ;;  dividend        2   18[COMRAM] int 
  5972 ;;  divisor         2   20[COMRAM] int 
  5973 ;; Auto vars:     Size  Location     Type
  5974 ;;  sign            1   23[COMRAM] unsigned char 
  5975 ;;  counter         1   22[COMRAM] unsigned char 
  5976 ;; Return value:  Size  Location     Type
  5977 ;;                  2   18[COMRAM] int 
  5978 ;; Registers used:
  5979 ;;		wreg, status,2, status,0
  5980 ;; Tracked objects:
  5981 ;;		On entry : 0/0
  5982 ;;		On exit  : 0/0
  5983 ;;		Unchanged: 0/0
  5984 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5985 ;;      Params:         4       0       0       0       0       0       0
  5986 ;;      Locals:         2       0       0       0       0       0       0
  5987 ;;      Temps:          0       0       0       0       0       0       0
  5988 ;;      Totals:         6       0       0       0       0       0       0
  5989 ;;Total ram usage:        6 bytes
  5990 ;; Hardware stack levels used:    1
  5991 ;; Hardware stack levels required when called:    2
  5992 ;; This function calls:
  5993 ;;		Nothing
  5994 ;; This function is called by:
  5995 ;;		_fround
  5996 ;;		_scale
  5997 ;; This function uses a non-reentrant model
  5998 ;;
  5999                           
  6000                           	psect	text18
  6001  002C18                     __ptext18:
  6002                           	opt stack 0
  6003  002C18                     ___awmod:
  6004                           	opt stack 26
  6005                           
  6006                           ;incstack = 0
  6007  002C18  0E00               	movlw	0
  6008  002C1A  6E18               	movwf	___awmod@sign,c
  6009  002C1C  AE14               	btfss	___awmod@dividend+1,7,c
  6010  002C1E  D006               	goto	l620
  6011  002C20  6C13               	negf	___awmod@dividend,c
  6012  002C22  1E14               	comf	___awmod@dividend+1,f,c
  6013  002C24  B0D8               	btfsc	status,0,c
  6014  002C26  2A14               	incf	___awmod@dividend+1,f,c
  6015  002C28  0E01               	movlw	1
  6016  002C2A  6E18               	movwf	___awmod@sign,c
  6017  002C2C                     l620:
  6018  002C2C  AE16               	btfss	___awmod@divisor+1,7,c
  6019  002C2E  D004               	goto	l621
  6020  002C30  6C15               	negf	___awmod@divisor,c
  6021  002C32  1E16               	comf	___awmod@divisor+1,f,c
  6022  002C34  B0D8               	btfsc	status,0,c
  6023  002C36  2A16               	incf	___awmod@divisor+1,f,c
  6024  002C38                     l621:
  6025  002C38  5015               	movf	___awmod@divisor,w,c
  6026  002C3A  1016               	iorwf	___awmod@divisor+1,w,c
  6027  002C3C  B4D8               	btfsc	status,2,c
  6028  002C3E  D018               	goto	l628
  6029  002C40  0E01               	movlw	1
  6030  002C42  6E17               	movwf	___awmod@counter,c
  6031  002C44  D004               	goto	l623
  6032  002C46  90D8               	bcf	status,0,c
  6033  002C48  3615               	rlcf	___awmod@divisor,f,c
  6034  002C4A  3616               	rlcf	___awmod@divisor+1,f,c
  6035  002C4C  2A17               	incf	___awmod@counter,f,c
  6036  002C4E                     l623:
  6037  002C4E  AE16               	btfss	___awmod@divisor+1,7,c
  6038  002C50  D7FA               	goto	l624
  6039  002C52                     u2490:
  6040  002C52  5015               	movf	___awmod@divisor,w,c
  6041  002C54  5C13               	subwf	___awmod@dividend,w,c
  6042  002C56  5016               	movf	___awmod@divisor+1,w,c
  6043  002C58  5814               	subwfb	___awmod@dividend+1,w,c
  6044  002C5A  A0D8               	btfss	status,0,c
  6045  002C5C  D004               	goto	l627
  6046  002C5E  5015               	movf	___awmod@divisor,w,c
  6047  002C60  5E13               	subwf	___awmod@dividend,f,c
  6048  002C62  5016               	movf	___awmod@divisor+1,w,c
  6049  002C64  5A14               	subwfb	___awmod@dividend+1,f,c
  6050  002C66                     l627:
  6051  002C66  90D8               	bcf	status,0,c
  6052  002C68  3216               	rrcf	___awmod@divisor+1,f,c
  6053  002C6A  3215               	rrcf	___awmod@divisor,f,c
  6054  002C6C  2E17               	decfsz	___awmod@counter,f,c
  6055  002C6E  D7F1               	goto	u2490
  6056  002C70                     l628:
  6057  002C70  5018               	movf	___awmod@sign,w,c
  6058  002C72  B4D8               	btfsc	status,2,c
  6059  002C74  D004               	goto	l629
  6060  002C76  6C13               	negf	___awmod@dividend,c
  6061  002C78  1E14               	comf	___awmod@dividend+1,f,c
  6062  002C7A  B0D8               	btfsc	status,0,c
  6063  002C7C  2A14               	incf	___awmod@dividend+1,f,c
  6064  002C7E                     l629:
  6065  002C7E  C013  F013         	movff	___awmod@dividend,?___awmod
  6066  002C82  C014  F014         	movff	___awmod@dividend+1,?___awmod+1
  6067  002C86  0012               	return	
  6068  002C88                     __end_of___awmod:
  6069                           	opt stack 0
  6070                           tblptru	equ	0xFF8
  6071                           tblptrh	equ	0xFF7
  6072                           tblptrl	equ	0xFF6
  6073                           tablat	equ	0xFF5
  6074                           prodh	equ	0xFF4
  6075                           prodl	equ	0xFF3
  6076                           intcon	equ	0xFF2
  6077                           intcon2	equ	0xFF1
  6078                           intcon3	equ	0xFF0
  6079                           postinc0	equ	0xFEE
  6080                           wreg	equ	0xFE8
  6081                           indf2	equ	0xFDF
  6082                           postinc2	equ	0xFDE
  6083                           postdec2	equ	0xFDD
  6084                           fsr2h	equ	0xFDA
  6085                           fsr2l	equ	0xFD9
  6086                           status	equ	0xFD8
  6087                           
  6088 ;; *************** function ___awdiv *****************
  6089 ;; Defined at:
  6090 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\awdiv.c"
  6091 ;; Parameters:    Size  Location     Type
  6092 ;;  dividend        2   24[COMRAM] int 
  6093 ;;  divisor         2   26[COMRAM] int 
  6094 ;; Auto vars:     Size  Location     Type
  6095 ;;  quotient        2   30[COMRAM] int 
  6096 ;;  sign            1   29[COMRAM] unsigned char 
  6097 ;;  counter         1   28[COMRAM] unsigned char 
  6098 ;; Return value:  Size  Location     Type
  6099 ;;                  2   24[COMRAM] int 
  6100 ;; Registers used:
  6101 ;;		wreg, status,2, status,0
  6102 ;; Tracked objects:
  6103 ;;		On entry : 0/0
  6104 ;;		On exit  : 0/0
  6105 ;;		Unchanged: 0/0
  6106 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6107 ;;      Params:         4       0       0       0       0       0       0
  6108 ;;      Locals:         4       0       0       0       0       0       0
  6109 ;;      Temps:          0       0       0       0       0       0       0
  6110 ;;      Totals:         8       0       0       0       0       0       0
  6111 ;;Total ram usage:        8 bytes
  6112 ;; Hardware stack levels used:    1
  6113 ;; Hardware stack levels required when called:    2
  6114 ;; This function calls:
  6115 ;;		Nothing
  6116 ;; This function is called by:
  6117 ;;		_fround
  6118 ;;		_scale
  6119 ;;		_printf
  6120 ;; This function uses a non-reentrant model
  6121 ;;
  6122                           
  6123                           	psect	text19
  6124  002B12                     __ptext19:
  6125                           	opt stack 0
  6126  002B12                     ___awdiv:
  6127                           	opt stack 26
  6128                           
  6129                           ;incstack = 0
  6130  002B12  0E00               	movlw	0
  6131  002B14  6E1E               	movwf	___awdiv@sign,c
  6132  002B16  AE1C               	btfss	___awdiv@divisor+1,7,c
  6133  002B18  D006               	goto	l607
  6134  002B1A  6C1B               	negf	___awdiv@divisor,c
  6135  002B1C  1E1C               	comf	___awdiv@divisor+1,f,c
  6136  002B1E  B0D8               	btfsc	status,0,c
  6137  002B20  2A1C               	incf	___awdiv@divisor+1,f,c
  6138  002B22  0E01               	movlw	1
  6139  002B24  6E1E               	movwf	___awdiv@sign,c
  6140  002B26                     l607:
  6141  002B26  AE1A               	btfss	___awdiv@dividend+1,7,c
  6142  002B28  D006               	goto	l608
  6143  002B2A  6C19               	negf	___awdiv@dividend,c
  6144  002B2C  1E1A               	comf	___awdiv@dividend+1,f,c
  6145  002B2E  B0D8               	btfsc	status,0,c
  6146  002B30  2A1A               	incf	___awdiv@dividend+1,f,c
  6147  002B32  0E01               	movlw	1
  6148  002B34  1A1E               	xorwf	___awdiv@sign,f,c
  6149  002B36                     l608:
  6150  002B36  0E00               	movlw	0
  6151  002B38  6E20               	movwf	___awdiv@quotient+1,c
  6152  002B3A  0E00               	movlw	0
  6153  002B3C  6E1F               	movwf	___awdiv@quotient,c
  6154  002B3E  501B               	movf	___awdiv@divisor,w,c
  6155  002B40  101C               	iorwf	___awdiv@divisor+1,w,c
  6156  002B42  B4D8               	btfsc	status,2,c
  6157  002B44  D01C               	goto	l615
  6158  002B46  0E01               	movlw	1
  6159  002B48  6E1D               	movwf	___awdiv@counter,c
  6160  002B4A  D004               	goto	l610
  6161  002B4C  90D8               	bcf	status,0,c
  6162  002B4E  361B               	rlcf	___awdiv@divisor,f,c
  6163  002B50  361C               	rlcf	___awdiv@divisor+1,f,c
  6164  002B52  2A1D               	incf	___awdiv@counter,f,c
  6165  002B54                     l610:
  6166  002B54  AE1C               	btfss	___awdiv@divisor+1,7,c
  6167  002B56  D7FA               	goto	l611
  6168  002B58                     u2430:
  6169  002B58  90D8               	bcf	status,0,c
  6170  002B5A  361F               	rlcf	___awdiv@quotient,f,c
  6171  002B5C  3620               	rlcf	___awdiv@quotient+1,f,c
  6172  002B5E  501B               	movf	___awdiv@divisor,w,c
  6173  002B60  5C19               	subwf	___awdiv@dividend,w,c
  6174  002B62  501C               	movf	___awdiv@divisor+1,w,c
  6175  002B64  581A               	subwfb	___awdiv@dividend+1,w,c
  6176  002B66  A0D8               	btfss	status,0,c
  6177  002B68  D005               	goto	l614
  6178  002B6A  501B               	movf	___awdiv@divisor,w,c
  6179  002B6C  5E19               	subwf	___awdiv@dividend,f,c
  6180  002B6E  501C               	movf	___awdiv@divisor+1,w,c
  6181  002B70  5A1A               	subwfb	___awdiv@dividend+1,f,c
  6182  002B72  801F               	bsf	___awdiv@quotient,0,c
  6183  002B74                     l614:
  6184  002B74  90D8               	bcf	status,0,c
  6185  002B76  321C               	rrcf	___awdiv@divisor+1,f,c
  6186  002B78  321B               	rrcf	___awdiv@divisor,f,c
  6187  002B7A  2E1D               	decfsz	___awdiv@counter,f,c
  6188  002B7C  D7ED               	goto	u2430
  6189  002B7E                     l615:
  6190  002B7E  501E               	movf	___awdiv@sign,w,c
  6191  002B80  B4D8               	btfsc	status,2,c
  6192  002B82  D004               	goto	l616
  6193  002B84  6C1F               	negf	___awdiv@quotient,c
  6194  002B86  1E20               	comf	___awdiv@quotient+1,f,c
  6195  002B88  B0D8               	btfsc	status,0,c
  6196  002B8A  2A20               	incf	___awdiv@quotient+1,f,c
  6197  002B8C                     l616:
  6198  002B8C  C01F  F019         	movff	___awdiv@quotient,?___awdiv
  6199  002B90  C020  F01A         	movff	___awdiv@quotient+1,?___awdiv+1
  6200  002B94  0012               	return	
  6201  002B96                     __end_of___awdiv:
  6202                           	opt stack 0
  6203                           tblptru	equ	0xFF8
  6204                           tblptrh	equ	0xFF7
  6205                           tblptrl	equ	0xFF6
  6206                           tablat	equ	0xFF5
  6207                           prodh	equ	0xFF4
  6208                           prodl	equ	0xFF3
  6209                           intcon	equ	0xFF2
  6210                           intcon2	equ	0xFF1
  6211                           intcon3	equ	0xFF0
  6212                           postinc0	equ	0xFEE
  6213                           wreg	equ	0xFE8
  6214                           indf2	equ	0xFDF
  6215                           postinc2	equ	0xFDE
  6216                           postdec2	equ	0xFDD
  6217                           fsr2h	equ	0xFDA
  6218                           fsr2l	equ	0xFD9
  6219                           status	equ	0xFD8
  6220                           
  6221 ;; *************** function __tdiv_to_l_ *****************
  6222 ;; Defined at:
  6223 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\ftdivl.c"
  6224 ;; Parameters:    Size  Location     Type
  6225 ;;  f1              3   18[COMRAM] float 
  6226 ;;  f2              3   21[COMRAM] float 
  6227 ;; Auto vars:     Size  Location     Type
  6228 ;;  quot            4   27[COMRAM] unsigned long 
  6229 ;;  exp1            1   32[COMRAM] unsigned char 
  6230 ;;  cntr            1   31[COMRAM] unsigned char 
  6231 ;; Return value:  Size  Location     Type
  6232 ;;                  4   18[COMRAM] unsigned long 
  6233 ;; Registers used:
  6234 ;;		wreg, status,2, status,0
  6235 ;; Tracked objects:
  6236 ;;		On entry : 0/0
  6237 ;;		On exit  : 0/0
  6238 ;;		Unchanged: 0/0
  6239 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6240 ;;      Params:         6       0       0       0       0       0       0
  6241 ;;      Locals:         6       0       0       0       0       0       0
  6242 ;;      Temps:          3       0       0       0       0       0       0
  6243 ;;      Totals:        15       0       0       0       0       0       0
  6244 ;;Total ram usage:       15 bytes
  6245 ;; Hardware stack levels used:    1
  6246 ;; Hardware stack levels required when called:    2
  6247 ;; This function calls:
  6248 ;;		Nothing
  6249 ;; This function is called by:
  6250 ;;		_printf
  6251 ;; This function uses a non-reentrant model
  6252 ;;
  6253                           
  6254                           	psect	text20
  6255  002260                     __ptext20:
  6256                           	opt stack 0
  6257  002260                     __tdiv_to_l_:
  6258                           	opt stack 27
  6259                           
  6260                           ;incstack = 0
  6261  002260  C015  F019         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  6262  002264  6A1A               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  6263  002266  6A1B               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  6264  002268  3414               	rlcf	__tdiv_to_l_@f1+1,w,c
  6265  00226A  3619               	rlcf	??__tdiv_to_l_& (0+255),f,c
  6266  00226C  E301               	bnc	u2631
  6267  00226E  801A               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  6268  002270                     u2631:
  6269  002270  5019               	movf	??__tdiv_to_l_,w,c
  6270  002272  6E21               	movwf	__tdiv_to_l_@exp1,c
  6271  002274  5021               	movf	__tdiv_to_l_@exp1,w,c
  6272  002276  A4D8               	btfss	status,2,c
  6273  002278  D009               	goto	l743
  6274  00227A  0E00               	movlw	0
  6275  00227C  6E13               	movwf	?__tdiv_to_l_,c
  6276  00227E  0E00               	movlw	0
  6277  002280  6E14               	movwf	?__tdiv_to_l_+1,c
  6278  002282  0E00               	movlw	0
  6279  002284  6E15               	movwf	?__tdiv_to_l_+2,c
  6280  002286  0E00               	movlw	0
  6281  002288  6E16               	movwf	?__tdiv_to_l_+3,c
  6282  00228A  0012               	return	
  6283  00228C                     l743:
  6284  00228C  C018  F019         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  6285  002290  6A1A               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  6286  002292  6A1B               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  6287  002294  3417               	rlcf	__tdiv_to_l_@f2+1,w,c
  6288  002296  3619               	rlcf	??__tdiv_to_l_& (0+255),f,c
  6289  002298  E301               	bnc	u2651
  6290  00229A  801A               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  6291  00229C                     u2651:
  6292  00229C  5019               	movf	??__tdiv_to_l_,w,c
  6293  00229E  6E20               	movwf	__tdiv_to_l_@cntr,c
  6294  0022A0  5020               	movf	__tdiv_to_l_@cntr,w,c
  6295  0022A2  A4D8               	btfss	status,2,c
  6296  0022A4  D009               	goto	l745
  6297  0022A6  0E00               	movlw	0
  6298  0022A8  6E13               	movwf	?__tdiv_to_l_,c
  6299  0022AA  0E00               	movlw	0
  6300  0022AC  6E14               	movwf	?__tdiv_to_l_+1,c
  6301  0022AE  0E00               	movlw	0
  6302  0022B0  6E15               	movwf	?__tdiv_to_l_+2,c
  6303  0022B2  0E00               	movlw	0
  6304  0022B4  6E16               	movwf	?__tdiv_to_l_+3,c
  6305  0022B6  0012               	return	
  6306  0022B8                     l745:
  6307  0022B8  8E14               	bsf	__tdiv_to_l_@f1+1,7,c
  6308  0022BA  0EFF               	movlw	255
  6309  0022BC  1613               	andwf	__tdiv_to_l_@f1,f,c
  6310  0022BE  0EFF               	movlw	255
  6311  0022C0  1614               	andwf	__tdiv_to_l_@f1+1,f,c
  6312  0022C2  0E00               	movlw	0
  6313  0022C4  1615               	andwf	__tdiv_to_l_@f1+2,f,c
  6314  0022C6  8E17               	bsf	__tdiv_to_l_@f2+1,7,c
  6315  0022C8  0EFF               	movlw	255
  6316  0022CA  1616               	andwf	__tdiv_to_l_@f2,f,c
  6317  0022CC  0EFF               	movlw	255
  6318  0022CE  1617               	andwf	__tdiv_to_l_@f2+1,f,c
  6319  0022D0  0E00               	movlw	0
  6320  0022D2  1618               	andwf	__tdiv_to_l_@f2+2,f,c
  6321  0022D4  0E00               	movlw	0
  6322  0022D6  6E1C               	movwf	__tdiv_to_l_@quot,c
  6323  0022D8  0E00               	movlw	0
  6324  0022DA  6E1D               	movwf	__tdiv_to_l_@quot+1,c
  6325  0022DC  0E00               	movlw	0
  6326  0022DE  6E1E               	movwf	__tdiv_to_l_@quot+2,c
  6327  0022E0  0E00               	movlw	0
  6328  0022E2  6E1F               	movwf	__tdiv_to_l_@quot+3,c
  6329  0022E4  0E7F               	movlw	127
  6330  0022E6  5E21               	subwf	__tdiv_to_l_@exp1,f,c
  6331  0022E8  5020               	movf	__tdiv_to_l_@cntr,w,c
  6332  0022EA  0F98               	addlw	152
  6333  0022EC  5E21               	subwf	__tdiv_to_l_@exp1,f,c
  6334  0022EE  0E18               	movlw	24
  6335  0022F0  6E20               	movwf	__tdiv_to_l_@cntr,c
  6336  0022F2                     l746:
  6337  0022F2  90D8               	bcf	status,0,c
  6338  0022F4  361C               	rlcf	__tdiv_to_l_@quot,f,c
  6339  0022F6  361D               	rlcf	__tdiv_to_l_@quot+1,f,c
  6340  0022F8  361E               	rlcf	__tdiv_to_l_@quot+2,f,c
  6341  0022FA  361F               	rlcf	__tdiv_to_l_@quot+3,f,c
  6342  0022FC  5016               	movf	__tdiv_to_l_@f2,w,c
  6343  0022FE  5C13               	subwf	__tdiv_to_l_@f1,w,c
  6344  002300  5017               	movf	__tdiv_to_l_@f2+1,w,c
  6345  002302  5814               	subwfb	__tdiv_to_l_@f1+1,w,c
  6346  002304  5018               	movf	__tdiv_to_l_@f2+2,w,c
  6347  002306  5815               	subwfb	__tdiv_to_l_@f1+2,w,c
  6348  002308  A0D8               	btfss	status,0,c
  6349  00230A  D007               	goto	l747
  6350  00230C  5016               	movf	__tdiv_to_l_@f2,w,c
  6351  00230E  5E13               	subwf	__tdiv_to_l_@f1,f,c
  6352  002310  5017               	movf	__tdiv_to_l_@f2+1,w,c
  6353  002312  5A14               	subwfb	__tdiv_to_l_@f1+1,f,c
  6354  002314  5018               	movf	__tdiv_to_l_@f2+2,w,c
  6355  002316  5A15               	subwfb	__tdiv_to_l_@f1+2,f,c
  6356  002318  801C               	bsf	__tdiv_to_l_@quot,0,c
  6357  00231A                     l747:
  6358  00231A  90D8               	bcf	status,0,c
  6359  00231C  3613               	rlcf	__tdiv_to_l_@f1,f,c
  6360  00231E  3614               	rlcf	__tdiv_to_l_@f1+1,f,c
  6361  002320  3615               	rlcf	__tdiv_to_l_@f1+2,f,c
  6362  002322  2E20               	decfsz	__tdiv_to_l_@cntr,f,c
  6363  002324  D7E6               	goto	l746
  6364  002326  AE21               	btfss	__tdiv_to_l_@exp1,7,c
  6365  002328  D016               	goto	l749
  6366  00232A  5021               	movf	__tdiv_to_l_@exp1,w,c
  6367  00232C  0A80               	xorlw	128
  6368  00232E  0F97               	addlw	151
  6369  002330  B0D8               	btfsc	status,0,c
  6370  002332  D009               	goto	l750
  6371  002334  0E00               	movlw	0
  6372  002336  6E13               	movwf	?__tdiv_to_l_,c
  6373  002338  0E00               	movlw	0
  6374  00233A  6E14               	movwf	?__tdiv_to_l_+1,c
  6375  00233C  0E00               	movlw	0
  6376  00233E  6E15               	movwf	?__tdiv_to_l_+2,c
  6377  002340  0E00               	movlw	0
  6378  002342  6E16               	movwf	?__tdiv_to_l_+3,c
  6379  002344  0012               	return	
  6380  002346                     l750:
  6381  002346  90D8               	bcf	status,0,c
  6382  002348  321F               	rrcf	__tdiv_to_l_@quot+3,f,c
  6383  00234A  321E               	rrcf	__tdiv_to_l_@quot+2,f,c
  6384  00234C  321D               	rrcf	__tdiv_to_l_@quot+1,f,c
  6385  00234E  321C               	rrcf	__tdiv_to_l_@quot,f,c
  6386  002350  3E21               	incfsz	__tdiv_to_l_@exp1,f,c
  6387  002352  D7F9               	goto	l750
  6388  002354  D015               	goto	u2710
  6389  002356                     l749:
  6390  002356  0E17               	movlw	23
  6391  002358  6421               	cpfsgt	__tdiv_to_l_@exp1,c
  6392  00235A  D00F               	goto	l755
  6393  00235C  0E00               	movlw	0
  6394  00235E  6E13               	movwf	?__tdiv_to_l_,c
  6395  002360  0E00               	movlw	0
  6396  002362  6E14               	movwf	?__tdiv_to_l_+1,c
  6397  002364  0E00               	movlw	0
  6398  002366  6E15               	movwf	?__tdiv_to_l_+2,c
  6399  002368  0E00               	movlw	0
  6400  00236A  6E16               	movwf	?__tdiv_to_l_+3,c
  6401  00236C  0012               	return	
  6402  00236E  90D8               	bcf	status,0,c
  6403  002370  361C               	rlcf	__tdiv_to_l_@quot,f,c
  6404  002372  361D               	rlcf	__tdiv_to_l_@quot+1,f,c
  6405  002374  361E               	rlcf	__tdiv_to_l_@quot+2,f,c
  6406  002376  361F               	rlcf	__tdiv_to_l_@quot+3,f,c
  6407  002378  0621               	decf	__tdiv_to_l_@exp1,f,c
  6408  00237A                     l755:
  6409  00237A  5021               	movf	__tdiv_to_l_@exp1,w,c
  6410  00237C  A4D8               	btfss	status,2,c
  6411  00237E  D7F7               	goto	l756
  6412  002380                     u2710:
  6413  002380  C01C  F013         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  6414  002384  C01D  F014         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  6415  002388  C01E  F015         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  6416  00238C  C01F  F016         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  6417  002390  0012               	return		;funcret
  6418  002392                     __end_of__tdiv_to_l_:
  6419                           	opt stack 0
  6420                           tblptru	equ	0xFF8
  6421                           tblptrh	equ	0xFF7
  6422                           tblptrl	equ	0xFF6
  6423                           tablat	equ	0xFF5
  6424                           prodh	equ	0xFF4
  6425                           prodl	equ	0xFF3
  6426                           intcon	equ	0xFF2
  6427                           intcon2	equ	0xFF1
  6428                           intcon3	equ	0xFF0
  6429                           postinc0	equ	0xFEE
  6430                           wreg	equ	0xFE8
  6431                           indf2	equ	0xFDF
  6432                           postinc2	equ	0xFDE
  6433                           postdec2	equ	0xFDD
  6434                           fsr2h	equ	0xFDA
  6435                           fsr2l	equ	0xFD9
  6436                           status	equ	0xFD8
  6437                           
  6438 ;; *************** function __div_to_l_ *****************
  6439 ;; Defined at:
  6440 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\fldivl.c"
  6441 ;; Parameters:    Size  Location     Type
  6442 ;;  f1              3   18[COMRAM] unsigned long 
  6443 ;;  f2              3   21[COMRAM] unsigned long 
  6444 ;; Auto vars:     Size  Location     Type
  6445 ;;  quot            4   24[COMRAM] unsigned long 
  6446 ;;  exp1            1   29[COMRAM] unsigned char 
  6447 ;;  cntr            1   28[COMRAM] unsigned char 
  6448 ;; Return value:  Size  Location     Type
  6449 ;;                  4   18[COMRAM] unsigned long 
  6450 ;; Registers used:
  6451 ;;		wreg, status,2, status,0
  6452 ;; Tracked objects:
  6453 ;;		On entry : 0/0
  6454 ;;		On exit  : 0/0
  6455 ;;		Unchanged: 0/0
  6456 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6457 ;;      Params:         6       0       0       0       0       0       0
  6458 ;;      Locals:         6       0       0       0       0       0       0
  6459 ;;      Temps:          0       0       0       0       0       0       0
  6460 ;;      Totals:        12       0       0       0       0       0       0
  6461 ;;Total ram usage:       12 bytes
  6462 ;; Hardware stack levels used:    1
  6463 ;; Hardware stack levels required when called:    2
  6464 ;; This function calls:
  6465 ;;		Nothing
  6466 ;; This function is called by:
  6467 ;;		_printf
  6468 ;; This function uses a non-reentrant model
  6469 ;;
  6470                           
  6471                           	psect	text21
  6472  002392                     __ptext21:
  6473                           	opt stack 0
  6474  002392                     __div_to_l_:
  6475                           	opt stack 27
  6476                           
  6477                           ;incstack = 0
  6478  002392  3415               	rlcf	__div_to_l_@f1+2,w,c
  6479  002394  3416               	rlcf	__div_to_l_@f1+3,w,c
  6480  002396  6E1E               	movwf	__div_to_l_@exp1,c
  6481  002398  501E               	movf	__div_to_l_@exp1,w,c
  6482  00239A  A4D8               	btfss	status,2,c
  6483  00239C  D009               	goto	l639
  6484  00239E  0E00               	movlw	0
  6485  0023A0  6E13               	movwf	?__div_to_l_,c
  6486  0023A2  0E00               	movlw	0
  6487  0023A4  6E14               	movwf	?__div_to_l_+1,c
  6488  0023A6  0E00               	movlw	0
  6489  0023A8  6E15               	movwf	?__div_to_l_+2,c
  6490  0023AA  0E00               	movlw	0
  6491  0023AC  6E16               	movwf	?__div_to_l_+3,c
  6492  0023AE  0012               	return	
  6493  0023B0                     l639:
  6494  0023B0  3418               	rlcf	__div_to_l_@f2+2,w,c
  6495  0023B2  3419               	rlcf	__div_to_l_@f2+3,w,c
  6496  0023B4  6E1D               	movwf	__div_to_l_@cntr,c
  6497  0023B6  501D               	movf	__div_to_l_@cntr,w,c
  6498  0023B8  A4D8               	btfss	status,2,c
  6499  0023BA  D009               	goto	l641
  6500  0023BC  0E00               	movlw	0
  6501  0023BE  6E13               	movwf	?__div_to_l_,c
  6502  0023C0  0E00               	movlw	0
  6503  0023C2  6E14               	movwf	?__div_to_l_+1,c
  6504  0023C4  0E00               	movlw	0
  6505  0023C6  6E15               	movwf	?__div_to_l_+2,c
  6506  0023C8  0E00               	movlw	0
  6507  0023CA  6E16               	movwf	?__div_to_l_+3,c
  6508  0023CC  0012               	return	
  6509  0023CE                     l641:
  6510  0023CE  8E15               	bsf	__div_to_l_@f1+2,7,c
  6511  0023D0  0EFF               	movlw	255
  6512  0023D2  1613               	andwf	__div_to_l_@f1,f,c
  6513  0023D4  0EFF               	movlw	255
  6514  0023D6  1614               	andwf	__div_to_l_@f1+1,f,c
  6515  0023D8  0EFF               	movlw	255
  6516  0023DA  1615               	andwf	__div_to_l_@f1+2,f,c
  6517  0023DC  0E00               	movlw	0
  6518  0023DE  1616               	andwf	__div_to_l_@f1+3,f,c
  6519  0023E0  8E18               	bsf	__div_to_l_@f2+2,7,c
  6520  0023E2  0EFF               	movlw	255
  6521  0023E4  1616               	andwf	__div_to_l_@f2,f,c
  6522  0023E6  0EFF               	movlw	255
  6523  0023E8  1617               	andwf	__div_to_l_@f2+1,f,c
  6524  0023EA  0EFF               	movlw	255
  6525  0023EC  1618               	andwf	__div_to_l_@f2+2,f,c
  6526  0023EE  0E00               	movlw	0
  6527  0023F0  1619               	andwf	__div_to_l_@f2+3,f,c
  6528  0023F2  0E00               	movlw	0
  6529  0023F4  6E19               	movwf	__div_to_l_@quot,c
  6530  0023F6  0E00               	movlw	0
  6531  0023F8  6E1A               	movwf	__div_to_l_@quot+1,c
  6532  0023FA  0E00               	movlw	0
  6533  0023FC  6E1B               	movwf	__div_to_l_@quot+2,c
  6534  0023FE  0E00               	movlw	0
  6535  002400  6E1C               	movwf	__div_to_l_@quot+3,c
  6536  002402  0E7F               	movlw	127
  6537  002404  5E1E               	subwf	__div_to_l_@exp1,f,c
  6538  002406  501D               	movf	__div_to_l_@cntr,w,c
  6539  002408  0FA0               	addlw	160
  6540  00240A  5E1E               	subwf	__div_to_l_@exp1,f,c
  6541  00240C  0E20               	movlw	32
  6542  00240E  6E1D               	movwf	__div_to_l_@cntr,c
  6543  002410  90D8               	bcf	status,0,c
  6544  002412  3619               	rlcf	__div_to_l_@quot,f,c
  6545  002414  361A               	rlcf	__div_to_l_@quot+1,f,c
  6546  002416  361B               	rlcf	__div_to_l_@quot+2,f,c
  6547  002418  361C               	rlcf	__div_to_l_@quot+3,f,c
  6548  00241A  5016               	movf	__div_to_l_@f2,w,c
  6549  00241C  5C13               	subwf	__div_to_l_@f1,w,c
  6550  00241E  5017               	movf	__div_to_l_@f2+1,w,c
  6551  002420  5814               	subwfb	__div_to_l_@f1+1,w,c
  6552  002422  5018               	movf	__div_to_l_@f2+2,w,c
  6553  002424  5815               	subwfb	__div_to_l_@f1+2,w,c
  6554  002426  5019               	movf	__div_to_l_@f2+3,w,c
  6555  002428  5816               	subwfb	__div_to_l_@f1+3,w,c
  6556  00242A  A0D8               	btfss	status,0,c
  6557  00242C  D009               	goto	l643
  6558  00242E  5016               	movf	__div_to_l_@f2,w,c
  6559  002430  5E13               	subwf	__div_to_l_@f1,f,c
  6560  002432  5017               	movf	__div_to_l_@f2+1,w,c
  6561  002434  5A14               	subwfb	__div_to_l_@f1+1,f,c
  6562  002436  5018               	movf	__div_to_l_@f2+2,w,c
  6563  002438  5A15               	subwfb	__div_to_l_@f1+2,f,c
  6564  00243A  5019               	movf	__div_to_l_@f2+3,w,c
  6565  00243C  5A16               	subwfb	__div_to_l_@f1+3,f,c
  6566  00243E  8019               	bsf	__div_to_l_@quot,0,c
  6567  002440                     l643:
  6568  002440  90D8               	bcf	status,0,c
  6569  002442  3613               	rlcf	__div_to_l_@f1,f,c
  6570  002444  3614               	rlcf	__div_to_l_@f1+1,f,c
  6571  002446  3615               	rlcf	__div_to_l_@f1+2,f,c
  6572  002448  3616               	rlcf	__div_to_l_@f1+3,f,c
  6573  00244A  2E1D               	decfsz	__div_to_l_@cntr,f,c
  6574  00244C  D7E1               	goto	l642
  6575  00244E  AE1E               	btfss	__div_to_l_@exp1,7,c
  6576  002450  D016               	goto	l645
  6577  002452  501E               	movf	__div_to_l_@exp1,w,c
  6578  002454  0A80               	xorlw	128
  6579  002456  0F9F               	addlw	159
  6580  002458  B0D8               	btfsc	status,0,c
  6581  00245A  D009               	goto	l646
  6582  00245C  0E00               	movlw	0
  6583  00245E  6E13               	movwf	?__div_to_l_,c
  6584  002460  0E00               	movlw	0
  6585  002462  6E14               	movwf	?__div_to_l_+1,c
  6586  002464  0E00               	movlw	0
  6587  002466  6E15               	movwf	?__div_to_l_+2,c
  6588  002468  0E00               	movlw	0
  6589  00246A  6E16               	movwf	?__div_to_l_+3,c
  6590  00246C  0012               	return	
  6591  00246E                     l646:
  6592  00246E  90D8               	bcf	status,0,c
  6593  002470  321C               	rrcf	__div_to_l_@quot+3,f,c
  6594  002472  321B               	rrcf	__div_to_l_@quot+2,f,c
  6595  002474  321A               	rrcf	__div_to_l_@quot+1,f,c
  6596  002476  3219               	rrcf	__div_to_l_@quot,f,c
  6597  002478  3E1E               	incfsz	__div_to_l_@exp1,f,c
  6598  00247A  D7F9               	goto	l646
  6599  00247C  D015               	goto	u2780
  6600  00247E                     l645:
  6601  00247E  0E1F               	movlw	31
  6602  002480  641E               	cpfsgt	__div_to_l_@exp1,c
  6603  002482  D00F               	goto	l651
  6604  002484  0E00               	movlw	0
  6605  002486  6E13               	movwf	?__div_to_l_,c
  6606  002488  0E00               	movlw	0
  6607  00248A  6E14               	movwf	?__div_to_l_+1,c
  6608  00248C  0E00               	movlw	0
  6609  00248E  6E15               	movwf	?__div_to_l_+2,c
  6610  002490  0E00               	movlw	0
  6611  002492  6E16               	movwf	?__div_to_l_+3,c
  6612  002494  0012               	return	
  6613  002496  90D8               	bcf	status,0,c
  6614  002498  3619               	rlcf	__div_to_l_@quot,f,c
  6615  00249A  361A               	rlcf	__div_to_l_@quot+1,f,c
  6616  00249C  361B               	rlcf	__div_to_l_@quot+2,f,c
  6617  00249E  361C               	rlcf	__div_to_l_@quot+3,f,c
  6618  0024A0  061E               	decf	__div_to_l_@exp1,f,c
  6619  0024A2                     l651:
  6620  0024A2  501E               	movf	__div_to_l_@exp1,w,c
  6621  0024A4  A4D8               	btfss	status,2,c
  6622  0024A6  D7F7               	goto	l652
  6623  0024A8                     u2780:
  6624  0024A8  C019  F013         	movff	__div_to_l_@quot,?__div_to_l_
  6625  0024AC  C01A  F014         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  6626  0024B0  C01B  F015         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  6627  0024B4  C01C  F016         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  6628  0024B8  0012               	return		;funcret
  6629  0024BA                     __end_of__div_to_l_:
  6630                           	opt stack 0
  6631                           tblptru	equ	0xFF8
  6632                           tblptrh	equ	0xFF7
  6633                           tblptrl	equ	0xFF6
  6634                           tablat	equ	0xFF5
  6635                           prodh	equ	0xFF4
  6636                           prodl	equ	0xFF3
  6637                           intcon	equ	0xFF2
  6638                           intcon2	equ	0xFF1
  6639                           intcon3	equ	0xFF0
  6640                           postinc0	equ	0xFEE
  6641                           wreg	equ	0xFE8
  6642                           indf2	equ	0xFDF
  6643                           postinc2	equ	0xFDE
  6644                           postdec2	equ	0xFDD
  6645                           fsr2h	equ	0xFDA
  6646                           fsr2l	equ	0xFD9
  6647                           status	equ	0xFD8
  6648                           
  6649 ;; *************** function ___lltoft *****************
  6650 ;; Defined at:
  6651 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\lltoft.c"
  6652 ;; Parameters:    Size  Location     Type
  6653 ;;  c               4   26[COMRAM] unsigned long 
  6654 ;; Auto vars:     Size  Location     Type
  6655 ;;  exp             1   34[COMRAM] unsigned char 
  6656 ;; Return value:  Size  Location     Type
  6657 ;;                  3   26[COMRAM] float 
  6658 ;; Registers used:
  6659 ;;		wreg, status,2, status,0, cstack
  6660 ;; Tracked objects:
  6661 ;;		On entry : 0/0
  6662 ;;		On exit  : 0/0
  6663 ;;		Unchanged: 0/0
  6664 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6665 ;;      Params:         4       0       0       0       0       0       0
  6666 ;;      Locals:         1       0       0       0       0       0       0
  6667 ;;      Temps:          4       0       0       0       0       0       0
  6668 ;;      Totals:         9       0       0       0       0       0       0
  6669 ;;Total ram usage:        9 bytes
  6670 ;; Hardware stack levels used:    1
  6671 ;; Hardware stack levels required when called:    3
  6672 ;; This function calls:
  6673 ;;		___ftpack
  6674 ;; This function is called by:
  6675 ;;		_printf
  6676 ;; This function uses a non-reentrant model
  6677 ;;
  6678                           
  6679                           	psect	text22
  6680  002DB8                     __ptext22:
  6681                           	opt stack 0
  6682  002DB8                     ___lltoft:
  6683                           	opt stack 26
  6684                           
  6685                           ;incstack = 0
  6686  002DB8  0E8E               	movlw	142
  6687  002DBA  6E23               	movwf	___lltoft@exp,c
  6688  002DBC  D006               	goto	l850
  6689  002DBE  90D8               	bcf	status,0,c
  6690  002DC0  321E               	rrcf	___lltoft@c+3,f,c
  6691  002DC2  321D               	rrcf	___lltoft@c+2,f,c
  6692  002DC4  321C               	rrcf	___lltoft@c+1,f,c
  6693  002DC6  321B               	rrcf	___lltoft@c,f,c
  6694  002DC8  2A23               	incf	___lltoft@exp,f,c
  6695  002DCA                     l850:
  6696  002DCA  0E00               	movlw	0
  6697  002DCC  141B               	andwf	___lltoft@c,w,c
  6698  002DCE  6E1F               	movwf	??___lltoft& (0+255),c
  6699  002DD0  0E00               	movlw	0
  6700  002DD2  141C               	andwf	___lltoft@c+1,w,c
  6701  002DD4  6E20               	movwf	(??___lltoft+1)& (0+255),c
  6702  002DD6  0E00               	movlw	0
  6703  002DD8  141D               	andwf	___lltoft@c+2,w,c
  6704  002DDA  6E21               	movwf	(??___lltoft+2)& (0+255),c
  6705  002DDC  0EFF               	movlw	255
  6706  002DDE  141E               	andwf	___lltoft@c+3,w,c
  6707  002DE0  6E22               	movwf	(??___lltoft+3)& (0+255),c
  6708  002DE2  501F               	movf	??___lltoft,w,c
  6709  002DE4  1020               	iorwf	??___lltoft+1,w,c
  6710  002DE6  1021               	iorwf	??___lltoft+2,w,c
  6711  002DE8  1022               	iorwf	??___lltoft+3,w,c
  6712  002DEA  A4D8               	btfss	status,2,c
  6713  002DEC  D7E8               	goto	l851
  6714  002DEE  C01B  F013         	movff	___lltoft@c,___ftpack@arg
  6715  002DF2  C01C  F014         	movff	___lltoft@c+1,___ftpack@arg+1
  6716  002DF6  C01D  F015         	movff	___lltoft@c+2,___ftpack@arg+2
  6717  002DFA  C023  F016         	movff	___lltoft@exp,___ftpack@exp
  6718  002DFE  0E00               	movlw	0
  6719  002E00  6E17               	movwf	___ftpack@sign,c
  6720  002E02  ECEA  F014         	call	___ftpack	;wreg free
  6721  002E06  C013  F01B         	movff	?___ftpack,?___lltoft
  6722  002E0A  C014  F01C         	movff	?___ftpack+1,?___lltoft+1
  6723  002E0E  C015  F01D         	movff	?___ftpack+2,?___lltoft+2
  6724  002E12  0012               	return	
  6725  002E14                     __end_of___lltoft:
  6726                           	opt stack 0
  6727                           tblptru	equ	0xFF8
  6728                           tblptrh	equ	0xFF7
  6729                           tblptrl	equ	0xFF6
  6730                           tablat	equ	0xFF5
  6731                           prodh	equ	0xFF4
  6732                           prodl	equ	0xFF3
  6733                           intcon	equ	0xFF2
  6734                           intcon2	equ	0xFF1
  6735                           intcon3	equ	0xFF0
  6736                           postinc0	equ	0xFEE
  6737                           wreg	equ	0xFE8
  6738                           indf2	equ	0xFDF
  6739                           postinc2	equ	0xFDE
  6740                           postdec2	equ	0xFDD
  6741                           fsr2h	equ	0xFDA
  6742                           fsr2l	equ	0xFD9
  6743                           status	equ	0xFD8
  6744                           
  6745 ;; *************** function ___llmod *****************
  6746 ;; Defined at:
  6747 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\llmod.c"
  6748 ;; Parameters:    Size  Location     Type
  6749 ;;  dividend        4   31[COMRAM] unsigned long 
  6750 ;;  divisor         4   35[COMRAM] unsigned long 
  6751 ;; Auto vars:     Size  Location     Type
  6752 ;;  counter         1   39[COMRAM] unsigned char 
  6753 ;; Return value:  Size  Location     Type
  6754 ;;                  4   31[COMRAM] unsigned long 
  6755 ;; Registers used:
  6756 ;;		wreg, status,2, status,0
  6757 ;; Tracked objects:
  6758 ;;		On entry : 0/0
  6759 ;;		On exit  : 0/0
  6760 ;;		Unchanged: 0/0
  6761 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6762 ;;      Params:         8       0       0       0       0       0       0
  6763 ;;      Locals:         1       0       0       0       0       0       0
  6764 ;;      Temps:          0       0       0       0       0       0       0
  6765 ;;      Totals:         9       0       0       0       0       0       0
  6766 ;;Total ram usage:        9 bytes
  6767 ;; Hardware stack levels used:    1
  6768 ;; Hardware stack levels required when called:    2
  6769 ;; This function calls:
  6770 ;;		Nothing
  6771 ;; This function is called by:
  6772 ;;		_printf
  6773 ;; This function uses a non-reentrant model
  6774 ;;
  6775                           
  6776                           	psect	text23
  6777  002CF2                     __ptext23:
  6778                           	opt stack 0
  6779  002CF2                     ___llmod:
  6780                           	opt stack 27
  6781                           
  6782                           ;incstack = 0
  6783  002CF2  5024               	movf	___llmod@divisor,w,c
  6784  002CF4  1025               	iorwf	___llmod@divisor+1,w,c
  6785  002CF6  1026               	iorwf	___llmod@divisor+2,w,c
  6786  002CF8  1027               	iorwf	___llmod@divisor+3,w,c
  6787  002CFA  B4D8               	btfsc	status,2,c
  6788  002CFC  D024               	goto	l844
  6789  002CFE  0E01               	movlw	1
  6790  002D00  6E28               	movwf	___llmod@counter,c
  6791  002D02  D006               	goto	l839
  6792  002D04  90D8               	bcf	status,0,c
  6793  002D06  3624               	rlcf	___llmod@divisor,f,c
  6794  002D08  3625               	rlcf	___llmod@divisor+1,f,c
  6795  002D0A  3626               	rlcf	___llmod@divisor+2,f,c
  6796  002D0C  3627               	rlcf	___llmod@divisor+3,f,c
  6797  002D0E  2A28               	incf	___llmod@counter,f,c
  6798  002D10                     l839:
  6799  002D10  AE27               	btfss	___llmod@divisor+3,7,c
  6800  002D12  D7F8               	goto	l840
  6801  002D14                     u2960:
  6802  002D14  5024               	movf	___llmod@divisor,w,c
  6803  002D16  5C20               	subwf	___llmod@dividend,w,c
  6804  002D18  5025               	movf	___llmod@divisor+1,w,c
  6805  002D1A  5821               	subwfb	___llmod@dividend+1,w,c
  6806  002D1C  5026               	movf	___llmod@divisor+2,w,c
  6807  002D1E  5822               	subwfb	___llmod@dividend+2,w,c
  6808  002D20  5027               	movf	___llmod@divisor+3,w,c
  6809  002D22  5823               	subwfb	___llmod@dividend+3,w,c
  6810  002D24  A0D8               	btfss	status,0,c
  6811  002D26  D008               	goto	l843
  6812  002D28  5024               	movf	___llmod@divisor,w,c
  6813  002D2A  5E20               	subwf	___llmod@dividend,f,c
  6814  002D2C  5025               	movf	___llmod@divisor+1,w,c
  6815  002D2E  5A21               	subwfb	___llmod@dividend+1,f,c
  6816  002D30  5026               	movf	___llmod@divisor+2,w,c
  6817  002D32  5A22               	subwfb	___llmod@dividend+2,f,c
  6818  002D34  5027               	movf	___llmod@divisor+3,w,c
  6819  002D36  5A23               	subwfb	___llmod@dividend+3,f,c
  6820  002D38                     l843:
  6821  002D38  90D8               	bcf	status,0,c
  6822  002D3A  3227               	rrcf	___llmod@divisor+3,f,c
  6823  002D3C  3226               	rrcf	___llmod@divisor+2,f,c
  6824  002D3E  3225               	rrcf	___llmod@divisor+1,f,c
  6825  002D40  3224               	rrcf	___llmod@divisor,f,c
  6826  002D42  2E28               	decfsz	___llmod@counter,f,c
  6827  002D44  D7E7               	goto	u2960
  6828  002D46                     l844:
  6829  002D46  C020  F020         	movff	___llmod@dividend,?___llmod
  6830  002D4A  C021  F021         	movff	___llmod@dividend+1,?___llmod+1
  6831  002D4E  C022  F022         	movff	___llmod@dividend+2,?___llmod+2
  6832  002D52  C023  F023         	movff	___llmod@dividend+3,?___llmod+3
  6833  002D56  0012               	return		;funcret
  6834  002D58                     __end_of___llmod:
  6835                           	opt stack 0
  6836                           tblptru	equ	0xFF8
  6837                           tblptrh	equ	0xFF7
  6838                           tblptrl	equ	0xFF6
  6839                           tablat	equ	0xFF5
  6840                           prodh	equ	0xFF4
  6841                           prodl	equ	0xFF3
  6842                           intcon	equ	0xFF2
  6843                           intcon2	equ	0xFF1
  6844                           intcon3	equ	0xFF0
  6845                           postinc0	equ	0xFEE
  6846                           wreg	equ	0xFE8
  6847                           indf2	equ	0xFDF
  6848                           postinc2	equ	0xFDE
  6849                           postdec2	equ	0xFDD
  6850                           fsr2h	equ	0xFDA
  6851                           fsr2l	equ	0xFD9
  6852                           status	equ	0xFD8
  6853                           
  6854 ;; *************** function ___lldiv *****************
  6855 ;; Defined at:
  6856 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\lldiv.c"
  6857 ;; Parameters:    Size  Location     Type
  6858 ;;  dividend        4   18[COMRAM] unsigned long 
  6859 ;;  divisor         4   22[COMRAM] unsigned long 
  6860 ;; Auto vars:     Size  Location     Type
  6861 ;;  quotient        4   26[COMRAM] unsigned long 
  6862 ;;  counter         1   30[COMRAM] unsigned char 
  6863 ;; Return value:  Size  Location     Type
  6864 ;;                  4   18[COMRAM] unsigned long 
  6865 ;; Registers used:
  6866 ;;		wreg, status,2, status,0
  6867 ;; Tracked objects:
  6868 ;;		On entry : 0/0
  6869 ;;		On exit  : 0/0
  6870 ;;		Unchanged: 0/0
  6871 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6872 ;;      Params:         8       0       0       0       0       0       0
  6873 ;;      Locals:         5       0       0       0       0       0       0
  6874 ;;      Temps:          0       0       0       0       0       0       0
  6875 ;;      Totals:        13       0       0       0       0       0       0
  6876 ;;Total ram usage:       13 bytes
  6877 ;; Hardware stack levels used:    1
  6878 ;; Hardware stack levels required when called:    2
  6879 ;; This function calls:
  6880 ;;		Nothing
  6881 ;; This function is called by:
  6882 ;;		_printf
  6883 ;; This function uses a non-reentrant model
  6884 ;;
  6885                           
  6886                           	psect	text24
  6887  002B96                     __ptext24:
  6888                           	opt stack 0
  6889  002B96                     ___lldiv:
  6890                           	opt stack 27
  6891                           
  6892                           ;incstack = 0
  6893  002B96  0E00               	movlw	0
  6894  002B98  6E1B               	movwf	___lldiv@quotient,c
  6895  002B9A  0E00               	movlw	0
  6896  002B9C  6E1C               	movwf	___lldiv@quotient+1,c
  6897  002B9E  0E00               	movlw	0
  6898  002BA0  6E1D               	movwf	___lldiv@quotient+2,c
  6899  002BA2  0E00               	movlw	0
  6900  002BA4  6E1E               	movwf	___lldiv@quotient+3,c
  6901  002BA6  5017               	movf	___lldiv@divisor,w,c
  6902  002BA8  1018               	iorwf	___lldiv@divisor+1,w,c
  6903  002BAA  1019               	iorwf	___lldiv@divisor+2,w,c
  6904  002BAC  101A               	iorwf	___lldiv@divisor+3,w,c
  6905  002BAE  B4D8               	btfsc	status,2,c
  6906  002BB0  D02A               	goto	l834
  6907  002BB2  0E01               	movlw	1
  6908  002BB4  6E1F               	movwf	___lldiv@counter,c
  6909  002BB6  D006               	goto	l829
  6910  002BB8  90D8               	bcf	status,0,c
  6911  002BBA  3617               	rlcf	___lldiv@divisor,f,c
  6912  002BBC  3618               	rlcf	___lldiv@divisor+1,f,c
  6913  002BBE  3619               	rlcf	___lldiv@divisor+2,f,c
  6914  002BC0  361A               	rlcf	___lldiv@divisor+3,f,c
  6915  002BC2  2A1F               	incf	___lldiv@counter,f,c
  6916  002BC4                     l829:
  6917  002BC4  AE1A               	btfss	___lldiv@divisor+3,7,c
  6918  002BC6  D7F8               	goto	l830
  6919  002BC8                     u2930:
  6920  002BC8  90D8               	bcf	status,0,c
  6921  002BCA  361B               	rlcf	___lldiv@quotient,f,c
  6922  002BCC  361C               	rlcf	___lldiv@quotient+1,f,c
  6923  002BCE  361D               	rlcf	___lldiv@quotient+2,f,c
  6924  002BD0  361E               	rlcf	___lldiv@quotient+3,f,c
  6925  002BD2  5017               	movf	___lldiv@divisor,w,c
  6926  002BD4  5C13               	subwf	___lldiv@dividend,w,c
  6927  002BD6  5018               	movf	___lldiv@divisor+1,w,c
  6928  002BD8  5814               	subwfb	___lldiv@dividend+1,w,c
  6929  002BDA  5019               	movf	___lldiv@divisor+2,w,c
  6930  002BDC  5815               	subwfb	___lldiv@dividend+2,w,c
  6931  002BDE  501A               	movf	___lldiv@divisor+3,w,c
  6932  002BE0  5816               	subwfb	___lldiv@dividend+3,w,c
  6933  002BE2  A0D8               	btfss	status,0,c
  6934  002BE4  D009               	goto	l833
  6935  002BE6  5017               	movf	___lldiv@divisor,w,c
  6936  002BE8  5E13               	subwf	___lldiv@dividend,f,c
  6937  002BEA  5018               	movf	___lldiv@divisor+1,w,c
  6938  002BEC  5A14               	subwfb	___lldiv@dividend+1,f,c
  6939  002BEE  5019               	movf	___lldiv@divisor+2,w,c
  6940  002BF0  5A15               	subwfb	___lldiv@dividend+2,f,c
  6941  002BF2  501A               	movf	___lldiv@divisor+3,w,c
  6942  002BF4  5A16               	subwfb	___lldiv@dividend+3,f,c
  6943  002BF6  801B               	bsf	___lldiv@quotient,0,c
  6944  002BF8                     l833:
  6945  002BF8  90D8               	bcf	status,0,c
  6946  002BFA  321A               	rrcf	___lldiv@divisor+3,f,c
  6947  002BFC  3219               	rrcf	___lldiv@divisor+2,f,c
  6948  002BFE  3218               	rrcf	___lldiv@divisor+1,f,c
  6949  002C00  3217               	rrcf	___lldiv@divisor,f,c
  6950  002C02  2E1F               	decfsz	___lldiv@counter,f,c
  6951  002C04  D7E1               	goto	u2930
  6952  002C06                     l834:
  6953  002C06  C01B  F013         	movff	___lldiv@quotient,?___lldiv
  6954  002C0A  C01C  F014         	movff	___lldiv@quotient+1,?___lldiv+1
  6955  002C0E  C01D  F015         	movff	___lldiv@quotient+2,?___lldiv+2
  6956  002C12  C01E  F016         	movff	___lldiv@quotient+3,?___lldiv+3
  6957  002C16  0012               	return		;funcret
  6958  002C18                     __end_of___lldiv:
  6959                           	opt stack 0
  6960                           tblptru	equ	0xFF8
  6961                           tblptrh	equ	0xFF7
  6962                           tblptrl	equ	0xFF6
  6963                           tablat	equ	0xFF5
  6964                           prodh	equ	0xFF4
  6965                           prodl	equ	0xFF3
  6966                           intcon	equ	0xFF2
  6967                           intcon2	equ	0xFF1
  6968                           intcon3	equ	0xFF0
  6969                           postinc0	equ	0xFEE
  6970                           wreg	equ	0xFE8
  6971                           indf2	equ	0xFDF
  6972                           postinc2	equ	0xFDE
  6973                           postdec2	equ	0xFDD
  6974                           fsr2h	equ	0xFDA
  6975                           fsr2l	equ	0xFD9
  6976                           status	equ	0xFD8
  6977                           
  6978 ;; *************** function ___fttol *****************
  6979 ;; Defined at:
  6980 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\fttol.c"
  6981 ;; Parameters:    Size  Location     Type
  6982 ;;  f1              3   31[BANK0 ] float 
  6983 ;; Auto vars:     Size  Location     Type
  6984 ;;  lval            4   41[BANK0 ] unsigned long 
  6985 ;;  exp1            1   45[BANK0 ] unsigned char 
  6986 ;;  sign1           1   40[BANK0 ] unsigned char 
  6987 ;; Return value:  Size  Location     Type
  6988 ;;                  4   31[BANK0 ] long 
  6989 ;; Registers used:
  6990 ;;		wreg, status,2, status,0
  6991 ;; Tracked objects:
  6992 ;;		On entry : 0/0
  6993 ;;		On exit  : 0/0
  6994 ;;		Unchanged: 0/0
  6995 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6996 ;;      Params:         0       4       0       0       0       0       0
  6997 ;;      Locals:         0       6       0       0       0       0       0
  6998 ;;      Temps:          0       5       0       0       0       0       0
  6999 ;;      Totals:         0      15       0       0       0       0       0
  7000 ;;Total ram usage:       15 bytes
  7001 ;; Hardware stack levels used:    1
  7002 ;; Hardware stack levels required when called:    2
  7003 ;; This function calls:
  7004 ;;		Nothing
  7005 ;; This function is called by:
  7006 ;;		_temperatureMeasurementC
  7007 ;;		_temperatureMeasurementF
  7008 ;;		_printf
  7009 ;; This function uses a non-reentrant model
  7010 ;;
  7011                           
  7012                           	psect	text25
  7013  00211C                     __ptext25:
  7014                           	opt stack 0
  7015  00211C                     ___fttol:
  7016                           	opt stack 27
  7017                           
  7018                           ;incstack = 0
  7019  00211C  C081  F083         	movff	___fttol@f1+2,??___fttol
  7020  002120  0100               	movlb	0	; () banked
  7021  002122  6B84               	clrf	(??___fttol+1)& (0+255),b
  7022  002124  6B85               	clrf	(??___fttol+2)& (0+255),b
  7023  002126  0100               	movlb	0	; () banked
  7024  002128  3580               	rlcf	(___fttol@f1+1)& (0+255),w,b
  7025  00212A  0100               	movlb	0	; () banked
  7026  00212C  3783               	rlcf	??___fttol& (0+255),f,b
  7027  00212E  E301               	bnc	u2841
  7028  002130  8184               	bsf	(??___fttol+1)& (0+255),0,b
  7029  002132                     u2841:
  7030  002132  0100               	movlb	0	; () banked
  7031  002134  5183               	movf	??___fttol& (0+255),w,b
  7032  002136  0100               	movlb	0	; () banked
  7033  002138  6F8D               	movwf	___fttol@exp1& (0+255),b
  7034  00213A  0100               	movlb	0	; () banked
  7035  00213C  518D               	movf	___fttol@exp1& (0+255),w,b
  7036  00213E  A4D8               	btfss	status,2,c
  7037  002140  D00A               	goto	l788
  7038                           
  7039                           ; BSR set to: 0
  7040  002142  0E00               	movlw	0
  7041  002144  0100               	movlb	0	; () banked
  7042  002146  6F7F               	movwf	?___fttol& (0+255),b
  7043  002148  0E00               	movlw	0
  7044  00214A  6F80               	movwf	(?___fttol+1)& (0+255),b
  7045  00214C  0E00               	movlw	0
  7046  00214E  6F81               	movwf	(?___fttol+2)& (0+255),b
  7047  002150  0E00               	movlw	0
  7048  002152  6F82               	movwf	(?___fttol+3)& (0+255),b
  7049                           
  7050                           ; BSR set to: 0
  7051  002154  0012               	return	
  7052  002156                     l788:
  7053                           
  7054                           ; BSR set to: 0
  7055                           
  7056                           ; BSR set to: 0
  7057  002156  0E17               	movlw	23
  7058  002158  0100               	movlb	0	; () banked
  7059  00215A  6F83               	movwf	??___fttol& (0+255),b
  7060  00215C  C07F  F084         	movff	___fttol@f1,??___fttol+1
  7061  002160  C080  F085         	movff	___fttol@f1+1,??___fttol+2
  7062  002164  C081  F086         	movff	___fttol@f1+2,??___fttol+3
  7063  002168  0100               	movlb	0	; () banked
  7064  00216A  2983               	incf	??___fttol& (0+255),w,b
  7065  00216C  0100               	movlb	0	; () banked
  7066  00216E  6F87               	movwf	(??___fttol+4)& (0+255),b
  7067  002170  D005               	goto	u2860
  7068  002172                     u2865:
  7069  002172  0100               	movlb	0	; () banked
  7070  002174  90D8               	bcf	status,0,c
  7071  002176  3386               	rrcf	(??___fttol+3)& (0+255),f,b
  7072  002178  3385               	rrcf	(??___fttol+2)& (0+255),f,b
  7073  00217A  3384               	rrcf	(??___fttol+1)& (0+255),f,b
  7074  00217C                     u2860:
  7075  00217C  0100               	movlb	0	; () banked
  7076  00217E  2F87               	decfsz	(??___fttol+4)& (0+255),f,b
  7077  002180  D7F8               	goto	u2865
  7078  002182  0100               	movlb	0	; () banked
  7079  002184  5184               	movf	(??___fttol+1)& (0+255),w,b
  7080  002186  0100               	movlb	0	; () banked
  7081  002188  6F88               	movwf	___fttol@sign1& (0+255),b
  7082                           
  7083                           ; BSR set to: 0
  7084  00218A  0100               	movlb	0	; () banked
  7085  00218C  8F80               	bsf	(___fttol@f1+1)& (0+255),7,b
  7086                           
  7087                           ; BSR set to: 0
  7088  00218E  0EFF               	movlw	255
  7089  002190  0100               	movlb	0	; () banked
  7090  002192  177F               	andwf	___fttol@f1& (0+255),f,b
  7091  002194  0EFF               	movlw	255
  7092  002196  0100               	movlb	0	; () banked
  7093  002198  1780               	andwf	(___fttol@f1+1)& (0+255),f,b
  7094  00219A  0E00               	movlw	0
  7095  00219C  0100               	movlb	0	; () banked
  7096  00219E  1781               	andwf	(___fttol@f1+2)& (0+255),f,b
  7097                           
  7098                           ; BSR set to: 0
  7099  0021A0  0100               	movlb	0	; () banked
  7100  0021A2  517F               	movf	___fttol@f1& (0+255),w,b
  7101  0021A4  0100               	movlb	0	; () banked
  7102  0021A6  6F89               	movwf	___fttol@lval& (0+255),b
  7103  0021A8  0100               	movlb	0	; () banked
  7104  0021AA  5180               	movf	(___fttol@f1+1)& (0+255),w,b
  7105  0021AC  0100               	movlb	0	; () banked
  7106  0021AE  6F8A               	movwf	(___fttol@lval+1)& (0+255),b
  7107  0021B0  0100               	movlb	0	; () banked
  7108  0021B2  5181               	movf	(___fttol@f1+2)& (0+255),w,b
  7109  0021B4  0100               	movlb	0	; () banked
  7110  0021B6  6F8B               	movwf	(___fttol@lval+2)& (0+255),b
  7111  0021B8  0100               	movlb	0	; () banked
  7112  0021BA  6B8C               	clrf	(___fttol@lval+3)& (0+255),b
  7113                           
  7114                           ; BSR set to: 0
  7115  0021BC  0E8E               	movlw	142
  7116  0021BE  0100               	movlb	0	; () banked
  7117  0021C0  5F8D               	subwf	___fttol@exp1& (0+255),f,b
  7118                           
  7119                           ; BSR set to: 0
  7120  0021C2  0100               	movlb	0	; () banked
  7121  0021C4  AF8D               	btfss	___fttol@exp1& (0+255),7,b
  7122  0021C6  D01A               	goto	l790
  7123                           
  7124                           ; BSR set to: 0
  7125  0021C8  0100               	movlb	0	; () banked
  7126  0021CA  518D               	movf	___fttol@exp1& (0+255),w,b
  7127  0021CC  0A80               	xorlw	128
  7128  0021CE  0F8F               	addlw	143
  7129  0021D0  B0D8               	btfsc	status,0,c
  7130  0021D2  D00A               	goto	l791
  7131                           
  7132                           ; BSR set to: 0
  7133  0021D4  0E00               	movlw	0
  7134  0021D6  0100               	movlb	0	; () banked
  7135  0021D8  6F7F               	movwf	?___fttol& (0+255),b
  7136  0021DA  0E00               	movlw	0
  7137  0021DC  6F80               	movwf	(?___fttol+1)& (0+255),b
  7138  0021DE  0E00               	movlw	0
  7139  0021E0  6F81               	movwf	(?___fttol+2)& (0+255),b
  7140  0021E2  0E00               	movlw	0
  7141  0021E4  6F82               	movwf	(?___fttol+3)& (0+255),b
  7142                           
  7143                           ; BSR set to: 0
  7144  0021E6  0012               	return	
  7145  0021E8                     l791:
  7146                           
  7147                           ; BSR set to: 0
  7148                           
  7149                           ; BSR set to: 0
  7150                           
  7151                           ; BSR set to: 0
  7152  0021E8  0100               	movlb	0	; () banked
  7153  0021EA  90D8               	bcf	status,0,c
  7154  0021EC  338C               	rrcf	(___fttol@lval+3)& (0+255),f,b
  7155  0021EE  338B               	rrcf	(___fttol@lval+2)& (0+255),f,b
  7156  0021F0  338A               	rrcf	(___fttol@lval+1)& (0+255),f,b
  7157  0021F2  3389               	rrcf	___fttol@lval& (0+255),f,b
  7158                           
  7159                           ; BSR set to: 0
  7160  0021F4  0100               	movlb	0	; () banked
  7161  0021F6  3F8D               	incfsz	___fttol@exp1& (0+255),f,b
  7162  0021F8  D7F7               	goto	l791
  7163                           
  7164                           ; BSR set to: 0
  7165  0021FA  D01B               	goto	u2900
  7166  0021FC                     l790:
  7167                           
  7168                           ; BSR set to: 0
  7169                           
  7170                           ; BSR set to: 0
  7171  0021FC  0E17               	movlw	23
  7172  0021FE  0100               	movlb	0	; () banked
  7173  002200  658D               	cpfsgt	___fttol@exp1& (0+255),b
  7174  002202  D012               	goto	l796
  7175                           
  7176                           ; BSR set to: 0
  7177  002204  0E00               	movlw	0
  7178  002206  0100               	movlb	0	; () banked
  7179  002208  6F7F               	movwf	?___fttol& (0+255),b
  7180  00220A  0E00               	movlw	0
  7181  00220C  6F80               	movwf	(?___fttol+1)& (0+255),b
  7182  00220E  0E00               	movlw	0
  7183  002210  6F81               	movwf	(?___fttol+2)& (0+255),b
  7184  002212  0E00               	movlw	0
  7185  002214  6F82               	movwf	(?___fttol+3)& (0+255),b
  7186                           
  7187                           ; BSR set to: 0
  7188  002216  0012               	return	
  7189  002218                     
  7190                           ; BSR set to: 0
  7191                           
  7192                           ; BSR set to: 0
  7193  002218  0100               	movlb	0	; () banked
  7194  00221A  90D8               	bcf	status,0,c
  7195  00221C  3789               	rlcf	___fttol@lval& (0+255),f,b
  7196  00221E  378A               	rlcf	(___fttol@lval+1)& (0+255),f,b
  7197  002220  378B               	rlcf	(___fttol@lval+2)& (0+255),f,b
  7198  002222  378C               	rlcf	(___fttol@lval+3)& (0+255),f,b
  7199  002224  0100               	movlb	0	; () banked
  7200  002226  078D               	decf	___fttol@exp1& (0+255),f,b
  7201  002228                     l796:
  7202                           
  7203                           ; BSR set to: 0
  7204                           
  7205                           ; BSR set to: 0
  7206  002228  0100               	movlb	0	; () banked
  7207  00222A  518D               	movf	___fttol@exp1& (0+255),w,b
  7208  00222C  0100               	movlb	0	; () banked
  7209  00222E  A4D8               	btfss	status,2,c
  7210  002230  D7F3               	goto	l797
  7211  002232                     u2900:
  7212                           
  7213                           ; BSR set to: 0
  7214                           
  7215                           ; BSR set to: 0
  7216                           
  7217                           ; BSR set to: 0
  7218  002232  0100               	movlb	0	; () banked
  7219  002234  5188               	movf	___fttol@sign1& (0+255),w,b
  7220  002236  0100               	movlb	0	; () banked
  7221  002238  B4D8               	btfsc	status,2,c
  7222  00223A  D009               	goto	l799
  7223                           
  7224                           ; BSR set to: 0
  7225  00223C  0100               	movlb	0	; () banked
  7226  00223E  1F8C               	comf	(___fttol@lval+3)& (0+255),f,b
  7227  002240  1F8B               	comf	(___fttol@lval+2)& (0+255),f,b
  7228  002242  1F8A               	comf	(___fttol@lval+1)& (0+255),f,b
  7229  002244  6D89               	negf	___fttol@lval& (0+255),b
  7230  002246  0E00               	movlw	0
  7231  002248  238A               	addwfc	(___fttol@lval+1)& (0+255),f,b
  7232  00224A  238B               	addwfc	(___fttol@lval+2)& (0+255),f,b
  7233  00224C  238C               	addwfc	(___fttol@lval+3)& (0+255),f,b
  7234  00224E                     l799:
  7235                           
  7236                           ; BSR set to: 0
  7237                           
  7238                           ; BSR set to: 0
  7239  00224E  C089  F07F         	movff	___fttol@lval,?___fttol
  7240  002252  C08A  F080         	movff	___fttol@lval+1,?___fttol+1
  7241  002256  C08B  F081         	movff	___fttol@lval+2,?___fttol+2
  7242  00225A  C08C  F082         	movff	___fttol@lval+3,?___fttol+3
  7243  00225E  0012               	return	
  7244  002260                     __end_of___fttol:
  7245                           	opt stack 0
  7246                           tblptru	equ	0xFF8
  7247                           tblptrh	equ	0xFF7
  7248                           tblptrl	equ	0xFF6
  7249                           tablat	equ	0xFF5
  7250                           prodh	equ	0xFF4
  7251                           prodl	equ	0xFF3
  7252                           intcon	equ	0xFF2
  7253                           intcon2	equ	0xFF1
  7254                           intcon3	equ	0xFF0
  7255                           postinc0	equ	0xFEE
  7256                           wreg	equ	0xFE8
  7257                           indf2	equ	0xFDF
  7258                           postinc2	equ	0xFDE
  7259                           postdec2	equ	0xFDD
  7260                           fsr2h	equ	0xFDA
  7261                           fsr2l	equ	0xFD9
  7262                           status	equ	0xFD8
  7263                           
  7264 ;; *************** function ___ftsub *****************
  7265 ;; Defined at:
  7266 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\ftsub.c"
  7267 ;; Parameters:    Size  Location     Type
  7268 ;;  f1              3   50[COMRAM] float 
  7269 ;;  f2              3   53[COMRAM] float 
  7270 ;; Auto vars:     Size  Location     Type
  7271 ;;		None
  7272 ;; Return value:  Size  Location     Type
  7273 ;;                  3   50[COMRAM] float 
  7274 ;; Registers used:
  7275 ;;		wreg, status,2, status,0, cstack
  7276 ;; Tracked objects:
  7277 ;;		On entry : 0/0
  7278 ;;		On exit  : 0/0
  7279 ;;		Unchanged: 0/0
  7280 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7281 ;;      Params:         6       0       0       0       0       0       0
  7282 ;;      Locals:         0       0       0       0       0       0       0
  7283 ;;      Temps:          0       0       0       0       0       0       0
  7284 ;;      Totals:         6       0       0       0       0       0       0
  7285 ;;Total ram usage:        6 bytes
  7286 ;; Hardware stack levels used:    1
  7287 ;; Hardware stack levels required when called:    4
  7288 ;; This function calls:
  7289 ;;		___ftadd
  7290 ;; This function is called by:
  7291 ;;		_printf
  7292 ;; This function uses a non-reentrant model
  7293 ;;
  7294                           
  7295                           	psect	text26
  7296  002E5E                     __ptext26:
  7297                           	opt stack 0
  7298  002E5E                     ___ftsub:
  7299                           	opt stack 25
  7300                           
  7301                           ; BSR set to: 0
  7302                           ;incstack = 0
  7303  002E5E  5036               	movf	___ftsub@f2,w,c
  7304  002E60  1037               	iorwf	___ftsub@f2+1,w,c
  7305  002E62  1038               	iorwf	___ftsub@f2+2,w,c
  7306  002E64  B4D8               	btfsc	status,2,c
  7307  002E66  D006               	goto	l784
  7308  002E68  0E00               	movlw	0
  7309  002E6A  1A36               	xorwf	___ftsub@f2,f,c
  7310  002E6C  0E00               	movlw	0
  7311  002E6E  1A37               	xorwf	___ftsub@f2+1,f,c
  7312  002E70  0E80               	movlw	128
  7313  002E72  1A38               	xorwf	___ftsub@f2+2,f,c
  7314  002E74                     l784:
  7315  002E74  C033  F027         	movff	___ftsub@f1,___ftadd@f1
  7316  002E78  C034  F028         	movff	___ftsub@f1+1,___ftadd@f1+1
  7317  002E7C  C035  F029         	movff	___ftsub@f1+2,___ftadd@f1+2
  7318  002E80  C036  F02A         	movff	___ftsub@f2,___ftadd@f2
  7319  002E84  C037  F02B         	movff	___ftsub@f2+1,___ftadd@f2+1
  7320  002E88  C038  F02C         	movff	___ftsub@f2+2,___ftadd@f2+2
  7321  002E8C  EC09  F00F         	call	___ftadd	;wreg free
  7322  002E90  C027  F033         	movff	?___ftadd,?___ftsub
  7323  002E94  C028  F034         	movff	?___ftadd+1,?___ftsub+1
  7324  002E98  C029  F035         	movff	?___ftadd+2,?___ftsub+2
  7325  002E9C  0012               	return	
  7326  002E9E                     __end_of___ftsub:
  7327                           	opt stack 0
  7328                           tblptru	equ	0xFF8
  7329                           tblptrh	equ	0xFF7
  7330                           tblptrl	equ	0xFF6
  7331                           tablat	equ	0xFF5
  7332                           prodh	equ	0xFF4
  7333                           prodl	equ	0xFF3
  7334                           intcon	equ	0xFF2
  7335                           intcon2	equ	0xFF1
  7336                           intcon3	equ	0xFF0
  7337                           postinc0	equ	0xFEE
  7338                           wreg	equ	0xFE8
  7339                           indf2	equ	0xFDF
  7340                           postinc2	equ	0xFDE
  7341                           postdec2	equ	0xFDD
  7342                           fsr2h	equ	0xFDA
  7343                           fsr2l	equ	0xFD9
  7344                           status	equ	0xFD8
  7345                           
  7346 ;; *************** function ___ftneg *****************
  7347 ;; Defined at:
  7348 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\ftneg.c"
  7349 ;; Parameters:    Size  Location     Type
  7350 ;;  f1              3   18[COMRAM] float 
  7351 ;; Auto vars:     Size  Location     Type
  7352 ;;		None
  7353 ;; Return value:  Size  Location     Type
  7354 ;;                  3   18[COMRAM] float 
  7355 ;; Registers used:
  7356 ;;		wreg, status,2, status,0
  7357 ;; Tracked objects:
  7358 ;;		On entry : 0/0
  7359 ;;		On exit  : 0/0
  7360 ;;		Unchanged: 0/0
  7361 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7362 ;;      Params:         3       0       0       0       0       0       0
  7363 ;;      Locals:         0       0       0       0       0       0       0
  7364 ;;      Temps:          0       0       0       0       0       0       0
  7365 ;;      Totals:         3       0       0       0       0       0       0
  7366 ;;Total ram usage:        3 bytes
  7367 ;; Hardware stack levels used:    1
  7368 ;; Hardware stack levels required when called:    2
  7369 ;; This function calls:
  7370 ;;		Nothing
  7371 ;; This function is called by:
  7372 ;;		_printf
  7373 ;; This function uses a non-reentrant model
  7374 ;;
  7375                           
  7376                           	psect	text27
  7377  00307A                     __ptext27:
  7378                           	opt stack 0
  7379  00307A                     ___ftneg:
  7380                           	opt stack 27
  7381                           
  7382                           ;incstack = 0
  7383  00307A  5013               	movf	___ftneg@f1,w,c
  7384  00307C  1014               	iorwf	___ftneg@f1+1,w,c
  7385  00307E  1015               	iorwf	___ftneg@f1+2,w,c
  7386  003080  B4D8               	btfsc	status,2,c
  7387  003082  D006               	goto	l778
  7388  003084  0E00               	movlw	0
  7389  003086  1A13               	xorwf	___ftneg@f1,f,c
  7390  003088  0E00               	movlw	0
  7391  00308A  1A14               	xorwf	___ftneg@f1+1,f,c
  7392  00308C  0E80               	movlw	128
  7393  00308E  1A15               	xorwf	___ftneg@f1+2,f,c
  7394  003090                     l778:
  7395  003090  C013  F013         	movff	___ftneg@f1,?___ftneg
  7396  003094  C014  F014         	movff	___ftneg@f1+1,?___ftneg+1
  7397  003098  C015  F015         	movff	___ftneg@f1+2,?___ftneg+2
  7398  00309C  0012               	return		;funcret
  7399  00309E                     __end_of___ftneg:
  7400                           	opt stack 0
  7401                           tblptru	equ	0xFF8
  7402                           tblptrh	equ	0xFF7
  7403                           tblptrl	equ	0xFF6
  7404                           tablat	equ	0xFF5
  7405                           prodh	equ	0xFF4
  7406                           prodl	equ	0xFF3
  7407                           intcon	equ	0xFF2
  7408                           intcon2	equ	0xFF1
  7409                           intcon3	equ	0xFF0
  7410                           postinc0	equ	0xFEE
  7411                           wreg	equ	0xFE8
  7412                           indf2	equ	0xFDF
  7413                           postinc2	equ	0xFDE
  7414                           postdec2	equ	0xFDD
  7415                           fsr2h	equ	0xFDA
  7416                           fsr2l	equ	0xFD9
  7417                           status	equ	0xFD8
  7418                           
  7419 ;; *************** function ___ftge *****************
  7420 ;; Defined at:
  7421 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\ftge.c"
  7422 ;; Parameters:    Size  Location     Type
  7423 ;;  ff1             3   18[COMRAM] float 
  7424 ;;  ff2             3   21[COMRAM] float 
  7425 ;; Auto vars:     Size  Location     Type
  7426 ;;		None
  7427 ;; Return value:  Size  Location     Type
  7428 ;;		None               void
  7429 ;; Registers used:
  7430 ;;		wreg, status,2, status,0
  7431 ;; Tracked objects:
  7432 ;;		On entry : 0/0
  7433 ;;		On exit  : 0/0
  7434 ;;		Unchanged: 0/0
  7435 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7436 ;;      Params:         6       0       0       0       0       0       0
  7437 ;;      Locals:         0       0       0       0       0       0       0
  7438 ;;      Temps:          3       0       0       0       0       0       0
  7439 ;;      Totals:         9       0       0       0       0       0       0
  7440 ;;Total ram usage:        9 bytes
  7441 ;; Hardware stack levels used:    1
  7442 ;; Hardware stack levels required when called:    2
  7443 ;; This function calls:
  7444 ;;		Nothing
  7445 ;; This function is called by:
  7446 ;;		_printf
  7447 ;; This function uses a non-reentrant model
  7448 ;;
  7449                           
  7450                           	psect	text28
  7451  002A82                     __ptext28:
  7452                           	opt stack 0
  7453  002A82                     ___ftge:
  7454                           	opt stack 27
  7455                           
  7456                           ;incstack = 0
  7457  002A82  AE15               	btfss	___ftge@ff1+2,7,c
  7458  002A84  D016               	goto	l760
  7459  002A86  C013  F019         	movff	___ftge@ff1,??___ftge
  7460  002A8A  C014  F01A         	movff	___ftge@ff1+1,??___ftge+1
  7461  002A8E  C015  F01B         	movff	___ftge@ff1+2,??___ftge+2
  7462  002A92  1E19               	comf	??___ftge,f,c
  7463  002A94  1E1A               	comf	??___ftge+1,f,c
  7464  002A96  1E1B               	comf	??___ftge+2,f,c
  7465  002A98  2A19               	incf	??___ftge,f,c
  7466  002A9A  0E00               	movlw	0
  7467  002A9C  221A               	addwfc	??___ftge+1,f,c
  7468  002A9E  221B               	addwfc	??___ftge+2,f,c
  7469  002AA0  0E00               	movlw	0
  7470  002AA2  2419               	addwf	??___ftge,w,c
  7471  002AA4  6E13               	movwf	___ftge@ff1,c
  7472  002AA6  0E00               	movlw	0
  7473  002AA8  201A               	addwfc	??___ftge+1,w,c
  7474  002AAA  6E14               	movwf	___ftge@ff1+1,c
  7475  002AAC  0E80               	movlw	128
  7476  002AAE  201B               	addwfc	??___ftge+2,w,c
  7477  002AB0  6E15               	movwf	___ftge@ff1+2,c
  7478  002AB2                     l760:
  7479  002AB2  AE18               	btfss	___ftge@ff2+2,7,c
  7480  002AB4  D016               	goto	l761
  7481  002AB6  C016  F019         	movff	___ftge@ff2,??___ftge
  7482  002ABA  C017  F01A         	movff	___ftge@ff2+1,??___ftge+1
  7483  002ABE  C018  F01B         	movff	___ftge@ff2+2,??___ftge+2
  7484  002AC2  1E19               	comf	??___ftge,f,c
  7485  002AC4  1E1A               	comf	??___ftge+1,f,c
  7486  002AC6  1E1B               	comf	??___ftge+2,f,c
  7487  002AC8  2A19               	incf	??___ftge,f,c
  7488  002ACA  0E00               	movlw	0
  7489  002ACC  221A               	addwfc	??___ftge+1,f,c
  7490  002ACE  221B               	addwfc	??___ftge+2,f,c
  7491  002AD0  0E00               	movlw	0
  7492  002AD2  2419               	addwf	??___ftge,w,c
  7493  002AD4  6E16               	movwf	___ftge@ff2,c
  7494  002AD6  0E00               	movlw	0
  7495  002AD8  201A               	addwfc	??___ftge+1,w,c
  7496  002ADA  6E17               	movwf	___ftge@ff2+1,c
  7497  002ADC  0E80               	movlw	128
  7498  002ADE  201B               	addwfc	??___ftge+2,w,c
  7499  002AE0  6E18               	movwf	___ftge@ff2+2,c
  7500  002AE2                     l761:
  7501  002AE2  0E00               	movlw	0
  7502  002AE4  1A13               	xorwf	___ftge@ff1,f,c
  7503  002AE6  0E00               	movlw	0
  7504  002AE8  1A14               	xorwf	___ftge@ff1+1,f,c
  7505  002AEA  0E80               	movlw	128
  7506  002AEC  1A15               	xorwf	___ftge@ff1+2,f,c
  7507  002AEE  0E00               	movlw	0
  7508  002AF0  1A16               	xorwf	___ftge@ff2,f,c
  7509  002AF2  0E00               	movlw	0
  7510  002AF4  1A17               	xorwf	___ftge@ff2+1,f,c
  7511  002AF6  0E80               	movlw	128
  7512  002AF8  1A18               	xorwf	___ftge@ff2+2,f,c
  7513  002AFA  5016               	movf	___ftge@ff2,w,c
  7514  002AFC  5C13               	subwf	___ftge@ff1,w,c
  7515  002AFE  5017               	movf	___ftge@ff2+1,w,c
  7516  002B00  5814               	subwfb	___ftge@ff1+1,w,c
  7517  002B02  5018               	movf	___ftge@ff2+2,w,c
  7518  002B04  5815               	subwfb	___ftge@ff1+2,w,c
  7519  002B06  B0D8               	btfsc	status,0,c
  7520  002B08  D002               	goto	l2388
  7521  002B0A  90D8               	bcf	status,0,c
  7522  002B0C  0012               	return	
  7523  002B0E                     l2388:
  7524  002B0E  80D8               	bsf	status,0,c
  7525  002B10  0012               	return	
  7526  002B12                     __end_of___ftge:
  7527                           	opt stack 0
  7528                           tblptru	equ	0xFF8
  7529                           tblptrh	equ	0xFF7
  7530                           tblptrl	equ	0xFF6
  7531                           tablat	equ	0xFF5
  7532                           prodh	equ	0xFF4
  7533                           prodl	equ	0xFF3
  7534                           intcon	equ	0xFF2
  7535                           intcon2	equ	0xFF1
  7536                           intcon3	equ	0xFF0
  7537                           postinc0	equ	0xFEE
  7538                           wreg	equ	0xFE8
  7539                           indf2	equ	0xFDF
  7540                           postinc2	equ	0xFDE
  7541                           postdec2	equ	0xFDD
  7542                           fsr2h	equ	0xFDA
  7543                           fsr2l	equ	0xFD9
  7544                           status	equ	0xFD8
  7545                           
  7546 ;; *************** function _EUSART2_Read *****************
  7547 ;; Defined at:
  7548 ;;		line 112 in file "mcc_generated_files/eusart2.c"
  7549 ;; Parameters:    Size  Location     Type
  7550 ;;		None
  7551 ;; Auto vars:     Size  Location     Type
  7552 ;;  readValue       1   18[COMRAM] unsigned char 
  7553 ;; Return value:  Size  Location     Type
  7554 ;;                  1    wreg      unsigned char 
  7555 ;; Registers used:
  7556 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  7557 ;; Tracked objects:
  7558 ;;		On entry : 0/0
  7559 ;;		On exit  : 0/0
  7560 ;;		Unchanged: 0/0
  7561 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7562 ;;      Params:         0       0       0       0       0       0       0
  7563 ;;      Locals:         1       0       0       0       0       0       0
  7564 ;;      Temps:          0       0       0       0       0       0       0
  7565 ;;      Totals:         1       0       0       0       0       0       0
  7566 ;;Total ram usage:        1 bytes
  7567 ;; Hardware stack levels used:    1
  7568 ;; Hardware stack levels required when called:    2
  7569 ;; This function calls:
  7570 ;;		Nothing
  7571 ;; This function is called by:
  7572 ;;		_checkValue
  7573 ;;		_getch
  7574 ;; This function uses a non-reentrant model
  7575 ;;
  7576                           
  7577                           	psect	text29
  7578  002F10                     __ptext29:
  7579                           	opt stack 0
  7580  002F10                     _EUSART2_Read:
  7581                           	opt stack 27
  7582                           
  7583                           ;eusart2.c: 114: uint8_t readValue = 0;
  7584                           
  7585                           ;incstack = 0
  7586  002F10  0E00               	movlw	0
  7587  002F12  6E13               	movwf	EUSART2_Read@readValue,c
  7588  002F14                     
  7589                           ;eusart2.c: 117: {
  7590  002F14  5046               	movf	_eusart2RxCount,w,c	;volatile
  7591  002F16  B4D8               	btfsc	status,2,c
  7592  002F18  D7FD               	goto	l41
  7593                           
  7594                           ;eusart2.c: 118: }
  7595                           ;eusart2.c: 120: readValue = eusart2RxBuffer[eusart2RxTail++];
  7596  002F1A  5047               	movf	_eusart2RxTail,w,c	;volatile
  7597  002F1C  0D01               	mullw	1
  7598  002F1E  0EB5               	movlw	low _eusart2RxBuffer
  7599  002F20  24F3               	addwf	prodl,w,c
  7600  002F22  6ED9               	movwf	fsr2l,c
  7601  002F24  0E00               	movlw	high _eusart2RxBuffer
  7602  002F26  20F4               	addwfc	prodh,w,c
  7603  002F28  6EDA               	movwf	fsr2h,c
  7604  002F2A  50DF               	movf	indf2,w,c
  7605  002F2C  6E13               	movwf	EUSART2_Read@readValue,c
  7606  002F2E  2A47               	incf	_eusart2RxTail,f,c	;volatile
  7607                           
  7608                           ;eusart2.c: 121: if(sizeof(eusart2RxBuffer) <= eusart2RxTail)
  7609  002F30  0E07               	movlw	7
  7610  002F32  6447               	cpfsgt	_eusart2RxTail,c	;volatile
  7611  002F34  D002               	goto	l43
  7612                           
  7613                           ;eusart2.c: 122: {
  7614                           ;eusart2.c: 123: eusart2RxTail = 0;
  7615  002F36  0E00               	movlw	0
  7616  002F38  6E47               	movwf	_eusart2RxTail,c	;volatile
  7617  002F3A                     l43:
  7618                           
  7619                           ;eusart2.c: 124: }
  7620                           ;eusart2.c: 125: PIE3bits.RC2IE = 0;
  7621  002F3A  9AA3               	bcf	4003,5,c	;volatile
  7622                           
  7623                           ;eusart2.c: 126: eusart2RxCount--;
  7624  002F3C  0646               	decf	_eusart2RxCount,f,c	;volatile
  7625                           
  7626                           ;eusart2.c: 127: PIE3bits.RC2IE = 1;
  7627  002F3E  8AA3               	bsf	4003,5,c	;volatile
  7628                           
  7629                           ;eusart2.c: 129: return readValue;
  7630  002F40  5013               	movf	EUSART2_Read@readValue,w,c
  7631  002F42  0012               	return	
  7632  002F44                     __end_of_EUSART2_Read:
  7633                           	opt stack 0
  7634                           tblptru	equ	0xFF8
  7635                           tblptrh	equ	0xFF7
  7636                           tblptrl	equ	0xFF6
  7637                           tablat	equ	0xFF5
  7638                           prodh	equ	0xFF4
  7639                           prodl	equ	0xFF3
  7640                           intcon	equ	0xFF2
  7641                           intcon2	equ	0xFF1
  7642                           intcon3	equ	0xFF0
  7643                           postinc0	equ	0xFEE
  7644                           wreg	equ	0xFE8
  7645                           indf2	equ	0xFDF
  7646                           postinc2	equ	0xFDE
  7647                           postdec2	equ	0xFDD
  7648                           fsr2h	equ	0xFDA
  7649                           fsr2l	equ	0xFD9
  7650                           status	equ	0xFD8
  7651                           
  7652 ;; *************** function _carbonMeasurement *****************
  7653 ;; Defined at:
  7654 ;;		line 203 in file "main.c"
  7655 ;; Parameters:    Size  Location     Type
  7656 ;;  x               2   24[BANK0 ] unsigned int 
  7657 ;; Auto vars:     Size  Location     Type
  7658 ;;  Vin             3   30[BANK0 ] float 
  7659 ;;  carbon          3   27[BANK0 ] float 
  7660 ;; Return value:  Size  Location     Type
  7661 ;;                  3   24[BANK0 ] float 
  7662 ;; Registers used:
  7663 ;;		wreg, status,2, status,0, cstack
  7664 ;; Tracked objects:
  7665 ;;		On entry : 0/0
  7666 ;;		On exit  : 0/0
  7667 ;;		Unchanged: 0/0
  7668 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7669 ;;      Params:         0       3       0       0       0       0       0
  7670 ;;      Locals:         0       6       0       0       0       0       0
  7671 ;;      Temps:          0       0       0       0       0       0       0
  7672 ;;      Totals:         0       9       0       0       0       0       0
  7673 ;;Total ram usage:        9 bytes
  7674 ;; Hardware stack levels used:    1
  7675 ;; Hardware stack levels required when called:    4
  7676 ;; This function calls:
  7677 ;;		___ftadd
  7678 ;;		___ftdiv
  7679 ;;		___ftmul
  7680 ;;		___lwtoft
  7681 ;; This function is called by:
  7682 ;;		_main
  7683 ;; This function uses a non-reentrant model
  7684 ;;
  7685                           
  7686                           	psect	text30
  7687  0026F0                     __ptext30:
  7688                           	opt stack 0
  7689  0026F0                     _carbonMeasurement:
  7690                           	opt stack 26
  7691                           
  7692                           ;main.c: 205: float Vin = ((float)x / 1023) * 4.75;
  7693                           
  7694                           ;incstack = 0
  7695  0026F0  0EC0               	movlw	192
  7696  0026F2  6E36               	movwf	___ftdiv@f2,c
  7697  0026F4  0E7F               	movlw	127
  7698  0026F6  6E37               	movwf	___ftdiv@f2+1,c
  7699  0026F8  0E44               	movlw	68
  7700  0026FA  6E38               	movwf	___ftdiv@f2+2,c
  7701  0026FC  C078  F01B         	movff	carbonMeasurement@x,___lwtoft@c
  7702  002700  C079  F01C         	movff	carbonMeasurement@x+1,___lwtoft@c+1
  7703  002704  EC4F  F018         	call	___lwtoft	;wreg free
  7704  002708  C01B  F033         	movff	?___lwtoft,___ftdiv@f1
  7705  00270C  C01C  F034         	movff	?___lwtoft+1,___ftdiv@f1+1
  7706  002710  C01D  F035         	movff	?___lwtoft+2,___ftdiv@f1+2
  7707  002714  EC02  F014         	call	___ftdiv	;wreg free
  7708  002718  C033  F069         	movff	?___ftdiv,___ftmul@f1
  7709  00271C  C034  F06A         	movff	?___ftdiv+1,___ftmul@f1+1
  7710  002720  C035  F06B         	movff	?___ftdiv+2,___ftmul@f1+2
  7711  002724  0E00               	movlw	0
  7712  002726  0100               	movlb	0	; () banked
  7713  002728  6F6C               	movwf	___ftmul@f2& (0+255),b
  7714  00272A  0E98               	movlw	152
  7715  00272C  0100               	movlb	0	; () banked
  7716  00272E  6F6D               	movwf	(___ftmul@f2+1)& (0+255),b
  7717  002730  0E40               	movlw	64
  7718  002732  0100               	movlb	0	; () banked
  7719  002734  6F6E               	movwf	(___ftmul@f2+2)& (0+255),b
  7720  002736  ECDF  F00F         	call	___ftmul	;wreg free
  7721  00273A  C069  F07E         	movff	?___ftmul,carbonMeasurement@Vin
  7722  00273E  C06A  F07F         	movff	?___ftmul+1,carbonMeasurement@Vin+1
  7723  002742  C06B  F080         	movff	?___ftmul+2,carbonMeasurement@Vin+2
  7724                           
  7725                           ;main.c: 206: float Vin = Vin*40 + 50;
  7726  002746  0E00               	movlw	0
  7727  002748  0100               	movlb	0	; () banked
  7728  00274A  6F6C               	movwf	___ftmul@f2& (0+255),b
  7729  00274C  0E20               	movlw	32
  7730  00274E  0100               	movlb	0	; () banked
  7731  002750  6F6D               	movwf	(___ftmul@f2+1)& (0+255),b
  7732  002752  0E42               	movlw	66
  7733  002754  0100               	movlb	0	; () banked
  7734  002756  6F6E               	movwf	(___ftmul@f2+2)& (0+255),b
  7735  002758  C07E  F069         	movff	carbonMeasurement@Vin,___ftmul@f1
  7736  00275C  C07F  F06A         	movff	carbonMeasurement@Vin+1,___ftmul@f1+1
  7737  002760  C080  F06B         	movff	carbonMeasurement@Vin+2,___ftmul@f1+2
  7738  002764  ECDF  F00F         	call	___ftmul	;wreg free
  7739  002768  C069  F027         	movff	?___ftmul,___ftadd@f1
  7740  00276C  C06A  F028         	movff	?___ftmul+1,___ftadd@f1+1
  7741  002770  C06B  F029         	movff	?___ftmul+2,___ftadd@f1+2
  7742  002774  0E00               	movlw	0
  7743  002776  6E2A               	movwf	___ftadd@f2,c
  7744  002778  0E48               	movlw	72
  7745  00277A  6E2B               	movwf	___ftadd@f2+1,c
  7746  00277C  0E42               	movlw	66
  7747  00277E  6E2C               	movwf	___ftadd@f2+2,c
  7748  002780  EC09  F00F         	call	___ftadd	;wreg free
  7749  002784  C027  F07E         	movff	?___ftadd,carbonMeasurement@Vin
  7750  002788  C028  F07F         	movff	?___ftadd+1,carbonMeasurement@Vin+1
  7751  00278C  C029  F080         	movff	?___ftadd+2,carbonMeasurement@Vin+2
  7752                           
  7753                           ;main.c: 207: float carbon = ((68*Vin/49) + 150/49);
  7754  002790  0E00               	movlw	0
  7755  002792  6E36               	movwf	___ftdiv@f2,c
  7756  002794  0E44               	movlw	68
  7757  002796  6E37               	movwf	___ftdiv@f2+1,c
  7758  002798  0E42               	movlw	66
  7759  00279A  6E38               	movwf	___ftdiv@f2+2,c
  7760  00279C  0E00               	movlw	0
  7761  00279E  0100               	movlb	0	; () banked
  7762  0027A0  6F6C               	movwf	___ftmul@f2& (0+255),b
  7763  0027A2  0E88               	movlw	136
  7764  0027A4  0100               	movlb	0	; () banked
  7765  0027A6  6F6D               	movwf	(___ftmul@f2+1)& (0+255),b
  7766  0027A8  0E42               	movlw	66
  7767  0027AA  0100               	movlb	0	; () banked
  7768  0027AC  6F6E               	movwf	(___ftmul@f2+2)& (0+255),b
  7769  0027AE  C07E  F069         	movff	carbonMeasurement@Vin,___ftmul@f1
  7770  0027B2  C07F  F06A         	movff	carbonMeasurement@Vin+1,___ftmul@f1+1
  7771  0027B6  C080  F06B         	movff	carbonMeasurement@Vin+2,___ftmul@f1+2
  7772  0027BA  ECDF  F00F         	call	___ftmul	;wreg free
  7773  0027BE  C069  F033         	movff	?___ftmul,___ftdiv@f1
  7774  0027C2  C06A  F034         	movff	?___ftmul+1,___ftdiv@f1+1
  7775  0027C6  C06B  F035         	movff	?___ftmul+2,___ftdiv@f1+2
  7776  0027CA  EC02  F014         	call	___ftdiv	;wreg free
  7777  0027CE  C033  F027         	movff	?___ftdiv,___ftadd@f1
  7778  0027D2  C034  F028         	movff	?___ftdiv+1,___ftadd@f1+1
  7779  0027D6  C035  F029         	movff	?___ftdiv+2,___ftadd@f1+2
  7780  0027DA  0E00               	movlw	0
  7781  0027DC  6E2A               	movwf	___ftadd@f2,c
  7782  0027DE  0E40               	movlw	64
  7783  0027E0  6E2B               	movwf	___ftadd@f2+1,c
  7784  0027E2  0E40               	movlw	64
  7785  0027E4  6E2C               	movwf	___ftadd@f2+2,c
  7786  0027E6  EC09  F00F         	call	___ftadd	;wreg free
  7787  0027EA  C027  F07B         	movff	?___ftadd,carbonMeasurement@carbon
  7788  0027EE  C028  F07C         	movff	?___ftadd+1,carbonMeasurement@carbon+1
  7789  0027F2  C029  F07D         	movff	?___ftadd+2,carbonMeasurement@carbon+2
  7790                           
  7791                           ;main.c: 208: return carbon;
  7792  0027F6  C07B  F078         	movff	carbonMeasurement@carbon,?_carbonMeasurement
  7793  0027FA  C07C  F079         	movff	carbonMeasurement@carbon+1,?_carbonMeasurement+1
  7794  0027FE  C07D  F07A         	movff	carbonMeasurement@carbon+2,?_carbonMeasurement+2
  7795  002802  0012               	return	
  7796  002804                     __end_of_carbonMeasurement:
  7797                           	opt stack 0
  7798                           tblptru	equ	0xFF8
  7799                           tblptrh	equ	0xFF7
  7800                           tblptrl	equ	0xFF6
  7801                           tablat	equ	0xFF5
  7802                           prodh	equ	0xFF4
  7803                           prodl	equ	0xFF3
  7804                           intcon	equ	0xFF2
  7805                           intcon2	equ	0xFF1
  7806                           intcon3	equ	0xFF0
  7807                           postinc0	equ	0xFEE
  7808                           wreg	equ	0xFE8
  7809                           indf2	equ	0xFDF
  7810                           postinc2	equ	0xFDE
  7811                           postdec2	equ	0xFDD
  7812                           fsr2h	equ	0xFDA
  7813                           fsr2l	equ	0xFD9
  7814                           status	equ	0xFD8
  7815                           
  7816 ;; *************** function ___lwtoft *****************
  7817 ;; Defined at:
  7818 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\lwtoft.c"
  7819 ;; Parameters:    Size  Location     Type
  7820 ;;  c               2   26[COMRAM] unsigned int 
  7821 ;; Auto vars:     Size  Location     Type
  7822 ;;		None
  7823 ;; Return value:  Size  Location     Type
  7824 ;;                  3   26[COMRAM] float 
  7825 ;; Registers used:
  7826 ;;		wreg, status,2, status,0, cstack
  7827 ;; Tracked objects:
  7828 ;;		On entry : 0/0
  7829 ;;		On exit  : 0/0
  7830 ;;		Unchanged: 0/0
  7831 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7832 ;;      Params:         3       0       0       0       0       0       0
  7833 ;;      Locals:         0       0       0       0       0       0       0
  7834 ;;      Temps:          0       0       0       0       0       0       0
  7835 ;;      Totals:         3       0       0       0       0       0       0
  7836 ;;Total ram usage:        3 bytes
  7837 ;; Hardware stack levels used:    1
  7838 ;; Hardware stack levels required when called:    3
  7839 ;; This function calls:
  7840 ;;		___ftpack
  7841 ;; This function is called by:
  7842 ;;		_temperatureMeasurementC
  7843 ;;		_temperatureMeasurementF
  7844 ;;		_carbonMeasurement
  7845 ;;		_salinityMeasurement
  7846 ;; This function uses a non-reentrant model
  7847 ;;
  7848                           
  7849                           	psect	text31
  7850  00309E                     __ptext31:
  7851                           	opt stack 0
  7852  00309E                     ___lwtoft:
  7853                           	opt stack 26
  7854                           
  7855                           ;incstack = 0
  7856  00309E  C01B  F013         	movff	___lwtoft@c,___ftpack@arg
  7857  0030A2  C01C  F014         	movff	___lwtoft@c+1,___ftpack@arg+1
  7858  0030A6  6A15               	clrf	___ftpack@arg+2,c
  7859  0030A8  0E8E               	movlw	142
  7860  0030AA  6E16               	movwf	___ftpack@exp,c
  7861  0030AC  0E00               	movlw	0
  7862  0030AE  6E17               	movwf	___ftpack@sign,c
  7863  0030B0  ECEA  F014         	call	___ftpack	;wreg free
  7864  0030B4  C013  F01B         	movff	?___ftpack,?___lwtoft
  7865  0030B8  C014  F01C         	movff	?___ftpack+1,?___lwtoft+1
  7866  0030BC  C015  F01D         	movff	?___ftpack+2,?___lwtoft+2
  7867  0030C0  0012               	return	
  7868  0030C2                     __end_of___lwtoft:
  7869                           	opt stack 0
  7870                           tblptru	equ	0xFF8
  7871                           tblptrh	equ	0xFF7
  7872                           tblptrl	equ	0xFF6
  7873                           tablat	equ	0xFF5
  7874                           prodh	equ	0xFF4
  7875                           prodl	equ	0xFF3
  7876                           intcon	equ	0xFF2
  7877                           intcon2	equ	0xFF1
  7878                           intcon3	equ	0xFF0
  7879                           postinc0	equ	0xFEE
  7880                           wreg	equ	0xFE8
  7881                           indf2	equ	0xFDF
  7882                           postinc2	equ	0xFDE
  7883                           postdec2	equ	0xFDD
  7884                           fsr2h	equ	0xFDA
  7885                           fsr2l	equ	0xFD9
  7886                           status	equ	0xFD8
  7887                           
  7888 ;; *************** function ___ftmul *****************
  7889 ;; Defined at:
  7890 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\ftmul.c"
  7891 ;; Parameters:    Size  Location     Type
  7892 ;;  f1              3    9[BANK0 ] float 
  7893 ;;  f2              3   12[BANK0 ] float 
  7894 ;; Auto vars:     Size  Location     Type
  7895 ;;  f3_as_produc    3   19[BANK0 ] unsigned um
  7896 ;;  sign            1   23[BANK0 ] unsigned char 
  7897 ;;  cntr            1   22[BANK0 ] unsigned char 
  7898 ;;  exp             1   18[BANK0 ] unsigned char 
  7899 ;; Return value:  Size  Location     Type
  7900 ;;                  3    9[BANK0 ] float 
  7901 ;; Registers used:
  7902 ;;		wreg, status,2, status,0, cstack
  7903 ;; Tracked objects:
  7904 ;;		On entry : 0/0
  7905 ;;		On exit  : 0/0
  7906 ;;		Unchanged: 0/0
  7907 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7908 ;;      Params:         0       6       0       0       0       0       0
  7909 ;;      Locals:         0       6       0       0       0       0       0
  7910 ;;      Temps:          0       3       0       0       0       0       0
  7911 ;;      Totals:         0      15       0       0       0       0       0
  7912 ;;Total ram usage:       15 bytes
  7913 ;; Hardware stack levels used:    1
  7914 ;; Hardware stack levels required when called:    3
  7915 ;; This function calls:
  7916 ;;		___ftpack
  7917 ;; This function is called by:
  7918 ;;		_temperatureMeasurementC
  7919 ;;		_temperatureMeasurementF
  7920 ;;		_carbonMeasurement
  7921 ;;		_salinityMeasurement
  7922 ;;		_fround
  7923 ;;		_scale
  7924 ;;		_printf
  7925 ;; This function uses a non-reentrant model
  7926 ;;
  7927                           
  7928                           	psect	text32
  7929  001FBE                     __ptext32:
  7930                           	opt stack 0
  7931  001FBE                     ___ftmul:
  7932                           	opt stack 26
  7933                           
  7934                           ;incstack = 0
  7935  001FBE  C06B  F06F         	movff	___ftmul@f1+2,??___ftmul
  7936  001FC2  0100               	movlb	0	; () banked
  7937  001FC4  6B70               	clrf	(??___ftmul+1)& (0+255),b
  7938  001FC6  6B71               	clrf	(??___ftmul+2)& (0+255),b
  7939  001FC8  0100               	movlb	0	; () banked
  7940  001FCA  356A               	rlcf	(___ftmul@f1+1)& (0+255),w,b
  7941  001FCC  0100               	movlb	0	; () banked
  7942  001FCE  376F               	rlcf	??___ftmul& (0+255),f,b
  7943  001FD0  E301               	bnc	u4321
  7944  001FD2  8170               	bsf	(??___ftmul+1)& (0+255),0,b
  7945  001FD4                     u4321:
  7946  001FD4  0100               	movlb	0	; () banked
  7947  001FD6  516F               	movf	??___ftmul& (0+255),w,b
  7948  001FD8  0100               	movlb	0	; () banked
  7949  001FDA  6F72               	movwf	___ftmul@exp& (0+255),b
  7950  001FDC  0100               	movlb	0	; () banked
  7951  001FDE  5172               	movf	___ftmul@exp& (0+255),w,b
  7952  001FE0  A4D8               	btfss	status,2,c
  7953  001FE2  D00A               	goto	l767
  7954                           
  7955                           ; BSR set to: 0
  7956  001FE4  0E00               	movlw	0
  7957  001FE6  0100               	movlb	0	; () banked
  7958  001FE8  6F69               	movwf	?___ftmul& (0+255),b
  7959  001FEA  0E00               	movlw	0
  7960  001FEC  0100               	movlb	0	; () banked
  7961  001FEE  6F6A               	movwf	(?___ftmul+1)& (0+255),b
  7962  001FF0  0E00               	movlw	0
  7963  001FF2  0100               	movlb	0	; () banked
  7964  001FF4  6F6B               	movwf	(?___ftmul+2)& (0+255),b
  7965                           
  7966                           ; BSR set to: 0
  7967  001FF6  0012               	return	
  7968  001FF8                     l767:
  7969                           
  7970                           ; BSR set to: 0
  7971                           
  7972                           ; BSR set to: 0
  7973  001FF8  C06E  F06F         	movff	___ftmul@f2+2,??___ftmul
  7974  001FFC  0100               	movlb	0	; () banked
  7975  001FFE  6B70               	clrf	(??___ftmul+1)& (0+255),b
  7976  002000  6B71               	clrf	(??___ftmul+2)& (0+255),b
  7977  002002  0100               	movlb	0	; () banked
  7978  002004  356D               	rlcf	(___ftmul@f2+1)& (0+255),w,b
  7979  002006  0100               	movlb	0	; () banked
  7980  002008  376F               	rlcf	??___ftmul& (0+255),f,b
  7981  00200A  E301               	bnc	u4341
  7982  00200C  8170               	bsf	(??___ftmul+1)& (0+255),0,b
  7983  00200E                     u4341:
  7984  00200E  0100               	movlb	0	; () banked
  7985  002010  516F               	movf	??___ftmul& (0+255),w,b
  7986  002012  0100               	movlb	0	; () banked
  7987  002014  6F77               	movwf	___ftmul@sign& (0+255),b
  7988  002016  0100               	movlb	0	; () banked
  7989  002018  5177               	movf	___ftmul@sign& (0+255),w,b
  7990  00201A  A4D8               	btfss	status,2,c
  7991  00201C  D00A               	goto	l769
  7992                           
  7993                           ; BSR set to: 0
  7994  00201E  0E00               	movlw	0
  7995  002020  0100               	movlb	0	; () banked
  7996  002022  6F69               	movwf	?___ftmul& (0+255),b
  7997  002024  0E00               	movlw	0
  7998  002026  0100               	movlb	0	; () banked
  7999  002028  6F6A               	movwf	(?___ftmul+1)& (0+255),b
  8000  00202A  0E00               	movlw	0
  8001  00202C  0100               	movlb	0	; () banked
  8002  00202E  6F6B               	movwf	(?___ftmul+2)& (0+255),b
  8003                           
  8004                           ; BSR set to: 0
  8005  002030  0012               	return	
  8006  002032                     l769:
  8007                           
  8008                           ; BSR set to: 0
  8009                           
  8010                           ; BSR set to: 0
  8011  002032  0100               	movlb	0	; () banked
  8012  002034  5177               	movf	___ftmul@sign& (0+255),w,b
  8013  002036  0F7B               	addlw	123
  8014  002038  0100               	movlb	0	; () banked
  8015  00203A  2772               	addwf	___ftmul@exp& (0+255),f,b
  8016                           
  8017                           ; BSR set to: 0
  8018  00203C  C06B  F077         	movff	___ftmul@f1+2,___ftmul@sign
  8019  002040  0100               	movlb	0	; () banked
  8020  002042  516E               	movf	(___ftmul@f2+2)& (0+255),w,b
  8021  002044  0100               	movlb	0	; () banked
  8022  002046  1B77               	xorwf	___ftmul@sign& (0+255),f,b
  8023  002048  0E80               	movlw	128
  8024  00204A  0100               	movlb	0	; () banked
  8025  00204C  1777               	andwf	___ftmul@sign& (0+255),f,b
  8026                           
  8027                           ; BSR set to: 0
  8028  00204E  0100               	movlb	0	; () banked
  8029  002050  8F6A               	bsf	(___ftmul@f1+1)& (0+255),7,b
  8030                           
  8031                           ; BSR set to: 0
  8032  002052  0100               	movlb	0	; () banked
  8033  002054  8F6D               	bsf	(___ftmul@f2+1)& (0+255),7,b
  8034                           
  8035                           ; BSR set to: 0
  8036  002056  0EFF               	movlw	255
  8037  002058  0100               	movlb	0	; () banked
  8038  00205A  176C               	andwf	___ftmul@f2& (0+255),f,b
  8039  00205C  0EFF               	movlw	255
  8040  00205E  0100               	movlb	0	; () banked
  8041  002060  176D               	andwf	(___ftmul@f2+1)& (0+255),f,b
  8042  002062  0E00               	movlw	0
  8043  002064  0100               	movlb	0	; () banked
  8044  002066  176E               	andwf	(___ftmul@f2+2)& (0+255),f,b
  8045                           
  8046                           ; BSR set to: 0
  8047  002068  0E00               	movlw	0
  8048  00206A  0100               	movlb	0	; () banked
  8049  00206C  6F73               	movwf	___ftmul@f3_as_product& (0+255),b
  8050  00206E  0E00               	movlw	0
  8051  002070  0100               	movlb	0	; () banked
  8052  002072  6F74               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
  8053  002074  0E00               	movlw	0
  8054  002076  0100               	movlb	0	; () banked
  8055  002078  6F75               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
  8056                           
  8057                           ; BSR set to: 0
  8058  00207A  0E07               	movlw	7
  8059  00207C  0100               	movlb	0	; () banked
  8060  00207E  6F76               	movwf	___ftmul@cntr& (0+255),b
  8061  002080                     
  8062                           ; BSR set to: 0
  8063                           
  8064                           ; BSR set to: 0
  8065  002080  0100               	movlb	0	; () banked
  8066  002082  A169               	btfss	___ftmul@f1& (0+255),0,b
  8067  002084  D00C               	goto	l771
  8068                           
  8069                           ; BSR set to: 0
  8070  002086  0100               	movlb	0	; () banked
  8071  002088  516C               	movf	___ftmul@f2& (0+255),w,b
  8072  00208A  0100               	movlb	0	; () banked
  8073  00208C  2773               	addwf	___ftmul@f3_as_product& (0+255),f,b
  8074  00208E  0100               	movlb	0	; () banked
  8075  002090  516D               	movf	(___ftmul@f2+1)& (0+255),w,b
  8076  002092  0100               	movlb	0	; () banked
  8077  002094  2374               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  8078  002096  0100               	movlb	0	; () banked
  8079  002098  516E               	movf	(___ftmul@f2+2)& (0+255),w,b
  8080  00209A  0100               	movlb	0	; () banked
  8081  00209C  2375               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  8082  00209E                     l771:
  8083                           
  8084                           ; BSR set to: 0
  8085                           
  8086                           ; BSR set to: 0
  8087  00209E  0100               	movlb	0	; () banked
  8088  0020A0  90D8               	bcf	status,0,c
  8089  0020A2  336B               	rrcf	(___ftmul@f1+2)& (0+255),f,b
  8090  0020A4  336A               	rrcf	(___ftmul@f1+1)& (0+255),f,b
  8091  0020A6  3369               	rrcf	___ftmul@f1& (0+255),f,b
  8092  0020A8  0100               	movlb	0	; () banked
  8093  0020AA  90D8               	bcf	status,0,c
  8094  0020AC  376C               	rlcf	___ftmul@f2& (0+255),f,b
  8095  0020AE  376D               	rlcf	(___ftmul@f2+1)& (0+255),f,b
  8096  0020B0  376E               	rlcf	(___ftmul@f2+2)& (0+255),f,b
  8097                           
  8098                           ; BSR set to: 0
  8099  0020B2  0100               	movlb	0	; () banked
  8100  0020B4  2F76               	decfsz	___ftmul@cntr& (0+255),f,b
  8101  0020B6  D7E4               	goto	l770
  8102                           
  8103                           ; BSR set to: 0
  8104                           
  8105                           ; BSR set to: 0
  8106  0020B8  0E09               	movlw	9
  8107  0020BA  0100               	movlb	0	; () banked
  8108  0020BC  6F76               	movwf	___ftmul@cntr& (0+255),b
  8109  0020BE                     
  8110                           ; BSR set to: 0
  8111                           
  8112                           ; BSR set to: 0
  8113  0020BE  0100               	movlb	0	; () banked
  8114  0020C0  A169               	btfss	___ftmul@f1& (0+255),0,b
  8115  0020C2  D00C               	goto	l774
  8116                           
  8117                           ; BSR set to: 0
  8118  0020C4  0100               	movlb	0	; () banked
  8119  0020C6  516C               	movf	___ftmul@f2& (0+255),w,b
  8120  0020C8  0100               	movlb	0	; () banked
  8121  0020CA  2773               	addwf	___ftmul@f3_as_product& (0+255),f,b
  8122  0020CC  0100               	movlb	0	; () banked
  8123  0020CE  516D               	movf	(___ftmul@f2+1)& (0+255),w,b
  8124  0020D0  0100               	movlb	0	; () banked
  8125  0020D2  2374               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  8126  0020D4  0100               	movlb	0	; () banked
  8127  0020D6  516E               	movf	(___ftmul@f2+2)& (0+255),w,b
  8128  0020D8  0100               	movlb	0	; () banked
  8129  0020DA  2375               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  8130  0020DC                     l774:
  8131                           
  8132                           ; BSR set to: 0
  8133                           
  8134                           ; BSR set to: 0
  8135  0020DC  0100               	movlb	0	; () banked
  8136  0020DE  90D8               	bcf	status,0,c
  8137  0020E0  336B               	rrcf	(___ftmul@f1+2)& (0+255),f,b
  8138  0020E2  336A               	rrcf	(___ftmul@f1+1)& (0+255),f,b
  8139  0020E4  3369               	rrcf	___ftmul@f1& (0+255),f,b
  8140  0020E6  0100               	movlb	0	; () banked
  8141  0020E8  90D8               	bcf	status,0,c
  8142  0020EA  3375               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
  8143  0020EC  3374               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
  8144  0020EE  3373               	rrcf	___ftmul@f3_as_product& (0+255),f,b
  8145                           
  8146                           ; BSR set to: 0
  8147  0020F0  0100               	movlb	0	; () banked
  8148  0020F2  2F76               	decfsz	___ftmul@cntr& (0+255),f,b
  8149  0020F4  D7E4               	goto	l773
  8150                           
  8151                           ; BSR set to: 0
  8152                           
  8153                           ; BSR set to: 0
  8154  0020F6  C073  F013         	movff	___ftmul@f3_as_product,___ftpack@arg
  8155  0020FA  C074  F014         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  8156  0020FE  C075  F015         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  8157  002102  C072  F016         	movff	___ftmul@exp,___ftpack@exp
  8158  002106  C077  F017         	movff	___ftmul@sign,___ftpack@sign
  8159  00210A  ECEA  F014         	call	___ftpack	;wreg free
  8160  00210E  C013  F069         	movff	?___ftpack,?___ftmul
  8161  002112  C014  F06A         	movff	?___ftpack+1,?___ftmul+1
  8162  002116  C015  F06B         	movff	?___ftpack+2,?___ftmul+2
  8163  00211A  0012               	return	
  8164  00211C                     __end_of___ftmul:
  8165                           	opt stack 0
  8166                           tblptru	equ	0xFF8
  8167                           tblptrh	equ	0xFF7
  8168                           tblptrl	equ	0xFF6
  8169                           tablat	equ	0xFF5
  8170                           prodh	equ	0xFF4
  8171                           prodl	equ	0xFF3
  8172                           intcon	equ	0xFF2
  8173                           intcon2	equ	0xFF1
  8174                           intcon3	equ	0xFF0
  8175                           postinc0	equ	0xFEE
  8176                           wreg	equ	0xFE8
  8177                           indf2	equ	0xFDF
  8178                           postinc2	equ	0xFDE
  8179                           postdec2	equ	0xFDD
  8180                           fsr2h	equ	0xFDA
  8181                           fsr2l	equ	0xFD9
  8182                           status	equ	0xFD8
  8183                           
  8184 ;; *************** function ___ftdiv *****************
  8185 ;; Defined at:
  8186 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\ftdiv.c"
  8187 ;; Parameters:    Size  Location     Type
  8188 ;;  f1              3   50[COMRAM] float 
  8189 ;;  f2              3   53[COMRAM] float 
  8190 ;; Auto vars:     Size  Location     Type
  8191 ;;  f3              3    4[BANK0 ] float 
  8192 ;;  sign            1    8[BANK0 ] unsigned char 
  8193 ;;  exp             1    7[BANK0 ] unsigned char 
  8194 ;;  cntr            1    3[BANK0 ] unsigned char 
  8195 ;; Return value:  Size  Location     Type
  8196 ;;                  3   50[COMRAM] float 
  8197 ;; Registers used:
  8198 ;;		wreg, status,2, status,0, cstack
  8199 ;; Tracked objects:
  8200 ;;		On entry : 0/0
  8201 ;;		On exit  : 0/0
  8202 ;;		Unchanged: 0/0
  8203 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8204 ;;      Params:         6       0       0       0       0       0       0
  8205 ;;      Locals:         0       6       0       0       0       0       0
  8206 ;;      Temps:          0       3       0       0       0       0       0
  8207 ;;      Totals:         6       9       0       0       0       0       0
  8208 ;;Total ram usage:       15 bytes
  8209 ;; Hardware stack levels used:    1
  8210 ;; Hardware stack levels required when called:    3
  8211 ;; This function calls:
  8212 ;;		___ftpack
  8213 ;; This function is called by:
  8214 ;;		_temperatureMeasurementC
  8215 ;;		_temperatureMeasurementF
  8216 ;;		_carbonMeasurement
  8217 ;;		_salinityMeasurement
  8218 ;; This function uses a non-reentrant model
  8219 ;;
  8220                           
  8221                           	psect	text33
  8222  002804                     __ptext33:
  8223                           	opt stack 0
  8224  002804                     ___ftdiv:
  8225                           	opt stack 26
  8226                           
  8227                           ;incstack = 0
  8228  002804  C035  F060         	movff	___ftdiv@f1+2,??___ftdiv
  8229  002808  0100               	movlb	0	; () banked
  8230  00280A  6B61               	clrf	(??___ftdiv+1)& (0+255),b
  8231  00280C  6B62               	clrf	(??___ftdiv+2)& (0+255),b
  8232  00280E  3434               	rlcf	___ftdiv@f1+1,w,c
  8233  002810  0100               	movlb	0	; () banked
  8234  002812  3760               	rlcf	??___ftdiv& (0+255),f,b
  8235  002814  E301               	bnc	u5041
  8236  002816  8161               	bsf	(??___ftdiv+1)& (0+255),0,b
  8237  002818                     u5041:
  8238  002818  0100               	movlb	0	; () banked
  8239  00281A  5160               	movf	??___ftdiv& (0+255),w,b
  8240  00281C  0100               	movlb	0	; () banked
  8241  00281E  6F67               	movwf	___ftdiv@exp& (0+255),b
  8242  002820  0100               	movlb	0	; () banked
  8243  002822  5167               	movf	___ftdiv@exp& (0+255),w,b
  8244  002824  A4D8               	btfss	status,2,c
  8245  002826  D007               	goto	l735
  8246                           
  8247                           ; BSR set to: 0
  8248  002828  0E00               	movlw	0
  8249  00282A  6E33               	movwf	?___ftdiv,c
  8250  00282C  0E00               	movlw	0
  8251  00282E  6E34               	movwf	?___ftdiv+1,c
  8252  002830  0E00               	movlw	0
  8253  002832  6E35               	movwf	?___ftdiv+2,c
  8254                           
  8255                           ; BSR set to: 0
  8256  002834  0012               	return	
  8257  002836                     l735:
  8258                           
  8259                           ; BSR set to: 0
  8260                           
  8261                           ; BSR set to: 0
  8262  002836  C038  F060         	movff	___ftdiv@f2+2,??___ftdiv
  8263  00283A  0100               	movlb	0	; () banked
  8264  00283C  6B61               	clrf	(??___ftdiv+1)& (0+255),b
  8265  00283E  6B62               	clrf	(??___ftdiv+2)& (0+255),b
  8266  002840  3437               	rlcf	___ftdiv@f2+1,w,c
  8267  002842  0100               	movlb	0	; () banked
  8268  002844  3760               	rlcf	??___ftdiv& (0+255),f,b
  8269  002846  E301               	bnc	u5061
  8270  002848  8161               	bsf	(??___ftdiv+1)& (0+255),0,b
  8271  00284A                     u5061:
  8272  00284A  0100               	movlb	0	; () banked
  8273  00284C  5160               	movf	??___ftdiv& (0+255),w,b
  8274  00284E  0100               	movlb	0	; () banked
  8275  002850  6F68               	movwf	___ftdiv@sign& (0+255),b
  8276  002852  0100               	movlb	0	; () banked
  8277  002854  5168               	movf	___ftdiv@sign& (0+255),w,b
  8278  002856  A4D8               	btfss	status,2,c
  8279  002858  D007               	goto	l737
  8280                           
  8281                           ; BSR set to: 0
  8282  00285A  0E00               	movlw	0
  8283  00285C  6E33               	movwf	?___ftdiv,c
  8284  00285E  0E00               	movlw	0
  8285  002860  6E34               	movwf	?___ftdiv+1,c
  8286  002862  0E00               	movlw	0
  8287  002864  6E35               	movwf	?___ftdiv+2,c
  8288                           
  8289                           ; BSR set to: 0
  8290  002866  0012               	return	
  8291  002868                     l737:
  8292                           
  8293                           ; BSR set to: 0
  8294                           
  8295                           ; BSR set to: 0
  8296  002868  0E00               	movlw	0
  8297  00286A  0100               	movlb	0	; () banked
  8298  00286C  6F64               	movwf	___ftdiv@f3& (0+255),b
  8299  00286E  0E00               	movlw	0
  8300  002870  0100               	movlb	0	; () banked
  8301  002872  6F65               	movwf	(___ftdiv@f3+1)& (0+255),b
  8302  002874  0E00               	movlw	0
  8303  002876  0100               	movlb	0	; () banked
  8304  002878  6F66               	movwf	(___ftdiv@f3+2)& (0+255),b
  8305                           
  8306                           ; BSR set to: 0
  8307  00287A  0100               	movlb	0	; () banked
  8308  00287C  5168               	movf	___ftdiv@sign& (0+255),w,b
  8309  00287E  0F89               	addlw	137
  8310  002880  0100               	movlb	0	; () banked
  8311  002882  5F67               	subwf	___ftdiv@exp& (0+255),f,b
  8312                           
  8313                           ; BSR set to: 0
  8314  002884  C035  F068         	movff	___ftdiv@f1+2,___ftdiv@sign
  8315                           
  8316                           ; BSR set to: 0
  8317  002888  5038               	movf	___ftdiv@f2+2,w,c
  8318  00288A  0100               	movlb	0	; () banked
  8319  00288C  1B68               	xorwf	___ftdiv@sign& (0+255),f,b
  8320                           
  8321                           ; BSR set to: 0
  8322  00288E  0E80               	movlw	128
  8323  002890  0100               	movlb	0	; () banked
  8324  002892  1768               	andwf	___ftdiv@sign& (0+255),f,b
  8325                           
  8326                           ; BSR set to: 0
  8327  002894  8E34               	bsf	___ftdiv@f1+1,7,c
  8328                           
  8329                           ; BSR set to: 0
  8330  002896  0EFF               	movlw	255
  8331  002898  1633               	andwf	___ftdiv@f1,f,c
  8332  00289A  0EFF               	movlw	255
  8333  00289C  1634               	andwf	___ftdiv@f1+1,f,c
  8334  00289E  0E00               	movlw	0
  8335  0028A0  1635               	andwf	___ftdiv@f1+2,f,c
  8336                           
  8337                           ; BSR set to: 0
  8338  0028A2  8E37               	bsf	___ftdiv@f2+1,7,c
  8339                           
  8340                           ; BSR set to: 0
  8341  0028A4  0EFF               	movlw	255
  8342  0028A6  1636               	andwf	___ftdiv@f2,f,c
  8343  0028A8  0EFF               	movlw	255
  8344  0028AA  1637               	andwf	___ftdiv@f2+1,f,c
  8345  0028AC  0E00               	movlw	0
  8346  0028AE  1638               	andwf	___ftdiv@f2+2,f,c
  8347                           
  8348                           ; BSR set to: 0
  8349  0028B0  0E18               	movlw	24
  8350  0028B2  0100               	movlb	0	; () banked
  8351  0028B4  6F63               	movwf	___ftdiv@cntr& (0+255),b
  8352  0028B6                     
  8353                           ; BSR set to: 0
  8354                           
  8355                           ; BSR set to: 0
  8356  0028B6  0100               	movlb	0	; () banked
  8357  0028B8  90D8               	bcf	status,0,c
  8358  0028BA  3764               	rlcf	___ftdiv@f3& (0+255),f,b
  8359  0028BC  3765               	rlcf	(___ftdiv@f3+1)& (0+255),f,b
  8360  0028BE  3766               	rlcf	(___ftdiv@f3+2)& (0+255),f,b
  8361                           
  8362                           ; BSR set to: 0
  8363  0028C0  5036               	movf	___ftdiv@f2,w,c
  8364  0028C2  5C33               	subwf	___ftdiv@f1,w,c
  8365  0028C4  5037               	movf	___ftdiv@f2+1,w,c
  8366  0028C6  5834               	subwfb	___ftdiv@f1+1,w,c
  8367  0028C8  5038               	movf	___ftdiv@f2+2,w,c
  8368  0028CA  5835               	subwfb	___ftdiv@f1+2,w,c
  8369  0028CC  A0D8               	btfss	status,0,c
  8370  0028CE  D008               	goto	l739
  8371                           
  8372                           ; BSR set to: 0
  8373  0028D0  5036               	movf	___ftdiv@f2,w,c
  8374  0028D2  5E33               	subwf	___ftdiv@f1,f,c
  8375  0028D4  5037               	movf	___ftdiv@f2+1,w,c
  8376  0028D6  5A34               	subwfb	___ftdiv@f1+1,f,c
  8377  0028D8  5038               	movf	___ftdiv@f2+2,w,c
  8378  0028DA  5A35               	subwfb	___ftdiv@f1+2,f,c
  8379                           
  8380                           ; BSR set to: 0
  8381  0028DC  0100               	movlb	0	; () banked
  8382  0028DE  8164               	bsf	___ftdiv@f3& (0+255),0,b
  8383  0028E0                     l739:
  8384                           
  8385                           ; BSR set to: 0
  8386  0028E0  90D8               	bcf	status,0,c
  8387  0028E2  3633               	rlcf	___ftdiv@f1,f,c
  8388  0028E4  3634               	rlcf	___ftdiv@f1+1,f,c
  8389  0028E6  3635               	rlcf	___ftdiv@f1+2,f,c
  8390                           
  8391                           ; BSR set to: 0
  8392  0028E8  0100               	movlb	0	; () banked
  8393  0028EA  2F63               	decfsz	___ftdiv@cntr& (0+255),f,b
  8394  0028EC  D7E4               	goto	l738
  8395                           
  8396                           ; BSR set to: 0
  8397                           
  8398                           ; BSR set to: 0
  8399  0028EE  C064  F013         	movff	___ftdiv@f3,___ftpack@arg
  8400  0028F2  C065  F014         	movff	___ftdiv@f3+1,___ftpack@arg+1
  8401  0028F6  C066  F015         	movff	___ftdiv@f3+2,___ftpack@arg+2
  8402  0028FA  C067  F016         	movff	___ftdiv@exp,___ftpack@exp
  8403  0028FE  C068  F017         	movff	___ftdiv@sign,___ftpack@sign
  8404  002902  ECEA  F014         	call	___ftpack	;wreg free
  8405  002906  C013  F033         	movff	?___ftpack,?___ftdiv
  8406  00290A  C014  F034         	movff	?___ftpack+1,?___ftdiv+1
  8407  00290E  C015  F035         	movff	?___ftpack+2,?___ftdiv+2
  8408  002912  0012               	return	
  8409  002914                     __end_of___ftdiv:
  8410                           	opt stack 0
  8411                           tblptru	equ	0xFF8
  8412                           tblptrh	equ	0xFF7
  8413                           tblptrl	equ	0xFF6
  8414                           tablat	equ	0xFF5
  8415                           prodh	equ	0xFF4
  8416                           prodl	equ	0xFF3
  8417                           intcon	equ	0xFF2
  8418                           intcon2	equ	0xFF1
  8419                           intcon3	equ	0xFF0
  8420                           postinc0	equ	0xFEE
  8421                           wreg	equ	0xFE8
  8422                           indf2	equ	0xFDF
  8423                           postinc2	equ	0xFDE
  8424                           postdec2	equ	0xFDD
  8425                           fsr2h	equ	0xFDA
  8426                           fsr2l	equ	0xFD9
  8427                           status	equ	0xFD8
  8428                           
  8429 ;; *************** function ___ftadd *****************
  8430 ;; Defined at:
  8431 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\ftadd.c"
  8432 ;; Parameters:    Size  Location     Type
  8433 ;;  f1              3   38[COMRAM] float 
  8434 ;;  f2              3   41[COMRAM] float 
  8435 ;; Auto vars:     Size  Location     Type
  8436 ;;  exp1            1   49[COMRAM] unsigned char 
  8437 ;;  exp2            1   48[COMRAM] unsigned char 
  8438 ;;  sign            1   47[COMRAM] unsigned char 
  8439 ;; Return value:  Size  Location     Type
  8440 ;;                  3   38[COMRAM] float 
  8441 ;; Registers used:
  8442 ;;		wreg, status,2, status,0, cstack
  8443 ;; Tracked objects:
  8444 ;;		On entry : 0/0
  8445 ;;		On exit  : 0/0
  8446 ;;		Unchanged: 0/0
  8447 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8448 ;;      Params:         6       0       0       0       0       0       0
  8449 ;;      Locals:         3       0       0       0       0       0       0
  8450 ;;      Temps:          3       0       0       0       0       0       0
  8451 ;;      Totals:        12       0       0       0       0       0       0
  8452 ;;Total ram usage:       12 bytes
  8453 ;; Hardware stack levels used:    1
  8454 ;; Hardware stack levels required when called:    3
  8455 ;; This function calls:
  8456 ;;		___ftpack
  8457 ;; This function is called by:
  8458 ;;		_temperatureMeasurementC
  8459 ;;		_temperatureMeasurementF
  8460 ;;		_carbonMeasurement
  8461 ;;		_salinityMeasurement
  8462 ;;		_printf
  8463 ;;		___ftsub
  8464 ;; This function uses a non-reentrant model
  8465 ;;
  8466                           
  8467                           	psect	text34
  8468  001E12                     __ptext34:
  8469                           	opt stack 0
  8470  001E12                     ___ftadd:
  8471                           	opt stack 26
  8472                           
  8473                           ;incstack = 0
  8474  001E12  C029  F02D         	movff	___ftadd@f1+2,??___ftadd
  8475  001E16  6A2E               	clrf	(??___ftadd+1)& (0+255),c
  8476  001E18  6A2F               	clrf	(??___ftadd+2)& (0+255),c
  8477  001E1A  3428               	rlcf	___ftadd@f1+1,w,c
  8478  001E1C  362D               	rlcf	??___ftadd& (0+255),f,c
  8479  001E1E  E301               	bnc	u4111
  8480  001E20  802E               	bsf	(??___ftadd+1)& (0+255),0,c
  8481  001E22                     u4111:
  8482  001E22  502D               	movf	??___ftadd,w,c
  8483  001E24  6E32               	movwf	___ftadd@exp1,c
  8484  001E26  C02C  F02D         	movff	___ftadd@f2+2,??___ftadd
  8485  001E2A  6A2E               	clrf	(??___ftadd+1)& (0+255),c
  8486  001E2C  6A2F               	clrf	(??___ftadd+2)& (0+255),c
  8487  001E2E  342B               	rlcf	___ftadd@f2+1,w,c
  8488  001E30  362D               	rlcf	??___ftadd& (0+255),f,c
  8489  001E32  E301               	bnc	u4121
  8490  001E34  802E               	bsf	(??___ftadd+1)& (0+255),0,c
  8491  001E36                     u4121:
  8492  001E36  502D               	movf	??___ftadd,w,c
  8493  001E38  6E31               	movwf	___ftadd@exp2,c
  8494  001E3A  5032               	movf	___ftadd@exp1,w,c
  8495  001E3C  B4D8               	btfsc	status,2,c
  8496  001E3E  D00B               	goto	u4150
  8497  001E40  5031               	movf	___ftadd@exp2,w,c
  8498  001E42  5C32               	subwf	___ftadd@exp1,w,c
  8499  001E44  B0D8               	btfsc	status,0,c
  8500  001E46  D00E               	goto	l702
  8501  001E48  5032               	movf	___ftadd@exp1,w,c
  8502  001E4A  0800               	sublw	0
  8503  001E4C  2431               	addwf	___ftadd@exp2,w,c
  8504  001E4E  6E2D               	movwf	??___ftadd& (0+255),c
  8505  001E50  0E18               	movlw	24
  8506  001E52  642D               	cpfsgt	??___ftadd,c
  8507  001E54  D007               	goto	l702
  8508  001E56                     u4150:
  8509  001E56  C02A  F027         	movff	___ftadd@f2,?___ftadd
  8510  001E5A  C02B  F028         	movff	___ftadd@f2+1,?___ftadd+1
  8511  001E5E  C02C  F029         	movff	___ftadd@f2+2,?___ftadd+2
  8512  001E62  0012               	return	
  8513  001E64                     l702:
  8514  001E64  5031               	movf	___ftadd@exp2,w,c
  8515  001E66  B4D8               	btfsc	status,2,c
  8516  001E68  D00B               	goto	u4180
  8517  001E6A  5032               	movf	___ftadd@exp1,w,c
  8518  001E6C  5C31               	subwf	___ftadd@exp2,w,c
  8519  001E6E  B0D8               	btfsc	status,0,c
  8520  001E70  D00E               	goto	l706
  8521  001E72  5031               	movf	___ftadd@exp2,w,c
  8522  001E74  0800               	sublw	0
  8523  001E76  2432               	addwf	___ftadd@exp1,w,c
  8524  001E78  6E2D               	movwf	??___ftadd& (0+255),c
  8525  001E7A  0E18               	movlw	24
  8526  001E7C  642D               	cpfsgt	??___ftadd,c
  8527  001E7E  D007               	goto	l706
  8528  001E80                     u4180:
  8529  001E80  C027  F027         	movff	___ftadd@f1,?___ftadd
  8530  001E84  C028  F028         	movff	___ftadd@f1+1,?___ftadd+1
  8531  001E88  C029  F029         	movff	___ftadd@f1+2,?___ftadd+2
  8532  001E8C  0012               	return	
  8533  001E8E                     l706:
  8534  001E8E  0E06               	movlw	6
  8535  001E90  6E30               	movwf	___ftadd@sign,c
  8536  001E92  BE29               	btfsc	___ftadd@f1+2,7,c
  8537  001E94  8E30               	bsf	___ftadd@sign,7,c
  8538  001E96  BE2C               	btfsc	___ftadd@f2+2,7,c
  8539  001E98  8C30               	bsf	___ftadd@sign,6,c
  8540  001E9A  8E28               	bsf	___ftadd@f1+1,7,c
  8541  001E9C  0EFF               	movlw	255
  8542  001E9E  1627               	andwf	___ftadd@f1,f,c
  8543  001EA0  0EFF               	movlw	255
  8544  001EA2  1628               	andwf	___ftadd@f1+1,f,c
  8545  001EA4  0E00               	movlw	0
  8546  001EA6  1629               	andwf	___ftadd@f1+2,f,c
  8547  001EA8  8E2B               	bsf	___ftadd@f2+1,7,c
  8548  001EAA  0EFF               	movlw	255
  8549  001EAC  162A               	andwf	___ftadd@f2,f,c
  8550  001EAE  0EFF               	movlw	255
  8551  001EB0  162B               	andwf	___ftadd@f2+1,f,c
  8552  001EB2  0E00               	movlw	0
  8553  001EB4  162C               	andwf	___ftadd@f2+2,f,c
  8554  001EB6  5031               	movf	___ftadd@exp2,w,c
  8555  001EB8  5C32               	subwf	___ftadd@exp1,w,c
  8556  001EBA  B0D8               	btfsc	status,0,c
  8557  001EBC  D01B               	goto	l711
  8558  001EBE                     u4210:
  8559  001EBE  90D8               	bcf	status,0,c
  8560  001EC0  362A               	rlcf	___ftadd@f2,f,c
  8561  001EC2  362B               	rlcf	___ftadd@f2+1,f,c
  8562  001EC4  362C               	rlcf	___ftadd@f2+2,f,c
  8563  001EC6  0631               	decf	___ftadd@exp2,f,c
  8564  001EC8  5032               	movf	___ftadd@exp1,w,c
  8565  001ECA  1831               	xorwf	___ftadd@exp2,w,c
  8566  001ECC  B4D8               	btfsc	status,2,c
  8567  001ECE  D00D               	goto	l716
  8568  001ED0  0630               	decf	___ftadd@sign,f,c
  8569  001ED2  C030  F02D         	movff	___ftadd@sign,??___ftadd
  8570  001ED6  0E07               	movlw	7
  8571  001ED8  162D               	andwf	??___ftadd,f,c
  8572  001EDA  B4D8               	btfsc	status,2,c
  8573  001EDC  D006               	goto	l716
  8574  001EDE  D7EF               	goto	u4210
  8575  001EE0  90D8               	bcf	status,0,c
  8576  001EE2  3229               	rrcf	___ftadd@f1+2,f,c
  8577  001EE4  3228               	rrcf	___ftadd@f1+1,f,c
  8578  001EE6  3227               	rrcf	___ftadd@f1,f,c
  8579  001EE8  2A32               	incf	___ftadd@exp1,f,c
  8580  001EEA                     l716:
  8581  001EEA  5031               	movf	___ftadd@exp2,w,c
  8582  001EEC  1832               	xorwf	___ftadd@exp1,w,c
  8583  001EEE  B4D8               	btfsc	status,2,c
  8584  001EF0  D01F               	goto	u4280
  8585  001EF2  D7F6               	goto	l717
  8586  001EF4                     l711:
  8587  001EF4  5032               	movf	___ftadd@exp1,w,c
  8588  001EF6  5C31               	subwf	___ftadd@exp2,w,c
  8589  001EF8  B0D8               	btfsc	status,0,c
  8590  001EFA  D01A               	goto	u4280
  8591  001EFC                     u4250:
  8592  001EFC  90D8               	bcf	status,0,c
  8593  001EFE  3627               	rlcf	___ftadd@f1,f,c
  8594  001F00  3628               	rlcf	___ftadd@f1+1,f,c
  8595  001F02  3629               	rlcf	___ftadd@f1+2,f,c
  8596  001F04  0632               	decf	___ftadd@exp1,f,c
  8597  001F06  5032               	movf	___ftadd@exp1,w,c
  8598  001F08  1831               	xorwf	___ftadd@exp2,w,c
  8599  001F0A  B4D8               	btfsc	status,2,c
  8600  001F0C  D00D               	goto	l725
  8601  001F0E  0630               	decf	___ftadd@sign,f,c
  8602  001F10  C030  F02D         	movff	___ftadd@sign,??___ftadd
  8603  001F14  0E07               	movlw	7
  8604  001F16  162D               	andwf	??___ftadd,f,c
  8605  001F18  B4D8               	btfsc	status,2,c
  8606  001F1A  D006               	goto	l725
  8607  001F1C  D7EF               	goto	u4250
  8608  001F1E  90D8               	bcf	status,0,c
  8609  001F20  322C               	rrcf	___ftadd@f2+2,f,c
  8610  001F22  322B               	rrcf	___ftadd@f2+1,f,c
  8611  001F24  322A               	rrcf	___ftadd@f2,f,c
  8612  001F26  2A31               	incf	___ftadd@exp2,f,c
  8613  001F28                     l725:
  8614  001F28  5031               	movf	___ftadd@exp2,w,c
  8615  001F2A  1832               	xorwf	___ftadd@exp1,w,c
  8616  001F2C  A4D8               	btfss	status,2,c
  8617  001F2E  D7F7               	goto	l726
  8618  001F30                     u4280:
  8619  001F30  AE30               	btfss	___ftadd@sign,7,c
  8620  001F32  D00C               	goto	l728
  8621  001F34  0EFF               	movlw	255
  8622  001F36  1A27               	xorwf	___ftadd@f1,f,c
  8623  001F38  0EFF               	movlw	255
  8624  001F3A  1A28               	xorwf	___ftadd@f1+1,f,c
  8625  001F3C  0EFF               	movlw	255
  8626  001F3E  1A29               	xorwf	___ftadd@f1+2,f,c
  8627  001F40  0E01               	movlw	1
  8628  001F42  2627               	addwf	___ftadd@f1,f,c
  8629  001F44  0E00               	movlw	0
  8630  001F46  2228               	addwfc	___ftadd@f1+1,f,c
  8631  001F48  0E00               	movlw	0
  8632  001F4A  2229               	addwfc	___ftadd@f1+2,f,c
  8633  001F4C                     l728:
  8634  001F4C  AC30               	btfss	___ftadd@sign,6,c
  8635  001F4E  D00C               	goto	l729
  8636  001F50  0EFF               	movlw	255
  8637  001F52  1A2A               	xorwf	___ftadd@f2,f,c
  8638  001F54  0EFF               	movlw	255
  8639  001F56  1A2B               	xorwf	___ftadd@f2+1,f,c
  8640  001F58  0EFF               	movlw	255
  8641  001F5A  1A2C               	xorwf	___ftadd@f2+2,f,c
  8642  001F5C  0E01               	movlw	1
  8643  001F5E  262A               	addwf	___ftadd@f2,f,c
  8644  001F60  0E00               	movlw	0
  8645  001F62  222B               	addwfc	___ftadd@f2+1,f,c
  8646  001F64  0E00               	movlw	0
  8647  001F66  222C               	addwfc	___ftadd@f2+2,f,c
  8648  001F68                     l729:
  8649  001F68  0E00               	movlw	0
  8650  001F6A  6E30               	movwf	___ftadd@sign,c
  8651  001F6C  5027               	movf	___ftadd@f1,w,c
  8652  001F6E  262A               	addwf	___ftadd@f2,f,c
  8653  001F70  5028               	movf	___ftadd@f1+1,w,c
  8654  001F72  222B               	addwfc	___ftadd@f2+1,f,c
  8655  001F74  5029               	movf	___ftadd@f1+2,w,c
  8656  001F76  222C               	addwfc	___ftadd@f2+2,f,c
  8657  001F78  AE2C               	btfss	___ftadd@f2+2,7,c
  8658  001F7A  D00E               	goto	l730
  8659  001F7C  0EFF               	movlw	255
  8660  001F7E  1A2A               	xorwf	___ftadd@f2,f,c
  8661  001F80  0EFF               	movlw	255
  8662  001F82  1A2B               	xorwf	___ftadd@f2+1,f,c
  8663  001F84  0EFF               	movlw	255
  8664  001F86  1A2C               	xorwf	___ftadd@f2+2,f,c
  8665  001F88  0E01               	movlw	1
  8666  001F8A  262A               	addwf	___ftadd@f2,f,c
  8667  001F8C  0E00               	movlw	0
  8668  001F8E  222B               	addwfc	___ftadd@f2+1,f,c
  8669  001F90  0E00               	movlw	0
  8670  001F92  222C               	addwfc	___ftadd@f2+2,f,c
  8671  001F94  0E01               	movlw	1
  8672  001F96  6E30               	movwf	___ftadd@sign,c
  8673  001F98                     l730:
  8674  001F98  C02A  F013         	movff	___ftadd@f2,___ftpack@arg
  8675  001F9C  C02B  F014         	movff	___ftadd@f2+1,___ftpack@arg+1
  8676  001FA0  C02C  F015         	movff	___ftadd@f2+2,___ftpack@arg+2
  8677  001FA4  C032  F016         	movff	___ftadd@exp1,___ftpack@exp
  8678  001FA8  C030  F017         	movff	___ftadd@sign,___ftpack@sign
  8679  001FAC  ECEA  F014         	call	___ftpack	;wreg free
  8680  001FB0  C013  F027         	movff	?___ftpack,?___ftadd
  8681  001FB4  C014  F028         	movff	?___ftpack+1,?___ftadd+1
  8682  001FB8  C015  F029         	movff	?___ftpack+2,?___ftadd+2
  8683  001FBC  0012               	return	
  8684  001FBE                     __end_of___ftadd:
  8685                           	opt stack 0
  8686                           tblptru	equ	0xFF8
  8687                           tblptrh	equ	0xFF7
  8688                           tblptrl	equ	0xFF6
  8689                           tablat	equ	0xFF5
  8690                           prodh	equ	0xFF4
  8691                           prodl	equ	0xFF3
  8692                           intcon	equ	0xFF2
  8693                           intcon2	equ	0xFF1
  8694                           intcon3	equ	0xFF0
  8695                           postinc0	equ	0xFEE
  8696                           wreg	equ	0xFE8
  8697                           indf2	equ	0xFDF
  8698                           postinc2	equ	0xFDE
  8699                           postdec2	equ	0xFDD
  8700                           fsr2h	equ	0xFDA
  8701                           fsr2l	equ	0xFD9
  8702                           status	equ	0xFD8
  8703                           
  8704 ;; *************** function ___ftpack *****************
  8705 ;; Defined at:
  8706 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\float.c"
  8707 ;; Parameters:    Size  Location     Type
  8708 ;;  arg             3   18[COMRAM] unsigned um
  8709 ;;  exp             1   21[COMRAM] unsigned char 
  8710 ;;  sign            1   22[COMRAM] unsigned char 
  8711 ;; Auto vars:     Size  Location     Type
  8712 ;;		None
  8713 ;; Return value:  Size  Location     Type
  8714 ;;                  3   18[COMRAM] float 
  8715 ;; Registers used:
  8716 ;;		wreg, status,2, status,0
  8717 ;; Tracked objects:
  8718 ;;		On entry : 0/0
  8719 ;;		On exit  : 0/0
  8720 ;;		Unchanged: 0/0
  8721 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8722 ;;      Params:         5       0       0       0       0       0       0
  8723 ;;      Locals:         0       0       0       0       0       0       0
  8724 ;;      Temps:          3       0       0       0       0       0       0
  8725 ;;      Totals:         8       0       0       0       0       0       0
  8726 ;;Total ram usage:        8 bytes
  8727 ;; Hardware stack levels used:    1
  8728 ;; Hardware stack levels required when called:    2
  8729 ;; This function calls:
  8730 ;;		Nothing
  8731 ;; This function is called by:
  8732 ;;		___awtoft
  8733 ;;		___ftadd
  8734 ;;		___ftdiv
  8735 ;;		___ftmul
  8736 ;;		___lltoft
  8737 ;;		___lwtoft
  8738 ;; This function uses a non-reentrant model
  8739 ;;
  8740                           
  8741                           	psect	text35
  8742  0029D4                     __ptext35:
  8743                           	opt stack 0
  8744  0029D4                     ___ftpack:
  8745                           	opt stack 26
  8746                           
  8747                           ;incstack = 0
  8748  0029D4  5016               	movf	___ftpack@exp,w,c
  8749  0029D6  B4D8               	btfsc	status,2,c
  8750  0029D8  D005               	goto	u4040
  8751  0029DA  5013               	movf	___ftpack@arg,w,c
  8752  0029DC  1014               	iorwf	___ftpack@arg+1,w,c
  8753  0029DE  1015               	iorwf	___ftpack@arg+2,w,c
  8754  0029E0  A4D8               	btfss	status,2,c
  8755  0029E2  D00C               	goto	l671
  8756  0029E4                     u4040:
  8757  0029E4  0E00               	movlw	0
  8758  0029E6  6E13               	movwf	?___ftpack,c
  8759  0029E8  0E00               	movlw	0
  8760  0029EA  6E14               	movwf	?___ftpack+1,c
  8761  0029EC  0E00               	movlw	0
  8762  0029EE  6E15               	movwf	?___ftpack+2,c
  8763  0029F0  0012               	return	
  8764  0029F2  2A16               	incf	___ftpack@exp,f,c
  8765  0029F4  90D8               	bcf	status,0,c
  8766  0029F6  3215               	rrcf	___ftpack@arg+2,f,c
  8767  0029F8  3214               	rrcf	___ftpack@arg+1,f,c
  8768  0029FA  3213               	rrcf	___ftpack@arg,f,c
  8769  0029FC                     l671:
  8770  0029FC  0E00               	movlw	0
  8771  0029FE  1413               	andwf	___ftpack@arg,w,c
  8772  002A00  6E18               	movwf	??___ftpack& (0+255),c
  8773  002A02  0E00               	movlw	0
  8774  002A04  1414               	andwf	___ftpack@arg+1,w,c
  8775  002A06  6E19               	movwf	(??___ftpack+1)& (0+255),c
  8776  002A08  0EFE               	movlw	254
  8777  002A0A  1415               	andwf	___ftpack@arg+2,w,c
  8778  002A0C  6E1A               	movwf	(??___ftpack+2)& (0+255),c
  8779  002A0E  5018               	movf	??___ftpack,w,c
  8780  002A10  1019               	iorwf	??___ftpack+1,w,c
  8781  002A12  101A               	iorwf	??___ftpack+2,w,c
  8782  002A14  B4D8               	btfsc	status,2,c
  8783  002A16  D00C               	goto	l674
  8784  002A18  D7EC               	goto	l672
  8785  002A1A  2A16               	incf	___ftpack@exp,f,c
  8786  002A1C  0E01               	movlw	1
  8787  002A1E  2613               	addwf	___ftpack@arg,f,c
  8788  002A20  0E00               	movlw	0
  8789  002A22  2214               	addwfc	___ftpack@arg+1,f,c
  8790  002A24  0E00               	movlw	0
  8791  002A26  2215               	addwfc	___ftpack@arg+2,f,c
  8792  002A28  90D8               	bcf	status,0,c
  8793  002A2A  3215               	rrcf	___ftpack@arg+2,f,c
  8794  002A2C  3214               	rrcf	___ftpack@arg+1,f,c
  8795  002A2E  3213               	rrcf	___ftpack@arg,f,c
  8796  002A30                     l674:
  8797  002A30  0E00               	movlw	0
  8798  002A32  1413               	andwf	___ftpack@arg,w,c
  8799  002A34  6E18               	movwf	??___ftpack& (0+255),c
  8800  002A36  0E00               	movlw	0
  8801  002A38  1414               	andwf	___ftpack@arg+1,w,c
  8802  002A3A  6E19               	movwf	(??___ftpack+1)& (0+255),c
  8803  002A3C  0EFF               	movlw	255
  8804  002A3E  1415               	andwf	___ftpack@arg+2,w,c
  8805  002A40  6E1A               	movwf	(??___ftpack+2)& (0+255),c
  8806  002A42  5018               	movf	??___ftpack,w,c
  8807  002A44  1019               	iorwf	??___ftpack+1,w,c
  8808  002A46  101A               	iorwf	??___ftpack+2,w,c
  8809  002A48  B4D8               	btfsc	status,2,c
  8810  002A4A  D006               	goto	l677
  8811  002A4C  D7E6               	goto	l675
  8812  002A4E  0616               	decf	___ftpack@exp,f,c
  8813  002A50  90D8               	bcf	status,0,c
  8814  002A52  3613               	rlcf	___ftpack@arg,f,c
  8815  002A54  3614               	rlcf	___ftpack@arg+1,f,c
  8816  002A56  3615               	rlcf	___ftpack@arg+2,f,c
  8817  002A58                     l677:
  8818  002A58  BE14               	btfsc	___ftpack@arg+1,7,c
  8819  002A5A  D003               	goto	u4080
  8820  002A5C  0E02               	movlw	2
  8821  002A5E  6016               	cpfslt	___ftpack@exp,c
  8822  002A60  D7F6               	goto	l678
  8823  002A62                     u4080:
  8824  002A62  A016               	btfss	___ftpack@exp,0,c
  8825  002A64  9E14               	bcf	___ftpack@arg+1,7,c
  8826  002A66  90D8               	bcf	status,0,c
  8827  002A68  3216               	rrcf	___ftpack@exp,f,c
  8828  002A6A  5016               	movf	___ftpack@exp,w,c
  8829  002A6C  1215               	iorwf	___ftpack@arg+2,f,c
  8830  002A6E  5017               	movf	___ftpack@sign,w,c
  8831  002A70  A4D8               	btfss	status,2,c
  8832  002A72  8E15               	bsf	___ftpack@arg+2,7,c
  8833  002A74  C013  F013         	movff	___ftpack@arg,?___ftpack
  8834  002A78  C014  F014         	movff	___ftpack@arg+1,?___ftpack+1
  8835  002A7C  C015  F015         	movff	___ftpack@arg+2,?___ftpack+2
  8836  002A80  0012               	return	
  8837  002A82                     __end_of___ftpack:
  8838                           	opt stack 0
  8839                           tblptru	equ	0xFF8
  8840                           tblptrh	equ	0xFF7
  8841                           tblptrl	equ	0xFF6
  8842                           tablat	equ	0xFF5
  8843                           prodh	equ	0xFF4
  8844                           prodl	equ	0xFF3
  8845                           intcon	equ	0xFF2
  8846                           intcon2	equ	0xFF1
  8847                           intcon3	equ	0xFF0
  8848                           postinc0	equ	0xFEE
  8849                           wreg	equ	0xFE8
  8850                           indf2	equ	0xFDF
  8851                           postinc2	equ	0xFDE
  8852                           postdec2	equ	0xFDD
  8853                           fsr2h	equ	0xFDA
  8854                           fsr2l	equ	0xFD9
  8855                           status	equ	0xFD8
  8856                           
  8857 ;; *************** function _SYSTEM_Initialize *****************
  8858 ;; Defined at:
  8859 ;;		line 111 in file "mcc_generated_files/mcc.c"
  8860 ;; Parameters:    Size  Location     Type
  8861 ;;		None
  8862 ;; Auto vars:     Size  Location     Type
  8863 ;;		None
  8864 ;; Return value:  Size  Location     Type
  8865 ;;                  1    wreg      void 
  8866 ;; Registers used:
  8867 ;;		wreg, status,2, cstack
  8868 ;; Tracked objects:
  8869 ;;		On entry : 0/0
  8870 ;;		On exit  : 0/0
  8871 ;;		Unchanged: 0/0
  8872 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8873 ;;      Params:         0       0       0       0       0       0       0
  8874 ;;      Locals:         0       0       0       0       0       0       0
  8875 ;;      Temps:          0       0       0       0       0       0       0
  8876 ;;      Totals:         0       0       0       0       0       0       0
  8877 ;;Total ram usage:        0 bytes
  8878 ;; Hardware stack levels used:    1
  8879 ;; Hardware stack levels required when called:    3
  8880 ;; This function calls:
  8881 ;;		_EUSART2_Initialize
  8882 ;;		_INTERRUPT_Initialize
  8883 ;;		_OSCILLATOR_Initialize
  8884 ;;		_PIN_MANAGER_Initialize
  8885 ;; This function is called by:
  8886 ;;		_main
  8887 ;; This function uses a non-reentrant model
  8888 ;;
  8889                           
  8890                           	psect	text36
  8891  0030F2                     __ptext36:
  8892                           	opt stack 0
  8893  0030F2                     _SYSTEM_Initialize:
  8894                           	opt stack 27
  8895                           
  8896                           ;mcc.c: 114: INTERRUPT_Initialize();
  8897                           
  8898                           ;incstack = 0
  8899  0030F2  EC8E  F018         	call	_INTERRUPT_Initialize	;wreg free
  8900                           
  8901                           ;mcc.c: 115: PIN_MANAGER_Initialize();
  8902  0030F6  ECEB  F017         	call	_PIN_MANAGER_Initialize	;wreg free
  8903                           
  8904                           ;mcc.c: 116: OSCILLATOR_Initialize();
  8905  0030FA  EC82  F018         	call	_OSCILLATOR_Initialize	;wreg free
  8906                           
  8907                           ;mcc.c: 117: EUSART2_Initialize();
  8908  0030FE  ECA2  F017         	call	_EUSART2_Initialize	;wreg free
  8909  003102  0012               	return		;funcret
  8910  003104                     __end_of_SYSTEM_Initialize:
  8911                           	opt stack 0
  8912                           tblptru	equ	0xFF8
  8913                           tblptrh	equ	0xFF7
  8914                           tblptrl	equ	0xFF6
  8915                           tablat	equ	0xFF5
  8916                           prodh	equ	0xFF4
  8917                           prodl	equ	0xFF3
  8918                           intcon	equ	0xFF2
  8919                           intcon2	equ	0xFF1
  8920                           intcon3	equ	0xFF0
  8921                           postinc0	equ	0xFEE
  8922                           wreg	equ	0xFE8
  8923                           indf2	equ	0xFDF
  8924                           postinc2	equ	0xFDE
  8925                           postdec2	equ	0xFDD
  8926                           fsr2h	equ	0xFDA
  8927                           fsr2l	equ	0xFD9
  8928                           status	equ	0xFD8
  8929                           
  8930 ;; *************** function _PIN_MANAGER_Initialize *****************
  8931 ;; Defined at:
  8932 ;;		line 52 in file "mcc_generated_files/pin_manager.c"
  8933 ;; Parameters:    Size  Location     Type
  8934 ;;		None
  8935 ;; Auto vars:     Size  Location     Type
  8936 ;;		None
  8937 ;; Return value:  Size  Location     Type
  8938 ;;                  1    wreg      void 
  8939 ;; Registers used:
  8940 ;;		wreg, status,2
  8941 ;; Tracked objects:
  8942 ;;		On entry : 0/0
  8943 ;;		On exit  : 0/0
  8944 ;;		Unchanged: 0/0
  8945 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8946 ;;      Params:         0       0       0       0       0       0       0
  8947 ;;      Locals:         0       0       0       0       0       0       0
  8948 ;;      Temps:          0       0       0       0       0       0       0
  8949 ;;      Totals:         0       0       0       0       0       0       0
  8950 ;;Total ram usage:        0 bytes
  8951 ;; Hardware stack levels used:    1
  8952 ;; Hardware stack levels required when called:    2
  8953 ;; This function calls:
  8954 ;;		Nothing
  8955 ;; This function is called by:
  8956 ;;		_SYSTEM_Initialize
  8957 ;; This function uses a non-reentrant model
  8958 ;;
  8959                           
  8960                           	psect	text37
  8961  002FD6                     __ptext37:
  8962                           	opt stack 0
  8963  002FD6                     _PIN_MANAGER_Initialize:
  8964                           	opt stack 27
  8965                           
  8966                           ;pin_manager.c: 57: LATA = 0x00;
  8967                           
  8968                           ;incstack = 0
  8969  002FD6  0E00               	movlw	0
  8970  002FD8  6E89               	movwf	3977,c	;volatile
  8971                           
  8972                           ;pin_manager.c: 58: LATB = 0x00;
  8973  002FDA  0E00               	movlw	0
  8974  002FDC  6E8A               	movwf	3978,c	;volatile
  8975                           
  8976                           ;pin_manager.c: 59: LATC = 0x00;
  8977  002FDE  0E00               	movlw	0
  8978  002FE0  6E8B               	movwf	3979,c	;volatile
  8979                           
  8980                           ;pin_manager.c: 64: TRISA = 0xFF;
  8981  002FE2  6892               	setf	3986,c	;volatile
  8982                           
  8983                           ;pin_manager.c: 65: TRISB = 0x9F;
  8984  002FE4  0E9F               	movlw	159
  8985  002FE6  6E93               	movwf	3987,c	;volatile
  8986                           
  8987                           ;pin_manager.c: 66: TRISC = 0xFF;
  8988  002FE8  6894               	setf	3988,c	;volatile
  8989                           
  8990                           ;pin_manager.c: 71: ANSELC = 0xFC;
  8991  002FEA  0EFC               	movlw	252
  8992  002FEC  010F               	movlb	15	; () banked
  8993  002FEE  6F3A               	movwf	58,b	;volatile
  8994                           
  8995                           ;pin_manager.c: 72: ANSELB = 0x3F;
  8996  002FF0  0E3F               	movlw	63
  8997  002FF2  010F               	movlb	15	; () banked
  8998  002FF4  6F39               	movwf	57,b	;volatile
  8999                           
  9000                           ;pin_manager.c: 73: ANSELA = 0x2F;
  9001  002FF6  0E2F               	movlw	47
  9002  002FF8  010F               	movlb	15	; () banked
  9003  002FFA  6F38               	movwf	56,b	;volatile
  9004                           
  9005                           ; BSR set to: 15
  9006                           ;pin_manager.c: 78: WPUB = 0xFF;
  9007  002FFC  6861               	setf	3937,c	;volatile
  9008                           
  9009                           ; BSR set to: 15
  9010                           ;pin_manager.c: 79: INTCON2bits.nRBPU = 0;
  9011  002FFE  9EF1               	bcf	intcon2,7,c	;volatile
  9012                           
  9013                           ; BSR set to: 15
  9014  003000  0012               	return		;funcret
  9015  003002                     __end_of_PIN_MANAGER_Initialize:
  9016                           	opt stack 0
  9017                           tblptru	equ	0xFF8
  9018                           tblptrh	equ	0xFF7
  9019                           tblptrl	equ	0xFF6
  9020                           tablat	equ	0xFF5
  9021                           prodh	equ	0xFF4
  9022                           prodl	equ	0xFF3
  9023                           intcon	equ	0xFF2
  9024                           intcon2	equ	0xFF1
  9025                           intcon3	equ	0xFF0
  9026                           postinc0	equ	0xFEE
  9027                           wreg	equ	0xFE8
  9028                           indf2	equ	0xFDF
  9029                           postinc2	equ	0xFDE
  9030                           postdec2	equ	0xFDD
  9031                           fsr2h	equ	0xFDA
  9032                           fsr2l	equ	0xFD9
  9033                           status	equ	0xFD8
  9034                           
  9035 ;; *************** function _OSCILLATOR_Initialize *****************
  9036 ;; Defined at:
  9037 ;;		line 120 in file "mcc_generated_files/mcc.c"
  9038 ;; Parameters:    Size  Location     Type
  9039 ;;		None
  9040 ;; Auto vars:     Size  Location     Type
  9041 ;;		None
  9042 ;; Return value:  Size  Location     Type
  9043 ;;                  1    wreg      void 
  9044 ;; Registers used:
  9045 ;;		wreg, status,2
  9046 ;; Tracked objects:
  9047 ;;		On entry : 0/0
  9048 ;;		On exit  : 0/0
  9049 ;;		Unchanged: 0/0
  9050 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9051 ;;      Params:         0       0       0       0       0       0       0
  9052 ;;      Locals:         0       0       0       0       0       0       0
  9053 ;;      Temps:          0       0       0       0       0       0       0
  9054 ;;      Totals:         0       0       0       0       0       0       0
  9055 ;;Total ram usage:        0 bytes
  9056 ;; Hardware stack levels used:    1
  9057 ;; Hardware stack levels required when called:    2
  9058 ;; This function calls:
  9059 ;;		Nothing
  9060 ;; This function is called by:
  9061 ;;		_SYSTEM_Initialize
  9062 ;; This function uses a non-reentrant model
  9063 ;;
  9064                           
  9065                           	psect	text38
  9066  003104                     __ptext38:
  9067                           	opt stack 0
  9068  003104                     _OSCILLATOR_Initialize:
  9069                           	opt stack 27
  9070                           
  9071                           ;mcc.c: 123: OSCCON = 0x60;
  9072                           
  9073                           ; BSR set to: 15
  9074                           ;incstack = 0
  9075  003104  0E60               	movlw	96
  9076  003106  6ED3               	movwf	4051,c	;volatile
  9077                           
  9078                           ;mcc.c: 125: OSCCON2 = 0x04;
  9079  003108  0E04               	movlw	4
  9080  00310A  6ED2               	movwf	4050,c	;volatile
  9081                           
  9082                           ;mcc.c: 127: OSCTUNE = 0x00;
  9083  00310C  0E00               	movlw	0
  9084  00310E  6E9B               	movwf	3995,c	;volatile
  9085  003110  0012               	return		;funcret
  9086  003112                     __end_of_OSCILLATOR_Initialize:
  9087                           	opt stack 0
  9088                           tblptru	equ	0xFF8
  9089                           tblptrh	equ	0xFF7
  9090                           tblptrl	equ	0xFF6
  9091                           tablat	equ	0xFF5
  9092                           prodh	equ	0xFF4
  9093                           prodl	equ	0xFF3
  9094                           intcon	equ	0xFF2
  9095                           intcon2	equ	0xFF1
  9096                           intcon3	equ	0xFF0
  9097                           postinc0	equ	0xFEE
  9098                           wreg	equ	0xFE8
  9099                           indf2	equ	0xFDF
  9100                           postinc2	equ	0xFDE
  9101                           postdec2	equ	0xFDD
  9102                           fsr2h	equ	0xFDA
  9103                           fsr2l	equ	0xFD9
  9104                           status	equ	0xFD8
  9105                           
  9106 ;; *************** function _INTERRUPT_Initialize *****************
  9107 ;; Defined at:
  9108 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
  9109 ;; Parameters:    Size  Location     Type
  9110 ;;		None
  9111 ;; Auto vars:     Size  Location     Type
  9112 ;;		None
  9113 ;; Return value:  Size  Location     Type
  9114 ;;                  1    wreg      void 
  9115 ;; Registers used:
  9116 ;;		None
  9117 ;; Tracked objects:
  9118 ;;		On entry : 0/0
  9119 ;;		On exit  : 0/0
  9120 ;;		Unchanged: 0/0
  9121 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9122 ;;      Params:         0       0       0       0       0       0       0
  9123 ;;      Locals:         0       0       0       0       0       0       0
  9124 ;;      Temps:          0       0       0       0       0       0       0
  9125 ;;      Totals:         0       0       0       0       0       0       0
  9126 ;;Total ram usage:        0 bytes
  9127 ;; Hardware stack levels used:    1
  9128 ;; Hardware stack levels required when called:    2
  9129 ;; This function calls:
  9130 ;;		Nothing
  9131 ;; This function is called by:
  9132 ;;		_SYSTEM_Initialize
  9133 ;; This function uses a non-reentrant model
  9134 ;;
  9135                           
  9136                           	psect	text39
  9137  00311C                     __ptext39:
  9138                           	opt stack 0
  9139  00311C                     _INTERRUPT_Initialize:
  9140                           	opt stack 27
  9141                           
  9142                           ;interrupt_manager.c: 54: RCONbits.IPEN = 0;
  9143                           
  9144                           ;incstack = 0
  9145  00311C  9ED0               	bcf	4048,7,c	;volatile
  9146  00311E  0012               	return		;funcret
  9147  003120                     __end_of_INTERRUPT_Initialize:
  9148                           	opt stack 0
  9149                           tblptru	equ	0xFF8
  9150                           tblptrh	equ	0xFF7
  9151                           tblptrl	equ	0xFF6
  9152                           tablat	equ	0xFF5
  9153                           prodh	equ	0xFF4
  9154                           prodl	equ	0xFF3
  9155                           intcon	equ	0xFF2
  9156                           intcon2	equ	0xFF1
  9157                           intcon3	equ	0xFF0
  9158                           postinc0	equ	0xFEE
  9159                           wreg	equ	0xFE8
  9160                           indf2	equ	0xFDF
  9161                           postinc2	equ	0xFDE
  9162                           postdec2	equ	0xFDD
  9163                           fsr2h	equ	0xFDA
  9164                           fsr2l	equ	0xFD9
  9165                           status	equ	0xFD8
  9166                           
  9167 ;; *************** function _EUSART2_Initialize *****************
  9168 ;; Defined at:
  9169 ;;		line 75 in file "mcc_generated_files/eusart2.c"
  9170 ;; Parameters:    Size  Location     Type
  9171 ;;		None
  9172 ;; Auto vars:     Size  Location     Type
  9173 ;;		None
  9174 ;; Return value:  Size  Location     Type
  9175 ;;                  1    wreg      void 
  9176 ;; Registers used:
  9177 ;;		wreg, status,2
  9178 ;; Tracked objects:
  9179 ;;		On entry : 0/0
  9180 ;;		On exit  : 0/0
  9181 ;;		Unchanged: 0/0
  9182 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9183 ;;      Params:         0       0       0       0       0       0       0
  9184 ;;      Locals:         0       0       0       0       0       0       0
  9185 ;;      Temps:          0       0       0       0       0       0       0
  9186 ;;      Totals:         0       0       0       0       0       0       0
  9187 ;;Total ram usage:        0 bytes
  9188 ;; Hardware stack levels used:    1
  9189 ;; Hardware stack levels required when called:    2
  9190 ;; This function calls:
  9191 ;;		Nothing
  9192 ;; This function is called by:
  9193 ;;		_SYSTEM_Initialize
  9194 ;; This function uses a non-reentrant model
  9195 ;;
  9196                           
  9197                           	psect	text40
  9198  002F44                     __ptext40:
  9199                           	opt stack 0
  9200  002F44                     _EUSART2_Initialize:
  9201                           	opt stack 27
  9202                           
  9203                           ;eusart2.c: 78: PIE3bits.RC2IE = 0;
  9204                           
  9205                           ;incstack = 0
  9206  002F44  9AA3               	bcf	4003,5,c	;volatile
  9207                           
  9208                           ;eusart2.c: 79: PIE3bits.TX2IE = 0;
  9209  002F46  98A3               	bcf	4003,4,c	;volatile
  9210                           
  9211                           ;eusart2.c: 84: BAUDCON2 = 0x08;
  9212  002F48  0E08               	movlw	8
  9213  002F4A  6E70               	movwf	3952,c	;volatile
  9214                           
  9215                           ;eusart2.c: 87: RCSTA2 = 0x90;
  9216  002F4C  0E90               	movlw	144
  9217  002F4E  6E71               	movwf	3953,c	;volatile
  9218                           
  9219                           ;eusart2.c: 90: TXSTA2 = 0x24;
  9220  002F50  0E24               	movlw	36
  9221  002F52  6E72               	movwf	3954,c	;volatile
  9222                           
  9223                           ;eusart2.c: 93: SPBRG2 = 0x67;
  9224  002F54  0E67               	movlw	103
  9225  002F56  6E75               	movwf	3957,c	;volatile
  9226                           
  9227                           ;eusart2.c: 96: SPBRGH2 = 0x00;
  9228  002F58  0E00               	movlw	0
  9229  002F5A  6E76               	movwf	3958,c	;volatile
  9230                           
  9231                           ;eusart2.c: 100: eusart2TxHead = 0;
  9232  002F5C  0E00               	movlw	0
  9233  002F5E  6E4A               	movwf	_eusart2TxHead,c	;volatile
  9234                           
  9235                           ;eusart2.c: 101: eusart2TxTail = 0;
  9236  002F60  0E00               	movlw	0
  9237  002F62  6E49               	movwf	_eusart2TxTail,c	;volatile
  9238                           
  9239                           ;eusart2.c: 102: eusart2TxBufferRemaining = sizeof(eusart2TxBuffer);
  9240  002F64  0E08               	movlw	8
  9241  002F66  6E4B               	movwf	_eusart2TxBufferRemaining,c	;volatile
  9242                           
  9243                           ;eusart2.c: 104: eusart2RxHead = 0;
  9244  002F68  0E00               	movlw	0
  9245  002F6A  6E48               	movwf	_eusart2RxHead,c	;volatile
  9246                           
  9247                           ;eusart2.c: 105: eusart2RxTail = 0;
  9248  002F6C  0E00               	movlw	0
  9249  002F6E  6E47               	movwf	_eusart2RxTail,c	;volatile
  9250                           
  9251                           ;eusart2.c: 106: eusart2RxCount = 0;
  9252  002F70  0E00               	movlw	0
  9253  002F72  6E46               	movwf	_eusart2RxCount,c	;volatile
  9254                           
  9255                           ;eusart2.c: 109: PIE3bits.RC2IE = 1;
  9256  002F74  8AA3               	bsf	4003,5,c	;volatile
  9257  002F76  0012               	return		;funcret
  9258  002F78                     __end_of_EUSART2_Initialize:
  9259                           	opt stack 0
  9260                           tblptru	equ	0xFF8
  9261                           tblptrh	equ	0xFF7
  9262                           tblptrl	equ	0xFF6
  9263                           tablat	equ	0xFF5
  9264                           prodh	equ	0xFF4
  9265                           prodl	equ	0xFF3
  9266                           intcon	equ	0xFF2
  9267                           intcon2	equ	0xFF1
  9268                           intcon3	equ	0xFF0
  9269                           postinc0	equ	0xFEE
  9270                           wreg	equ	0xFE8
  9271                           indf2	equ	0xFDF
  9272                           postinc2	equ	0xFDE
  9273                           postdec2	equ	0xFDD
  9274                           fsr2h	equ	0xFDA
  9275                           fsr2l	equ	0xFD9
  9276                           status	equ	0xFD8
  9277                           
  9278 ;; *************** function _INTERRUPT_InterruptManager *****************
  9279 ;; Defined at:
  9280 ;;		line 57 in file "mcc_generated_files/interrupt_manager.c"
  9281 ;; Parameters:    Size  Location     Type
  9282 ;;		None
  9283 ;; Auto vars:     Size  Location     Type
  9284 ;;		None
  9285 ;; Return value:  Size  Location     Type
  9286 ;;                  1    wreg      void 
  9287 ;; Registers used:
  9288 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9289 ;; Tracked objects:
  9290 ;;		On entry : 0/0
  9291 ;;		On exit  : 0/0
  9292 ;;		Unchanged: 0/0
  9293 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9294 ;;      Params:         0       0       0       0       0       0       0
  9295 ;;      Locals:         0       0       0       0       0       0       0
  9296 ;;      Temps:         18       0       0       0       0       0       0
  9297 ;;      Totals:        18       0       0       0       0       0       0
  9298 ;;Total ram usage:       18 bytes
  9299 ;; Hardware stack levels used:    1
  9300 ;; Hardware stack levels required when called:    1
  9301 ;; This function calls:
  9302 ;;		_EUSART2_Receive_ISR
  9303 ;;		_EUSART2_Transmit_ISR
  9304 ;; This function is called by:
  9305 ;;		Interrupt level 2
  9306 ;; This function uses a non-reentrant model
  9307 ;;
  9308                           
  9309                           	psect	intcode
  9310  000008                     __pintcode:
  9311                           	opt stack 0
  9312  000008                     _INTERRUPT_InterruptManager:
  9313                           	opt stack 24
  9314                           
  9315                           ;incstack = 0
  9316  000008  824C               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  9317  00000A  CFFA F001          	movff	pclath,??_INTERRUPT_InterruptManager
  9318  00000E  CFFB F002          	movff	pclatu,??_INTERRUPT_InterruptManager+1
  9319  000012  CFE9 F003          	movff	fsr0l,??_INTERRUPT_InterruptManager+2
  9320  000016  CFEA F004          	movff	fsr0h,??_INTERRUPT_InterruptManager+3
  9321  00001A  CFE1 F005          	movff	fsr1l,??_INTERRUPT_InterruptManager+4
  9322  00001E  CFE2 F006          	movff	fsr1h,??_INTERRUPT_InterruptManager+5
  9323  000022  CFD9 F007          	movff	fsr2l,??_INTERRUPT_InterruptManager+6
  9324  000026  CFDA F008          	movff	fsr2h,??_INTERRUPT_InterruptManager+7
  9325  00002A  CFF3 F009          	movff	prodl,??_INTERRUPT_InterruptManager+8
  9326  00002E  CFF4 F00A          	movff	prodh,??_INTERRUPT_InterruptManager+9
  9327  000032  CFF6 F00B          	movff	tblptrl,??_INTERRUPT_InterruptManager+10
  9328  000036  CFF7 F00C          	movff	tblptrh,??_INTERRUPT_InterruptManager+11
  9329  00003A  CFF8 F00D          	movff	tblptru,??_INTERRUPT_InterruptManager+12
  9330  00003E  CFF5 F00E          	movff	tablat,??_INTERRUPT_InterruptManager+13
  9331  000042  C04C  F00F         	movff	btemp,??_INTERRUPT_InterruptManager+14
  9332  000046  C04D  F010         	movff	btemp+1,??_INTERRUPT_InterruptManager+15
  9333  00004A  C04E  F011         	movff	btemp+2,??_INTERRUPT_InterruptManager+16
  9334  00004E  C04F  F012         	movff	btemp+3,??_INTERRUPT_InterruptManager+17
  9335                           
  9336                           ;interrupt_manager.c: 60: if(INTCONbits.PEIE == 1 && PIE3bits.TX2IE == 1 && PIR3bits.TX2
      +                          IF == 1)
  9337  000052  BCF2               	btfsc	intcon,6,c	;volatile
  9338  000054  A8A3               	btfss	4003,4,c	;volatile
  9339  000056  D005               	goto	i2l90
  9340  000058  A8A4               	btfss	4004,4,c	;volatile
  9341  00005A  D003               	goto	i2l90
  9342                           
  9343                           ;interrupt_manager.c: 61: {
  9344                           ;interrupt_manager.c: 62: EUSART2_Transmit_ISR();
  9345  00005C  ECD4  F017         	call	_EUSART2_Transmit_ISR	;wreg free
  9346                           
  9347                           ;interrupt_manager.c: 63: }
  9348  000060  D006               	goto	i2l92
  9349  000062                     i2l90:
  9350                           
  9351                           ;interrupt_manager.c: 64: else if(INTCONbits.PEIE == 1 && PIE3bits.RC2IE == 1 && PIR3bit
      +                          s.RC2IF == 1)
  9352  000062  BCF2               	btfsc	intcon,6,c	;volatile
  9353  000064  AAA3               	btfss	4003,5,c	;volatile
  9354  000066  D003               	goto	i2l92
  9355  000068  BAA4               	btfsc	4004,5,c	;volatile
  9356                           
  9357                           ;interrupt_manager.c: 65: {
  9358                           ;interrupt_manager.c: 66: EUSART2_Receive_ISR();
  9359  00006A  EC01  F018         	call	_EUSART2_Receive_ISR	;wreg free
  9360  00006E                     i2l92:
  9361                           
  9362                           ;interrupt_manager.c: 68: else
  9363                           ;interrupt_manager.c: 69: {
  9364  00006E  C012  F04F         	movff	??_INTERRUPT_InterruptManager+17,btemp+3
  9365  000072  C011  F04E         	movff	??_INTERRUPT_InterruptManager+16,btemp+2
  9366  000076  C010  F04D         	movff	??_INTERRUPT_InterruptManager+15,btemp+1
  9367  00007A  C00F  F04C         	movff	??_INTERRUPT_InterruptManager+14,btemp
  9368  00007E  C00E  FFF5         	movff	??_INTERRUPT_InterruptManager+13,tablat
  9369  000082  C00D  FFF8         	movff	??_INTERRUPT_InterruptManager+12,tblptru
  9370  000086  C00C  FFF7         	movff	??_INTERRUPT_InterruptManager+11,tblptrh
  9371  00008A  C00B  FFF6         	movff	??_INTERRUPT_InterruptManager+10,tblptrl
  9372  00008E  C00A  FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
  9373  000092  C009  FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
  9374  000096  C008  FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
  9375  00009A  C007  FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
  9376  00009E  C006  FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
  9377  0000A2  C005  FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
  9378  0000A6  C004  FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
  9379  0000AA  C003  FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
  9380  0000AE  C002  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
  9381  0000B2  C001  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
  9382  0000B6  924C               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  9383  0000B8  0011               	retfie		f
  9384  0000BA                     __end_of_INTERRUPT_InterruptManager:
  9385                           	opt stack 0
  9386                           pclatu	equ	0xFFB
  9387                           pclath	equ	0xFFA
  9388                           tblptru	equ	0xFF8
  9389                           tblptrh	equ	0xFF7
  9390                           tblptrl	equ	0xFF6
  9391                           tablat	equ	0xFF5
  9392                           prodh	equ	0xFF4
  9393                           prodl	equ	0xFF3
  9394                           intcon	equ	0xFF2
  9395                           intcon2	equ	0xFF1
  9396                           intcon3	equ	0xFF0
  9397                           postinc0	equ	0xFEE
  9398                           fsr0h	equ	0xFEA
  9399                           fsr0l	equ	0xFE9
  9400                           wreg	equ	0xFE8
  9401                           fsr1h	equ	0xFE2
  9402                           fsr1l	equ	0xFE1
  9403                           indf2	equ	0xFDF
  9404                           postinc2	equ	0xFDE
  9405                           postdec2	equ	0xFDD
  9406                           fsr2h	equ	0xFDA
  9407                           fsr2l	equ	0xFD9
  9408                           status	equ	0xFD8
  9409                           
  9410 ;; *************** function _EUSART2_Transmit_ISR *****************
  9411 ;; Defined at:
  9412 ;;		line 165 in file "mcc_generated_files/eusart2.c"
  9413 ;; Parameters:    Size  Location     Type
  9414 ;;		None
  9415 ;; Auto vars:     Size  Location     Type
  9416 ;;		None
  9417 ;; Return value:  Size  Location     Type
  9418 ;;                  1    wreg      void 
  9419 ;; Registers used:
  9420 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  9421 ;; Tracked objects:
  9422 ;;		On entry : 0/0
  9423 ;;		On exit  : 0/0
  9424 ;;		Unchanged: 0/0
  9425 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9426 ;;      Params:         0       0       0       0       0       0       0
  9427 ;;      Locals:         0       0       0       0       0       0       0
  9428 ;;      Temps:          0       0       0       0       0       0       0
  9429 ;;      Totals:         0       0       0       0       0       0       0
  9430 ;;Total ram usage:        0 bytes
  9431 ;; Hardware stack levels used:    1
  9432 ;; This function calls:
  9433 ;;		Nothing
  9434 ;; This function is called by:
  9435 ;;		_INTERRUPT_InterruptManager
  9436 ;; This function uses a non-reentrant model
  9437 ;;
  9438                           
  9439                           	psect	text42
  9440  002FA8                     __ptext42:
  9441                           	opt stack 0
  9442  002FA8                     _EUSART2_Transmit_ISR:
  9443                           	opt stack 24
  9444                           
  9445                           ;eusart2.c: 169: if(sizeof(eusart2TxBuffer) > eusart2TxBufferRemaining)
  9446                           
  9447                           ;incstack = 0
  9448  002FA8  0E08               	movlw	8
  9449  002FAA  604B               	cpfslt	_eusart2TxBufferRemaining,c	;volatile
  9450  002FAC  D012               	goto	i2l62
  9451                           
  9452                           ;eusart2.c: 170: {
  9453                           ;eusart2.c: 171: TXREG2 = eusart2TxBuffer[eusart2TxTail++];
  9454  002FAE  5049               	movf	_eusart2TxTail,w,c	;volatile
  9455  002FB0  0D01               	mullw	1
  9456  002FB2  0EBD               	movlw	low _eusart2TxBuffer
  9457  002FB4  24F3               	addwf	prodl,w,c
  9458  002FB6  6ED9               	movwf	fsr2l,c
  9459  002FB8  0E00               	movlw	high _eusart2TxBuffer
  9460  002FBA  20F4               	addwfc	prodh,w,c
  9461  002FBC  6EDA               	movwf	fsr2h,c
  9462  002FBE  50DF               	movf	indf2,w,c
  9463  002FC0  6E73               	movwf	3955,c	;volatile
  9464  002FC2  2A49               	incf	_eusart2TxTail,f,c	;volatile
  9465                           
  9466                           ;eusart2.c: 172: if(sizeof(eusart2TxBuffer) <= eusart2TxTail)
  9467  002FC4  0E07               	movlw	7
  9468  002FC6  6449               	cpfsgt	_eusart2TxTail,c	;volatile
  9469  002FC8  D002               	goto	i2l63
  9470                           
  9471                           ;eusart2.c: 173: {
  9472                           ;eusart2.c: 174: eusart2TxTail = 0;
  9473  002FCA  0E00               	movlw	0
  9474  002FCC  6E49               	movwf	_eusart2TxTail,c	;volatile
  9475  002FCE                     i2l63:
  9476                           
  9477                           ;eusart2.c: 175: }
  9478                           ;eusart2.c: 176: eusart2TxBufferRemaining++;
  9479  002FCE  2A4B               	incf	_eusart2TxBufferRemaining,f,c	;volatile
  9480                           
  9481                           ;eusart2.c: 177: }
  9482  002FD0  0012               	return	
  9483  002FD2                     i2l62:
  9484                           
  9485                           ;eusart2.c: 178: else
  9486                           ;eusart2.c: 179: {
  9487                           ;eusart2.c: 180: PIE3bits.TX2IE = 0;
  9488  002FD2  98A3               	bcf	4003,4,c	;volatile
  9489  002FD4  0012               	return	
  9490  002FD6                     __end_of_EUSART2_Transmit_ISR:
  9491                           	opt stack 0
  9492                           pclatu	equ	0xFFB
  9493                           pclath	equ	0xFFA
  9494                           tblptru	equ	0xFF8
  9495                           tblptrh	equ	0xFF7
  9496                           tblptrl	equ	0xFF6
  9497                           tablat	equ	0xFF5
  9498                           prodh	equ	0xFF4
  9499                           prodl	equ	0xFF3
  9500                           intcon	equ	0xFF2
  9501                           intcon2	equ	0xFF1
  9502                           intcon3	equ	0xFF0
  9503                           postinc0	equ	0xFEE
  9504                           fsr0h	equ	0xFEA
  9505                           fsr0l	equ	0xFE9
  9506                           wreg	equ	0xFE8
  9507                           fsr1h	equ	0xFE2
  9508                           fsr1l	equ	0xFE1
  9509                           indf2	equ	0xFDF
  9510                           postinc2	equ	0xFDE
  9511                           postdec2	equ	0xFDD
  9512                           fsr2h	equ	0xFDA
  9513                           fsr2l	equ	0xFD9
  9514                           status	equ	0xFD8
  9515                           
  9516 ;; *************** function _EUSART2_Receive_ISR *****************
  9517 ;; Defined at:
  9518 ;;		line 184 in file "mcc_generated_files/eusart2.c"
  9519 ;; Parameters:    Size  Location     Type
  9520 ;;		None
  9521 ;; Auto vars:     Size  Location     Type
  9522 ;;		None
  9523 ;; Return value:  Size  Location     Type
  9524 ;;                  1    wreg      void 
  9525 ;; Registers used:
  9526 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  9527 ;; Tracked objects:
  9528 ;;		On entry : 0/0
  9529 ;;		On exit  : 0/0
  9530 ;;		Unchanged: 0/0
  9531 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9532 ;;      Params:         0       0       0       0       0       0       0
  9533 ;;      Locals:         0       0       0       0       0       0       0
  9534 ;;      Temps:          0       0       0       0       0       0       0
  9535 ;;      Totals:         0       0       0       0       0       0       0
  9536 ;;Total ram usage:        0 bytes
  9537 ;; Hardware stack levels used:    1
  9538 ;; This function calls:
  9539 ;;		Nothing
  9540 ;; This function is called by:
  9541 ;;		_INTERRUPT_InterruptManager
  9542 ;; This function uses a non-reentrant model
  9543 ;;
  9544                           
  9545                           	psect	text43
  9546  003002                     __ptext43:
  9547                           	opt stack 0
  9548  003002                     _EUSART2_Receive_ISR:
  9549                           	opt stack 24
  9550                           
  9551                           ;eusart2.c: 187: if(1 == RCSTA2bits.OERR)
  9552                           
  9553                           ;incstack = 0
  9554  003002  A271               	btfss	3953,1,c	;volatile
  9555  003004  D002               	goto	i2l68
  9556                           
  9557                           ;eusart2.c: 188: {
  9558                           ;eusart2.c: 191: RCSTA2bits.CREN = 0;
  9559  003006  9871               	bcf	3953,4,c	;volatile
  9560                           
  9561                           ;eusart2.c: 192: RCSTA2bits.CREN = 1;
  9562  003008  8871               	bsf	3953,4,c	;volatile
  9563  00300A                     i2l68:
  9564                           
  9565                           ;eusart2.c: 193: }
  9566                           ;eusart2.c: 196: eusart2RxBuffer[eusart2RxHead++] = RCREG2;
  9567  00300A  5048               	movf	_eusart2RxHead,w,c	;volatile
  9568  00300C  0D01               	mullw	1
  9569  00300E  0EB5               	movlw	low _eusart2RxBuffer
  9570  003010  24F3               	addwf	prodl,w,c
  9571  003012  6ED9               	movwf	fsr2l,c
  9572  003014  0E00               	movlw	high _eusart2RxBuffer
  9573  003016  20F4               	addwfc	prodh,w,c
  9574  003018  6EDA               	movwf	fsr2h,c
  9575  00301A  CF74 FFDF          	movff	3956,indf2	;volatile
  9576  00301E  2A48               	incf	_eusart2RxHead,f,c	;volatile
  9577                           
  9578                           ;eusart2.c: 197: if(sizeof(eusart2RxBuffer) <= eusart2RxHead)
  9579  003020  0E07               	movlw	7
  9580  003022  6448               	cpfsgt	_eusart2RxHead,c	;volatile
  9581  003024  D002               	goto	i2l69
  9582                           
  9583                           ;eusart2.c: 198: {
  9584                           ;eusart2.c: 199: eusart2RxHead = 0;
  9585  003026  0E00               	movlw	0
  9586  003028  6E48               	movwf	_eusart2RxHead,c	;volatile
  9587  00302A                     i2l69:
  9588                           
  9589                           ;eusart2.c: 200: }
  9590                           ;eusart2.c: 201: eusart2RxCount++;
  9591  00302A  2A46               	incf	_eusart2RxCount,f,c	;volatile
  9592  00302C  0012               	return		;funcret
  9593  00302E                     __end_of_EUSART2_Receive_ISR:
  9594                           	opt stack 0
  9595                           pclatu	equ	0xFFB
  9596                           pclath	equ	0xFFA
  9597                           tblptru	equ	0xFF8
  9598                           tblptrh	equ	0xFF7
  9599                           tblptrl	equ	0xFF6
  9600                           tablat	equ	0xFF5
  9601                           prodh	equ	0xFF4
  9602                           prodl	equ	0xFF3
  9603                           intcon	equ	0xFF2
  9604                           intcon2	equ	0xFF1
  9605                           intcon3	equ	0xFF0
  9606                           postinc0	equ	0xFEE
  9607                           fsr0h	equ	0xFEA
  9608                           fsr0l	equ	0xFE9
  9609                           wreg	equ	0xFE8
  9610                           fsr1h	equ	0xFE2
  9611                           fsr1l	equ	0xFE1
  9612                           indf2	equ	0xFDF
  9613                           postinc2	equ	0xFDE
  9614                           postdec2	equ	0xFDD
  9615                           fsr2h	equ	0xFDA
  9616                           fsr2l	equ	0xFD9
  9617                           status	equ	0xFD8
  9618                           pclatu	equ	0xFFB
  9619                           pclath	equ	0xFFA
  9620                           tblptru	equ	0xFF8
  9621                           tblptrh	equ	0xFF7
  9622                           tblptrl	equ	0xFF6
  9623                           tablat	equ	0xFF5
  9624                           prodh	equ	0xFF4
  9625                           prodl	equ	0xFF3
  9626                           intcon	equ	0xFF2
  9627                           intcon2	equ	0xFF1
  9628                           intcon3	equ	0xFF0
  9629                           postinc0	equ	0xFEE
  9630                           fsr0h	equ	0xFEA
  9631                           fsr0l	equ	0xFE9
  9632                           wreg	equ	0xFE8
  9633                           fsr1h	equ	0xFE2
  9634                           fsr1l	equ	0xFE1
  9635                           indf2	equ	0xFDF
  9636                           postinc2	equ	0xFDE
  9637                           postdec2	equ	0xFDD
  9638                           fsr2h	equ	0xFDA
  9639                           fsr2l	equ	0xFD9
  9640                           status	equ	0xFD8
  9641                           
  9642                           	psect	rparam
  9643  0000                     pclatu	equ	0xFFB
  9644                           pclath	equ	0xFFA
  9645                           tblptru	equ	0xFF8
  9646                           tblptrh	equ	0xFF7
  9647                           tblptrl	equ	0xFF6
  9648                           tablat	equ	0xFF5
  9649                           prodh	equ	0xFF4
  9650                           prodl	equ	0xFF3
  9651                           intcon	equ	0xFF2
  9652                           intcon2	equ	0xFF1
  9653                           intcon3	equ	0xFF0
  9654                           postinc0	equ	0xFEE
  9655                           fsr0h	equ	0xFEA
  9656                           fsr0l	equ	0xFE9
  9657                           wreg	equ	0xFE8
  9658                           fsr1h	equ	0xFE2
  9659                           fsr1l	equ	0xFE1
  9660                           indf2	equ	0xFDF
  9661                           postinc2	equ	0xFDE
  9662                           postdec2	equ	0xFDD
  9663                           fsr2h	equ	0xFDA
  9664                           fsr2l	equ	0xFD9
  9665                           status	equ	0xFD8
  9666                           
  9667                           	psect	temp
  9668  00004C                     btemp:
  9669                           	opt stack 0
  9670  00004C                     	ds	1
  9671  0000                     int$flags	set	btemp
  9672  0000                     wtemp6	set	btemp+1
  9673                           pclatu	equ	0xFFB
  9674                           pclath	equ	0xFFA
  9675                           tblptru	equ	0xFF8
  9676                           tblptrh	equ	0xFF7
  9677                           tblptrl	equ	0xFF6
  9678                           tablat	equ	0xFF5
  9679                           prodh	equ	0xFF4
  9680                           prodl	equ	0xFF3
  9681                           intcon	equ	0xFF2
  9682                           intcon2	equ	0xFF1
  9683                           intcon3	equ	0xFF0
  9684                           postinc0	equ	0xFEE
  9685                           fsr0h	equ	0xFEA
  9686                           fsr0l	equ	0xFE9
  9687                           wreg	equ	0xFE8
  9688                           fsr1h	equ	0xFE2
  9689                           fsr1l	equ	0xFE1
  9690                           indf2	equ	0xFDF
  9691                           postinc2	equ	0xFDE
  9692                           postdec2	equ	0xFDD
  9693                           fsr2h	equ	0xFDA
  9694                           fsr2l	equ	0xFD9
  9695                           status	equ	0xFD8


Data Sizes:
    Strings     42
    Constant    118
    Data        0
    BSS         37
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     56      75
    BANK0           160     85     104
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    strcmp@s2	PTR const unsigned char  size(3) Largest target is 32767
		 -> ROM(CODE[32767]), 

    strcmp@s1	PTR const unsigned char  size(3) Largest target is 32767
		 -> ROM(CODE[32767]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 16
		 -> STR_11(CODE[15]), STR_10(CODE[16]), STR_9(CODE[11]), STR_8(CODE[11]), 
		 -> STR_7(CODE[11]), STR_6(CODE[11]), STR_5(CODE[11]), STR_4(CODE[11]), 
		 -> STR_3(CODE[11]), STR_2(CODE[11]), STR_1(CODE[11]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(BANK0[2]), 


Critical Paths under _main in COMRAM

    _temperatureMeasurementF->___ftdiv
    ___awtoft->___ftpack
    _temperatureMeasurementC->___ftdiv
    _salinityMeasurement->___ftdiv
    _retrive_data->_master_read
    _retrive_data->_master_write
    _master_write->_master_wait
    _master_read->_master_wait
    _printf->___ftsub
    _putch->_EUSART2_Write
    ___wmul->___awdiv
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___llmod->___lldiv
    ___fttol->___ftdiv
    ___ftsub->___ftadd
    _carbonMeasurement->___ftdiv
    ___lwtoft->___ftpack
    ___ftmul->___ftdiv
    ___ftdiv->___ftadd
    ___ftadd->___wmul

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_checkValue
    _temperatureMeasurementF->___fttol
    _temperatureMeasurementC->___fttol
    _salinityMeasurement->___ftmul
    _checkValue->_printf
    _printf->___fttol
    _scale->___ftmul
    _fround->___ftmul
    ___fttol->_scale
    _carbonMeasurement->___ftmul
    ___ftmul->___ftdiv

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  231581
                  _SYSTEM_Initialize
                  _carbonMeasurement
                         _checkValue
                       _master_write
                             _printf
                       _retrive_data
                _salinityMeasurement
            _temperatureMeasurementC
            _temperatureMeasurementF
 ---------------------------------------------------------------------------------
 (1) _temperatureMeasurementF                             10     7      3   26543
                                             46 BANK0     10     7      3
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___fttol
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (2) ___awtoft                                             4     1      3    3236
                                             26 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) _temperatureMeasurementC                              8     5      3   23273
                                             46 BANK0      8     5      3
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___fttol
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (1) _salinityMeasurement                                  9     6      3   22599
                                             24 BANK0      9     6      3
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (1) _retrive_data                                         4     2      2    1480
                                             23 COMRAM     4     2      2
                        _master_read
                       _master_write
 ---------------------------------------------------------------------------------
 (2) _master_write                                         4     0      4     956
                                             19 COMRAM     4     0      4
                        _master_wait
 ---------------------------------------------------------------------------------
 (2) _master_read                                          4     2      2     198
                                             19 COMRAM     4     2      2
                        _master_wait
 ---------------------------------------------------------------------------------
 (3) _master_wait                                          1     1      0       0
                                             18 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _checkValue                                           3     3      0   67829
                                             82 BANK0      3     3      0
                       _EUSART2_Read
                      _EUSART2_Write
                             _printf
                             _strcmp
 ---------------------------------------------------------------------------------
 (2) _strcmp                                               8     2      6    1459
                                             18 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (1) _printf                                              42    37      5   66302
                                             46 BANK0     36    31      5
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _putch
                              _scale
 ---------------------------------------------------------------------------------
 (2) _scale                                               10     7      3   14857
                                             24 BANK0      7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      66
                                             19 COMRAM     1     1      0
                      _EUSART2_Write
 ---------------------------------------------------------------------------------
 (3) _EUSART2_Write                                        1     1      0      44
                                             18 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                             18 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _fround                                              13    10      3   14578
                                             24 BANK0     10     7      3
                            ___awdiv
                            ___awmod
                            ___ftadd (ARG)
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    2895
                                             32 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4    1664
                                             18 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4    1820
                                             24 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (2) __tdiv_to_l_                                         15     9      6     455
                                             18 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (2) __div_to_l_                                          12     6      6     598
                                             18 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (2) ___lltoft                                             9     5      4    3205
                                             26 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___llmod                                              9     1      8     767
                                             31 COMRAM     9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     618
                                             18 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4     708
                                             31 BANK0     15    11      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    6414
                                             50 COMRAM     6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3     121
                                             18 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6     592
                                             18 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (2) _EUSART2_Read                                         1     1      0      24
                                             18 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _carbonMeasurement                                    9     6      3   22599
                                             24 BANK0      9     6      3
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (2) ___lwtoft                                             3     0      3    3584
                                             26 COMRAM     3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             15     9      6    7781
                                              9 BANK0     15     9      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    5013
                                             50 COMRAM     6     0      6
                                              0 BANK0      9     9      0
                            ___ftadd (ARG)
                           ___ftpack
                           ___ftpack (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftadd                                             12     6      6    5998
                                             38 COMRAM    12     6      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___awtoft (ARG)
                           ___ftpack
                           ___ftpack (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    3013
                                             18 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0       0
                 _EUSART2_Initialize
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART2_Initialize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _INTERRUPT_InterruptManager                          18    18      0       0
                                              0 COMRAM    18    18      0
                _EUSART2_Receive_ISR
               _EUSART2_Transmit_ISR
 ---------------------------------------------------------------------------------
 (7) _EUSART2_Transmit_ISR                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _EUSART2_Receive_ISR                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _SYSTEM_Initialize
     _EUSART2_Initialize
     _INTERRUPT_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
   _carbonMeasurement
     ___ftadd
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftdiv
       ___ftadd (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftdiv (ARG)
         ___ftadd (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___lwtoft
       ___ftpack
   _checkValue
     _EUSART2_Read
     _EUSART2_Write
     _printf
       ___awdiv
         ___awmod (ARG)
       ___ftadd
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftge
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftdiv (ARG)
           ___ftadd (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg
       ___ftsub
         ___ftadd
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftdiv (ARG)
           ___ftadd (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftdiv (ARG)
             ___ftadd (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftdiv (ARG)
               ___ftadd (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lldiv
       ___llmod
         ___lldiv (ARG)
       ___lltoft
         ___ftpack
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       __div_to_l_
       __tdiv_to_l_
       _fround
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftadd (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftdiv (ARG)
             ___ftadd (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _isdigit
       _putch
         _EUSART2_Write
       _scale
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftdiv (ARG)
             ___ftadd (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     _strcmp
   _master_write
     _master_wait
   _printf
     ___awdiv
       ___awmod (ARG)
     ___ftadd
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftge
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftdiv (ARG)
         ___ftadd (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftneg
     ___ftsub
       ___ftadd
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftdiv (ARG)
         ___ftadd (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftdiv (ARG)
           ___ftadd (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftdiv (ARG)
             ___ftadd (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lldiv
     ___llmod
       ___lldiv (ARG)
     ___lltoft
       ___ftpack
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     __div_to_l_
     __tdiv_to_l_
     _fround
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftadd (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftdiv (ARG)
           ___ftadd (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _isdigit
     _putch
       _EUSART2_Write
     _scale
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftdiv (ARG)
           ___ftadd (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
   _retrive_data
     _master_read
       _master_wait
     _master_write
       _master_wait
   _salinityMeasurement
     ___ftadd
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftdiv
       ___ftadd (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftdiv (ARG)
         ___ftadd (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___lwtoft
       ___ftpack
   _temperatureMeasurementC
     ___ftadd
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftdiv
       ___ftadd (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftdiv (ARG)
         ___ftadd (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftdiv (ARG)
         ___ftadd (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftdiv (ARG)
           ___ftadd (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftdiv (ARG)
             ___ftadd (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lwtoft
       ___ftpack
   _temperatureMeasurementF
     ___awtoft
       ___ftpack
     ___ftadd
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftdiv
       ___ftadd (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftdiv (ARG)
         ___ftadd (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftdiv (ARG)
         ___ftadd (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftdiv (ARG)
           ___ftadd (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftdiv (ARG)
             ___ftadd (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lwtoft
       ___ftpack

 _INTERRUPT_InterruptManager (ROOT)
   _EUSART2_Receive_ISR
   _EUSART2_Transmit_ISR

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0       0       8        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0       0       6        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     55      68       4       65.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     38      4B       1       79.8%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      B3       9        0.0%
DATA                 0      0      B3      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.43 build -156212558 
Symbol Table                                                                                   Mon Nov 06 03:53:45 2017

                                 l41 2F14                                   l50 2EB0  
                                 l43 2F3A                                   l51 2ED4  
                                 l52 2ED2                         ___awdiv@sign 001E  
                                 _ch 0041                  ___wmul@multiplicand 0023  
                       __CFG_CP0$OFF 000000                         __CFG_CP1$OFF 000000  
                       __CFG_CP2$OFF 000000                         __CFG_CP3$OFF 000000  
                       ___ftadd@exp1 0032                         ___ftadd@exp2 0031  
                        __CFG_LVP$ON 000000                         ___ftadd@sign 0030  
                                l220 2F94                                  l222 2F8E  
                                l231 2E26                                  l400 0D74  
                                l321 1AD8                                  l241 16E6  
                                l233 2E3E                                  l402 0DB4  
                                l226 2F9A                                  l218 2F84  
                                l331 1442                                  l411 0F76  
                                l403 0DB8                                  l251 1880  
                                l243 1738                                  l324 1BAC  
                                l332 159C                                  l412 0F9C  
                                l404 0DDC                                  l236 2E50  
                                l421 10AC                                  l405 0F08  
                                l341 06E8                                  l253 18D2  
                                l245 178A                                  l334 1652  
                                l422 10B6                                  l406 0E2E  
                                l350 07F0                                  l342 06DE  
                                l327 1468                                  l423 10EE  
                                l351 07B4                                  l255 1924  
                                l247 17DC                                  l328 138C  
                                l424 10F8                                  l416 1010  
                                l408 0F24                                  l280 1C6C  
                                l425 1140                                  l409 0F16  
                                l257 1976                                  l249 182E  
                                l610 2B54                                  l426 1124  
                                l418 1040                                  l362 0F32  
                                l370 0A30                                  l354 081C  
                                l338 06B2                                  l290 1D6C  
                                l282 1CA4                                  l611 2B4C  
                                l435 1214                                  l419 1074  
                                l371 0B14                                  l363 0868  
                                l347 0718                                  l339 06C8  
                                l620 2C2C                                  l436 118E  
                                l380 0B7A                                  l364 08AE  
                                l292 1D8C                                  l284 1CDC  
                                l621 2C38                                  l357 0816  
                                l349 0806                                  l702 1E64  
                                l614 2B74                                  l374 0AB6  
                                l366 095C                                  l358 084E  
                                l294 1DAC                                  l286 1D14  
                                l711 1EF4                                  l615 2B7E  
                                l607 2B26                                  l623 2C4E  
                                l367 09C4                                  l279 1C4A  
                                l616 2B8C                                  l608 2B36  
                                l624 2C46                                  l392 0C9E  
                                l384 0C16                                  l296 1DCA  
                                l288 1D4C                                  l641 23CE  
                                l393 0C90                                  l385 0C3E  
                                l369 09EA                                  l297 1E08  
                                l730 1F98                                  l706 1E8E  
                                l642 2410                                  l651 24A2  
                                l643 2440                                  l627 2C66  
                                l803 30D8                                  l635 2EEC  
                                l716 1EEA                                  l652 2496  
                                l628 2C70                                  l396 0D66  
                                l388 0C7A                                  l725 1F28  
                                l717 1EE0                                  l645 247E  
                                l629 2C7E                                  l397 0CDA  
                                l389 0C6C                                  l726 1F1E  
                                l830 2BB8                                  l646 246E  
                                l750 2346                                  l671 29FC  
                                l735 2836                                  l639 23B0  
                                l743 228C                                  l399 0D82  
                                l672 29F2                                  l728 1F4C  
                                l760 2AB2                                  l840 2D04  
                                l729 1F68                                  l737 2868  
                                l761 2AE2                                  l833 2BF8  
                                l745 22B8                                  l674 2A30  
                                l738 28B6                                  l770 2080  
                                l834 2C06                                  l850 2DCA  
                                l746 22F2                                  l675 2A1A  
                                l739 28E0                                  l771 209E  
                                l843 2D38                                  l851 2DBE  
                                l755 237A                                  l747 231A  
                                l844 2D46                                  l756 236E  
                                l677 2A58                                  l773 20BE  
                                l829 2BC4                                  l749 2356  
                                l678 2A4E                                  l774 20DC  
                                l790 21FC                                  l767 1FF8  
                                l791 21E8                                  l839 2D10  
                                l784 2E74                                  l769 2032  
                                l778 3090                                  _CMD 003F  
                                l796 2228                                  l788 2156  
                                l797 2218                                  l799 224E  
                       __CFG_CPB$OFF 000000                         __CFG_CPD$OFF 000000  
                       ___awmod@sign 0018                                  prod 000FF3  
                                wreg 000FE8      __end_of_temperatureMeasurementC 29D4  
    __end_of_temperatureMeasurementF 25DC                         ___ftdiv@cntr 0063  
                       ___ftdiv@sign 0068                                 l1030 2CA2  
                               l1031 2C8A                                 l4012 0B80  
                               l2428 2EA0                                 l4116 0FA2  
                               l4044 0C90                                 l4062 0D74  
                               l4038 0C6C                                 l2388 2B0E  
                               l4178 118E                                 l3992 0A90  
                               l3984 0A30                                 STR_1 0696  
                               STR_2 0696                                 STR_3 0696  
                               STR_4 0696                                 STR_5 0696  
                               STR_6 0696                                 STR_7 0696  
                               STR_8 0696                                 STR_9 0696  
                               _LATA 000F89                                 _LATB 000F8A  
                               _LATC 000F8B                                 u2430 2B58  
                               u4111 1E22                                 u4040 29E4  
                               u5000 1166                                 u4121 1E36  
                               u4210 1EBE                                 u3090 2CE6  
                               u5020 122A                                 u4150 1E56  
                               u2710 2380                                 u2631 2270  
                               u4080 2A62                                 u5041 2818  
                               u4321 1FD4                                 u4250 1EFC  
                               u2490 2C52                                 u2651 229C  
                       printf@tmpval 009E                                 u4180 1E80  
                               u2900 2232                                 u5061 284A  
                               u4341 200E                                 u4280 1F30  
                               u4600 0A00                                 u2841 2132  
                               u2930 2BC8                                 u4610 0A46  
                               u2860 217C                                 u2780 24A8  
                               u2960 2D14                                 u4640 0A90  
                               u4560 08F4                                 u2865 2172  
                               u4490 078C                                 u4740 0CB2  
                               u4565 08E8                                 u4680 0BC6  
                               u4770 0D96                                 u4780 0DAC  
                               i2l62 2FD2                                 u4870 0FE8  
                               i2l63 2FCE                                 i2l90 0062  
                               i2l68 300A                                 i2l92 006E  
                               i2l69 302A                                 u4990 114C  
                               _WPUB 000F61                ??_EUSART2_Receive_ISR 0001  
                      _EUSART2_Write 2E9E                                 _data 003D  
                               _main 1BF4                         ___ftpack@arg 0013  
                       ___ftpack@exp 0016                                 _temp 0045  
                      ?_EUSART2_Read 0001                                 fsr0h 000FEA  
                               fsr1h 000FE2                                 fsr2h 000FDA  
                               fsr0l 000FE9                                 indf2 000FDF  
                               fsr1l 000FE1                                 fsr2l 000FD9  
                               btemp 004C                        __CFG_BORV$190 000000  
                               prodh 000FF4                                 prodl 000FF3  
                               start 00BA                        __CFG_IESO$OFF 000000  
       __end_of_EUSART2_Transmit_ISR 2FD6                         ___ftmul@cntr 0076  
                       ___param_bank 000000                         ___ftmul@sign 0077  
                  _carbonMeasurement 26F0                         ___fttol@exp1 008D  
                       ___fttol@lval 0089       __size_of_OSCILLATOR_Initialize 000E  
                 ?_carbonMeasurement 0078        __end_of_OSCILLATOR_Initialize 3112  
                              ?_main 0001                      __end_of___awdiv 2B96  
                    __end_of___ftadd 1FBE                                STR_10 0677  
                              STR_11 0687                      __end_of___awmod 2C88  
                    __end_of___ftdiv 2914                      __end_of___ftneg 309E  
                    __end_of___lldiv 2C18                      __end_of___ftmul 211C  
                    ___awdiv@divisor 001B                      __end_of___llmod 2D58  
                    __end_of___ftsub 2E9E                      __end_of___fttol 2260  
                     __CFG_DEBUG$OFF 000000                      ___awdiv@counter 001D  
                              _TRISA 000F92                                _TRISB 000F93  
                              _TRISC 000F94                        __CFG_WRT0$OFF 000000  
                      __CFG_WRT1$OFF 000000                        __CFG_WRT2$OFF 000000  
                      __CFG_WRT3$OFF 000000                  ??_carbonMeasurement 0039  
                       ___lltoft@exp 0023                       __CFG_EBTR0$OFF 000000  
                     __CFG_FCMEN$OFF 000000                       __CFG_EBTR1$OFF 000000  
                     __CFG_EBTR2$OFF 000000                       __CFG_EBTR3$OFF 000000  
                       ?_master_read 0014                        __CFG_WRTB$OFF 000000  
                       ?_master_wait 0001                        __CFG_WRTC$OFF 000000  
                      __CFG_WRTD$OFF 000000                       __CFG_EBTRB$OFF 000000  
                      ___awtoft@sign 001E                      __end_of_dpowers 0629  
                              _part1 003B                                _part2 0039  
                              _scale 124A                      __end_of_isdigit 30E0  
                 __CFG_MCLRE$EXTMCLR 000000                        ___ftpack@sign 0017  
                              _value 00C5                                _putch 3112  
                     ?_EUSART2_Write 0001                                pclath 000FFA  
                              tablat 000FF5                       ??_EUSART2_Read 0013  
                              status 000FD8                                wtemp6 004D  
                     __CFG_HFOFST$ON 000000                       __CFG_PBADEN$ON 000000  
          __end_of_carbonMeasurement 2804                      __initialization 302E  
                       __end_of_main 1E12          ?_INTERRUPT_InterruptManager 0001  
                             ??_main 0039                        ___fttol@sign1 0088  
                      __activetblptr 000002                       __CFG_PLLCFG$ON 000000  
               __size_of__tdiv_to_l_ 0132           __end_of_EUSART2_Initialize 2F78  
           _eusart2TxBufferRemaining 004B                     ___llmod@dividend 0020  
                             ?_scale 0078                     ___awdiv@dividend 0019  
                   __end_of___awtoft 2F10                               _ANSELA 000F38  
                             ?_putch 0001                               _ANSELB 000F39  
                             _ANSELC 000F3A                     __end_of___ftpack 2A82  
                   __end_of___lltoft 2E14                       __CFG_WDTEN$OFF 000000  
                             _RCREG2 000F74                     __end_of___lwtoft 30C2  
                             _RCSTA2 000F71                               _OSCCON 000FD3  
                             _SPBRG2 000F75          __end_of_salinityMeasurement 26F0  
                             _TXREG2 000F73                               _TXSTA2 000F72  
                     __CFG_XINST$OFF 000000                     __end_of__powers_ 0650  
                             _dSlave 0043                               ___ftge 2A82  
                      ?_master_write 0014                               ___wmul 3054  
                          ??___awdiv 001D                            ??___ftadd 002D  
                     __CFG_STVREN$ON 000000                            ??___awmod 0017  
                          ??___ftdiv 0060                            ??___ftneg 0016  
                          ??___lldiv 001B                            ??___ftmul 006F  
                          ??___llmod 0028                            ??___ftsub 0039  
                          ??___fttol 0083                               _fround 1988  
                             clear_0 3034                               clear_1 3040  
                   ___awdiv@quotient 001F                      ___awmod@divisor 0015  
                    ___awmod@counter 0017                               _printf 06A2  
                             _strcmp 2C88                ___ftmul@f3_as_product 0073  
                          ??_isdigit 0013                         __mediumconst 0000  
                             tblptrh 000FF7                               tblptrl 000FF6  
                             tblptru 000FF8                 _EUSART2_Transmit_ISR 2FA8  
                    ??_EUSART2_Write 0013        __size_of_INTERRUPT_Initialize 0004  
                    _eusart2RxBuffer 00B5                    _SYSTEM_Initialize 30F2  
                    _eusart2TxBuffer 00BD                           __accesstop 0060  
            __end_of__initialization 3046                           ___ftadd@f1 0027  
                         ___ftadd@f2 002A                           ___ftge@ff1 0013  
                         ___ftge@ff2 0016                   ?_SYSTEM_Initialize 0001  
                      ___rparam_used 000001                           ___ftdiv@f1 0033  
                         ___ftdiv@f2 0036                           ___ftdiv@f3 0064  
                         ___ftneg@f1 0013                           ___awtoft@c 001B  
         __size_of_carbonMeasurement 0114                           ___ftmul@f1 0069  
                         ___ftmul@f2 006C                           ___ftsub@f1 0033  
                         ___ftsub@f2 0036                           ___fttol@f1 007F  
                     ??_master_write 0018                       __pcstackCOMRAM 0001  
                ??_SYSTEM_Initialize 0013                  retrive_data@command 0018  
                         ___lltoft@c 001B                        __end_of_scale 1678  
                      __end_of_putch 311C                           ___lwtoft@c 001B  
               __end_of_EUSART2_Read 2F44                           __div_to_l_ 2392  
              ?_EUSART2_Transmit_ISR 0001                      __div_to_l_@exp1 001E  
                    __div_to_l_@cntr 001D                              ??_scale 0039  
          __end_of_SYSTEM_Initialize 3104                      __div_to_l_@quot 0019  
         temperatureMeasurementC@Vin 0091                              ??_putch 0014  
         temperatureMeasurementF@Vin 0091                 __size_of_master_read 004A  
                      _eusart2RxHead 0048                           _checkValue 1678  
               __size_of_master_wait 0012                        _eusart2TxHead 004A  
                         __pbssBANK0 00B5                        _eusart2RxTail 0047  
                      _eusart2TxTail 0049                           __pnvCOMRAM 004B  
                      __div_to_l_@f1 0013                        __div_to_l_@f2 0016  
           ?_temperatureMeasurementC 008E             ?_temperatureMeasurementF 008E  
              EUSART2_Read@readValue 0013                   __CFG_CCP2MX$PORTC1 000000  
                            ?___ftge 0013                              ?___wmul 0021  
                 __CFG_CCP3MX$PORTB5 000000                              ?_fround 0078  
                          ?___awtoft 001B                            ?___ftpack 0013  
                            ?_printf 008E                            ?___lltoft 001B  
                            ?_strcmp 0013                            ?___lwtoft 001B  
                            _OSCCON2 000FD2          __end_of_EUSART2_Receive_ISR 302E  
                            _OSCTUNE 000F9B                              _SPBRGH2 000F76  
                            _SSP1ADD 000FC8                              _SSP1BUF 000FC9  
                            _SSPCON2 000FC5                              _SSPSTAT 000FC7  
           temperatureMeasurementF@F 0096             temperatureMeasurementC@x 008E  
           temperatureMeasurementF@x 008E                      __CFG_PWRTEN$OFF 000000  
                  __end_of__npowers_ 0677                              __Hparam 0000  
                         _scale$1575 007B                              __Lparam 0000  
                    __size_of___ftge 0090                              ___awdiv 2B12  
                            ___ftadd 1E12                              ___awmod 2C18  
                            ___ftdiv 2804                              ___ftneg 307A  
                            ___lldiv 2B96                      __size_of___wmul 0026  
                            ___ftmul 1FBE                              ___llmod 2CF2  
                            ___ftsub 2E5E                              ___fttol 211C  
                       __psmallconst 0600                              __pcinit 302E  
                         ??___awtoft 001E                           ??___ftpack 0018  
                    __size_of_fround 026C                              __ramtop 0600  
                         ??___lltoft 001F                              __ptext0 1BF4  
                            __ptext1 24BA                              __ptext2 2ED8  
                            __ptext3 2914                              __ptext4 25DC  
                            __ptext5 2D58                              __ptext6 2F78  
                            __ptext7 2E14                              __ptext8 30E0  
                            __ptext9 1678                      __size_of_printf 0BA8  
                         ??___lwtoft 001E                      __size_of_strcmp 006A  
                        ?__div_to_l_ 0013                              _dpowers 0601  
              _OSCILLATOR_Initialize 3104               ??_EUSART2_Transmit_ISR 0001  
                            _isdigit 30C2                     ___awmod@dividend 0013  
           ??_PIN_MANAGER_Initialize 0013                 __end_of_master_write 2FA8  
         __size_of_SYSTEM_Initialize 0012                 end_of_initialization 3046  
                        ?_checkValue 0001                        ?_retrive_data 0018  
                      __Lmediumconst 0000                      ___lldiv@divisor 0017  
                    ___lldiv@counter 001F                   _EUSART2_Initialize 2F44  
                            printf@c 00B1                              printf@f 008E  
                            postdec2 000FDD                              postinc0 000FEE  
                            postinc2 000FDE                __size_of_EUSART2_Read 0034  
                       master_read@x 0016                       __tdiv_to_l_@f1 0013  
                     __tdiv_to_l_@f2 0016                              strcmp@r 001A  
                ?_EUSART2_Initialize 0001                        ??__tdiv_to_l_ 0019  
                          _TRISCbits 000F94                 ??_EUSART2_Initialize 0013  
                     ??_retrive_data 001A                          ___ftdiv@exp 0067  
                        printf@width 00AA                         _EUSART2_Read 2F10  
                __size_of__div_to_l_ 0128                          ___ftmul@exp 0072  
       __size_of_salinityMeasurement 0114         __end_of_INTERRUPT_Initialize 3120  
                     __end_of___ftge 2B12                       __end_of___wmul 307A  
                __size_of_checkValue 0310               ?_OSCILLATOR_Initialize 0001  
                     __end_of_fround 1BF4                       __end_of_printf 124A  
                     __end_of_strcmp 2CF2                  start_initialization 302E  
    __size_of_PIN_MANAGER_Initialize 002C                  __end_of__tdiv_to_l_ 2392  
                        putch@txData 0014                __end_of_EUSART2_Write 2ED8  
                    ___llmod@divisor 0024                      ___llmod@counter 0028  
                           ??___ftge 0019                             ??___wmul 0025  
                           ??_fround 0039                             ??_printf 0093  
   __size_of_temperatureMeasurementC 00C0     __size_of_temperatureMeasurementF 0122  
                           ??_strcmp 0019          temperatureMeasurementC@temp 0094  
                         fround@prec 0081                       _eusart2RxCount 0046  
        temperatureMeasurementF@temp 0094                __size_of_master_write 0030  
                  __size_of___awtoft 0038                    __size_of___ftpack 00AE  
             salinityMeasurement@Vin 007E                    __size_of___lltoft 005C  
                        __pbssCOMRAM 0039                    __size_of___lwtoft 0024  
                      __pcstackBANK0 0060                        ??_master_read 0016  
                      ??_master_wait 0013                         _isdigit$1199 0014  
                EUSART2_Write@txData 0013                 salinityMeasurement@x 0078  
             _PIN_MANAGER_Initialize 2FD6                            __pintcode 0008  
                           ?___awdiv 0019                             ?___ftadd 0027  
                           ?___awmod 0013                         _master_write 2F78  
                           ?___ftdiv 0033                             ?___ftneg 0013  
                           ?___lldiv 0013                             ?___ftmul 0069  
                           ?___llmod 0020                             ?___ftsub 0033  
                          __npowers_ 0650                             ?___fttol 007F  
               __end_of_retrive_data 2DB8         ??_INTERRUPT_InterruptManager 0001  
                   __CFG_PRICLKEN$ON 000000                          __tdiv_to_l_ 2260  
        salinityMeasurement@salinity 007B                         ??__div_to_l_ 0019  
                        __smallconst 0600                             _BAUDCON2 000F70  
                           ?_isdigit 0001                       __size_of_scale 042E  
                       ??_checkValue 00B2                       __size_of_putch 000A  
               _INTERRUPT_Initialize 311C                  __end_of_master_read 2E5E  
                __end_of_master_wait 30F2         __size_of_EUSART2_Receive_ISR 002C  
                     ___wmul@product 0025                     master_write@addr 0014  
                   master_write@data 0016                             _PIE3bits 000FA3  
__size_of_INTERRUPT_InterruptManager 00B2                             _PIR1bits 000F9E  
                 __end_of__div_to_l_ 24BA                             _PIR3bits 000FA4  
                           _RCONbits 000FD0                     __CFG_WDTPS$32768 000000  
                           _SSP1CON2 000FC5                             _SSP1STAT 000FC7  
               carbonMeasurement@Vin 007E                   __end_of_checkValue 1988  
                  ___wmul@multiplier 0021                           printf@flag 00A8  
                         printf@fval 00AC                           printf@prec 00AF  
      __size_of_EUSART2_Transmit_ISR 002E                  _salinityMeasurement 25DC  
                        _INTCON2bits 000FF1                          _INTCON3bits 000FF0  
              ?_INTERRUPT_Initialize 0001                      master_read@addr 0014  
                           __Hrparam 0000                             __Lrparam 0000  
                 __CFG_BOREN$SBORDIS 000000                 ?_salinityMeasurement 0078  
                  __CFG_P2BMX$PORTB5 000000              ??_OSCILLATOR_Initialize 0013  
                   __size_of___awdiv 0084                     __size_of___ftadd 01AC  
                   __size_of___awmod 0070                     __size_of___ftdiv 0110  
                   __size_of___ftneg 0024                     __size_of___lldiv 0082  
                   __size_of___ftmul 015E                     __size_of___llmod 0066  
                   __size_of___ftsub 0040                     __size_of___fttol 0144  
            _temperatureMeasurementC 2914              _temperatureMeasurementF 24BA  
                           ___awtoft 2ED8                             ___ftpack 29D4  
                        _fround$1573 007E                          _fround$1574 007B  
                           ___lltoft 2DB8                             ___lwtoft 309E  
                         _ANSELCbits 000F3A                     __size_of_isdigit 001E  
                        _master_read 2E14                          _master_wait 30E0  
                           __ptext10 2C88                             __ptext11 06A2  
                           __ptext20 2260                             __ptext12 124A  
                           __ptext21 2392                             __ptext13 3112  
                           __ptext30 26F0                             __ptext22 2DB8  
                           __ptext14 2E9E                             __ptext31 309E  
                           __ptext23 2CF2                             __ptext15 30C2  
                           __ptext40 2F44                             __ptext32 1FBE  
                           __ptext24 2B96                             __ptext16 1988  
                           __ptext33 2804                             __ptext25 211C  
                           __ptext17 3054                             __ptext42 2FA8  
                           __ptext34 1E12                             __ptext26 2E5E  
                           __ptext18 2C18                             __ptext43 3002  
                           __ptext35 29D4                             __ptext27 307A  
                           __ptext19 2B12                             __ptext36 30F2  
                           __ptext28 2A82                             __ptext37 2FD6  
                           __ptext29 2F10                             __ptext38 3104  
                           __ptext39 311C                         _SSP1CON1bits 000FC6  
                       _SSP1CON2bits 000FC5                             __powers_ 0629  
        __size_of_EUSART2_Initialize 0034                        __size_of_main 021E  
              ??_salinityMeasurement 0039                __size_of_retrive_data 0060  
                           int$flags 004C   __end_of_INTERRUPT_InterruptManager 00BA  
         _INTERRUPT_InterruptManager 0008                            printf@exp 00A6  
                          printf@val 00A2                           _INTCONbits 000FF2  
                           isdigit@c 0015               ??_INTERRUPT_Initialize 0013  
                           scale@scl 007E                             intlevel2 0000  
                   __tdiv_to_l_@exp1 0021                     __tdiv_to_l_@cntr 0020  
                   __tdiv_to_l_@quot 001C                         _retrive_data 2D58  
                   ___lldiv@dividend 0013              ?_PIN_MANAGER_Initialize 0001  
                         _RCSTA2bits 000F71                           _OSCCONbits 000FD3  
                 carbonMeasurement@x 0078            ??_temperatureMeasurementC 0039  
          ??_temperatureMeasurementF 0039                             printf@ap 009C  
                       ?__tdiv_to_l_ 0013               __size_of_EUSART2_Write 003A  
                _EUSART2_Receive_ISR 3002                          _printf$1576 0099  
                           strcmp@s1 0013                             strcmp@s2 0016  
                   ___lldiv@quotient 001B                    __CFG_T3CMX$PORTC0 000000  
     __end_of_PIN_MANAGER_Initialize 3002                 ?_EUSART2_Receive_ISR 0001  
                  __CFG_FOSC$INTIO67 000000              carbonMeasurement@carbon 007B  
